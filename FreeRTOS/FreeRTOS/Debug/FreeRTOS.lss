
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002378  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000008  20000000  00002378  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00003064  20000008  00002380  00020008  2**2
                  ALLOC
  3 .stack        00002004  2000306c  000053e4  00020008  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001893e  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002eba  00000000  00000000  000389c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006d04  00000000  00000000  0003b881  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000006c8  00000000  00000000  00042585  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000830  00000000  00000000  00042c4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00005f8b  00000000  00000000  0004347d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000adf4  00000000  00000000  00049408  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008fcf6  00000000  00000000  000541fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000011fc  00000000  00000000  000e3ef4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	70 50 00 20 99 1f 00 00 95 1f 00 00 95 1f 00 00     pP. ............
	...
      2c:	95 01 00 00 00 00 00 00 00 00 00 00 71 02 00 00     ............q...
      3c:	b5 02 00 00 95 1f 00 00 95 1f 00 00 95 1f 00 00     ................
      4c:	95 1f 00 00 95 1f 00 00 95 1f 00 00 95 1f 00 00     ................
      5c:	95 1f 00 00 95 1f 00 00 95 1f 00 00 95 1f 00 00     ................
      6c:	95 1f 00 00 95 1f 00 00 95 1f 00 00 95 1f 00 00     ................
      7c:	95 1f 00 00 95 1f 00 00 95 1f 00 00 95 1f 00 00     ................
      8c:	95 1f 00 00 95 1f 00 00 00 00 00 00 00 00 00 00     ................
      9c:	95 1f 00 00 95 1f 00 00 95 1f 00 00 95 1f 00 00     ................
      ac:	95 1f 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000008 	.word	0x20000008
      d4:	00000000 	.word	0x00000000
      d8:	00002378 	.word	0x00002378

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000000c 	.word	0x2000000c
     108:	00002378 	.word	0x00002378
     10c:	00002378 	.word	0x00002378
     110:	00000000 	.word	0x00000000

00000114 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
     114:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
     116:	2300      	movs	r3, #0
     118:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
     11a:	4b06      	ldr	r3, [pc, #24]	; (134 <prvTaskExitError+0x20>)
     11c:	681b      	ldr	r3, [r3, #0]
     11e:	3301      	adds	r3, #1
     120:	d001      	beq.n	126 <prvTaskExitError+0x12>
     122:	b672      	cpsid	i
     124:	e7fe      	b.n	124 <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
     126:	b672      	cpsid	i
	while( ulDummy == 0 )
     128:	9b01      	ldr	r3, [sp, #4]
     12a:	2b00      	cmp	r3, #0
     12c:	d0fc      	beq.n	128 <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
     12e:	b002      	add	sp, #8
     130:	4770      	bx	lr
     132:	46c0      	nop			; (mov r8, r8)
     134:	20000000 	.word	0x20000000
	...

00000140 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
     140:	4a0b      	ldr	r2, [pc, #44]	; (170 <pxCurrentTCBConst2>)
     142:	6813      	ldr	r3, [r2, #0]
     144:	6818      	ldr	r0, [r3, #0]
     146:	3020      	adds	r0, #32
     148:	f380 8809 	msr	PSP, r0
     14c:	2002      	movs	r0, #2
     14e:	f380 8814 	msr	CONTROL, r0
     152:	f3bf 8f6f 	isb	sy
     156:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
     158:	46ae      	mov	lr, r5
     15a:	bc08      	pop	{r3}
     15c:	bc04      	pop	{r2}
     15e:	b662      	cpsie	i
     160:	4718      	bx	r3
     162:	46c0      	nop			; (mov r8, r8)
     164:	46c0      	nop			; (mov r8, r8)
     166:	46c0      	nop			; (mov r8, r8)
     168:	46c0      	nop			; (mov r8, r8)
     16a:	46c0      	nop			; (mov r8, r8)
     16c:	46c0      	nop			; (mov r8, r8)
     16e:	46c0      	nop			; (mov r8, r8)

00000170 <pxCurrentTCBConst2>:
     170:	20002f0c 	.word	0x20002f0c

00000174 <pxPortInitialiseStack>:
{
     174:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
     176:	1f03      	subs	r3, r0, #4
     178:	2480      	movs	r4, #128	; 0x80
     17a:	0464      	lsls	r4, r4, #17
     17c:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
     17e:	3b04      	subs	r3, #4
     180:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
     182:	3b04      	subs	r3, #4
     184:	4902      	ldr	r1, [pc, #8]	; (190 <pxPortInitialiseStack+0x1c>)
     186:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
     188:	3b14      	subs	r3, #20
     18a:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
     18c:	3840      	subs	r0, #64	; 0x40
}
     18e:	bd10      	pop	{r4, pc}
     190:	00000115 	.word	0x00000115

00000194 <SVC_Handler>:
}
     194:	4770      	bx	lr
	...

00000198 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
     198:	b570      	push	{r4, r5, r6, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
     19a:	4b13      	ldr	r3, [pc, #76]	; (1e8 <xPortStartScheduler+0x50>)
     19c:	6819      	ldr	r1, [r3, #0]
     19e:	22ff      	movs	r2, #255	; 0xff
     1a0:	0412      	lsls	r2, r2, #16
     1a2:	430a      	orrs	r2, r1
     1a4:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
     1a6:	6819      	ldr	r1, [r3, #0]
     1a8:	22ff      	movs	r2, #255	; 0xff
     1aa:	0612      	lsls	r2, r2, #24
     1ac:	430a      	orrs	r2, r1
     1ae:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
     1b0:	4d0e      	ldr	r5, [pc, #56]	; (1ec <xPortStartScheduler+0x54>)
     1b2:	2400      	movs	r4, #0
     1b4:	602c      	str	r4, [r5, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
     1b6:	4b0e      	ldr	r3, [pc, #56]	; (1f0 <xPortStartScheduler+0x58>)
     1b8:	601c      	str	r4, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
     1ba:	2000      	movs	r0, #0
     1bc:	4b0d      	ldr	r3, [pc, #52]	; (1f4 <xPortStartScheduler+0x5c>)
     1be:	4798      	blx	r3
     1c0:	21fa      	movs	r1, #250	; 0xfa
     1c2:	0089      	lsls	r1, r1, #2
     1c4:	4b0c      	ldr	r3, [pc, #48]	; (1f8 <xPortStartScheduler+0x60>)
     1c6:	4798      	blx	r3
     1c8:	3801      	subs	r0, #1
     1ca:	4b0c      	ldr	r3, [pc, #48]	; (1fc <xPortStartScheduler+0x64>)
     1cc:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
     1ce:	2307      	movs	r3, #7
     1d0:	602b      	str	r3, [r5, #0]
	uxCriticalNesting = 0;
     1d2:	4b0b      	ldr	r3, [pc, #44]	; (200 <xPortStartScheduler+0x68>)
     1d4:	601c      	str	r4, [r3, #0]
	vPortStartFirstTask();
     1d6:	4b0b      	ldr	r3, [pc, #44]	; (204 <xPortStartScheduler+0x6c>)
     1d8:	4798      	blx	r3
	vTaskSwitchContext();
     1da:	4b0b      	ldr	r3, [pc, #44]	; (208 <xPortStartScheduler+0x70>)
     1dc:	4798      	blx	r3
	prvTaskExitError();
     1de:	4b0b      	ldr	r3, [pc, #44]	; (20c <xPortStartScheduler+0x74>)
     1e0:	4798      	blx	r3
}
     1e2:	2000      	movs	r0, #0
     1e4:	bd70      	pop	{r4, r5, r6, pc}
     1e6:	46c0      	nop			; (mov r8, r8)
     1e8:	e000ed20 	.word	0xe000ed20
     1ec:	e000e010 	.word	0xe000e010
     1f0:	e000e018 	.word	0xe000e018
     1f4:	00001d25 	.word	0x00001d25
     1f8:	0000213d 	.word	0x0000213d
     1fc:	e000e014 	.word	0xe000e014
     200:	20000000 	.word	0x20000000
     204:	00000141 	.word	0x00000141
     208:	000010ad 	.word	0x000010ad
     20c:	00000115 	.word	0x00000115

00000210 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
     210:	2280      	movs	r2, #128	; 0x80
     212:	0552      	lsls	r2, r2, #21
     214:	4b03      	ldr	r3, [pc, #12]	; (224 <vPortYield+0x14>)
     216:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
     218:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
     21c:	f3bf 8f6f 	isb	sy
}
     220:	4770      	bx	lr
     222:	46c0      	nop			; (mov r8, r8)
     224:	e000ed04 	.word	0xe000ed04

00000228 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
     228:	b672      	cpsid	i
    uxCriticalNesting++;
     22a:	4a04      	ldr	r2, [pc, #16]	; (23c <vPortEnterCritical+0x14>)
     22c:	6813      	ldr	r3, [r2, #0]
     22e:	3301      	adds	r3, #1
     230:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
     232:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
     236:	f3bf 8f6f 	isb	sy
}
     23a:	4770      	bx	lr
     23c:	20000000 	.word	0x20000000

00000240 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
     240:	4b06      	ldr	r3, [pc, #24]	; (25c <vPortExitCritical+0x1c>)
     242:	681b      	ldr	r3, [r3, #0]
     244:	2b00      	cmp	r3, #0
     246:	d101      	bne.n	24c <vPortExitCritical+0xc>
     248:	b672      	cpsid	i
     24a:	e7fe      	b.n	24a <vPortExitCritical+0xa>
    uxCriticalNesting--;
     24c:	3b01      	subs	r3, #1
     24e:	4a03      	ldr	r2, [pc, #12]	; (25c <vPortExitCritical+0x1c>)
     250:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
     252:	2b00      	cmp	r3, #0
     254:	d100      	bne.n	258 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
     256:	b662      	cpsie	i
}
     258:	4770      	bx	lr
     25a:	46c0      	nop			; (mov r8, r8)
     25c:	20000000 	.word	0x20000000

00000260 <ulSetInterruptMaskFromISR>:
	__asm volatile(
     260:	f3ef 8010 	mrs	r0, PRIMASK
     264:	b672      	cpsid	i
     266:	4770      	bx	lr

00000268 <vClearInterruptMaskFromISR>:
	__asm volatile(
     268:	f380 8810 	msr	PRIMASK, r0
     26c:	4770      	bx	lr
	...

00000270 <PendSV_Handler>:
	__asm volatile
     270:	f3ef 8009 	mrs	r0, PSP
     274:	4b0e      	ldr	r3, [pc, #56]	; (2b0 <pxCurrentTCBConst>)
     276:	681a      	ldr	r2, [r3, #0]
     278:	3820      	subs	r0, #32
     27a:	6010      	str	r0, [r2, #0]
     27c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
     27e:	4644      	mov	r4, r8
     280:	464d      	mov	r5, r9
     282:	4656      	mov	r6, sl
     284:	465f      	mov	r7, fp
     286:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
     288:	b508      	push	{r3, lr}
     28a:	b672      	cpsid	i
     28c:	f000 ff0e 	bl	10ac <vTaskSwitchContext>
     290:	b662      	cpsie	i
     292:	bc0c      	pop	{r2, r3}
     294:	6811      	ldr	r1, [r2, #0]
     296:	6808      	ldr	r0, [r1, #0]
     298:	3010      	adds	r0, #16
     29a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     29c:	46a0      	mov	r8, r4
     29e:	46a9      	mov	r9, r5
     2a0:	46b2      	mov	sl, r6
     2a2:	46bb      	mov	fp, r7
     2a4:	f380 8809 	msr	PSP, r0
     2a8:	3820      	subs	r0, #32
     2aa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     2ac:	4718      	bx	r3
     2ae:	46c0      	nop			; (mov r8, r8)

000002b0 <pxCurrentTCBConst>:
     2b0:	20002f0c 	.word	0x20002f0c

000002b4 <SysTick_Handler>:
{
     2b4:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
     2b6:	4b07      	ldr	r3, [pc, #28]	; (2d4 <SysTick_Handler+0x20>)
     2b8:	4798      	blx	r3
     2ba:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
     2bc:	4b06      	ldr	r3, [pc, #24]	; (2d8 <SysTick_Handler+0x24>)
     2be:	4798      	blx	r3
     2c0:	2800      	cmp	r0, #0
     2c2:	d003      	beq.n	2cc <SysTick_Handler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
     2c4:	2280      	movs	r2, #128	; 0x80
     2c6:	0552      	lsls	r2, r2, #21
     2c8:	4b04      	ldr	r3, [pc, #16]	; (2dc <SysTick_Handler+0x28>)
     2ca:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
     2cc:	0020      	movs	r0, r4
     2ce:	4b04      	ldr	r3, [pc, #16]	; (2e0 <SysTick_Handler+0x2c>)
     2d0:	4798      	blx	r3
}
     2d2:	bd10      	pop	{r4, pc}
     2d4:	00000261 	.word	0x00000261
     2d8:	00000e4d 	.word	0x00000e4d
     2dc:	e000ed04 	.word	0xe000ed04
     2e0:	00000269 	.word	0x00000269

000002e4 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     2e4:	b570      	push	{r4, r5, r6, lr}
     2e6:	0004      	movs	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
     2e8:	0743      	lsls	r3, r0, #29
     2ea:	d002      	beq.n	2f2 <pvPortMalloc+0xe>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
     2ec:	2307      	movs	r3, #7
     2ee:	439c      	bics	r4, r3
     2f0:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
     2f2:	4b13      	ldr	r3, [pc, #76]	; (340 <pvPortMalloc+0x5c>)
     2f4:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
     2f6:	4b13      	ldr	r3, [pc, #76]	; (344 <pvPortMalloc+0x60>)
     2f8:	681b      	ldr	r3, [r3, #0]
     2fa:	2b00      	cmp	r3, #0
     2fc:	d012      	beq.n	324 <pvPortMalloc+0x40>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     2fe:	4b12      	ldr	r3, [pc, #72]	; (348 <pvPortMalloc+0x64>)
     300:	681b      	ldr	r3, [r3, #0]
     302:	18e4      	adds	r4, r4, r3
     304:	4a11      	ldr	r2, [pc, #68]	; (34c <pvPortMalloc+0x68>)
     306:	4294      	cmp	r4, r2
     308:	d813      	bhi.n	332 <pvPortMalloc+0x4e>
     30a:	42a3      	cmp	r3, r4
     30c:	d211      	bcs.n	332 <pvPortMalloc+0x4e>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     30e:	4a0d      	ldr	r2, [pc, #52]	; (344 <pvPortMalloc+0x60>)
     310:	6815      	ldr	r5, [r2, #0]
     312:	18ed      	adds	r5, r5, r3
			xNextFreeByte += xWantedSize;
     314:	4b0c      	ldr	r3, [pc, #48]	; (348 <pvPortMalloc+0x64>)
     316:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     318:	4b0d      	ldr	r3, [pc, #52]	; (350 <pvPortMalloc+0x6c>)
     31a:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
     31c:	2d00      	cmp	r5, #0
     31e:	d00a      	beq.n	336 <pvPortMalloc+0x52>
		}
	}
	#endif

	return pvReturn;
}
     320:	0028      	movs	r0, r5
     322:	bd70      	pop	{r4, r5, r6, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
     324:	2207      	movs	r2, #7
     326:	4b0b      	ldr	r3, [pc, #44]	; (354 <pvPortMalloc+0x70>)
     328:	3308      	adds	r3, #8
     32a:	4393      	bics	r3, r2
     32c:	4a05      	ldr	r2, [pc, #20]	; (344 <pvPortMalloc+0x60>)
     32e:	6013      	str	r3, [r2, #0]
     330:	e7e5      	b.n	2fe <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
     332:	4b07      	ldr	r3, [pc, #28]	; (350 <pvPortMalloc+0x6c>)
     334:	4798      	blx	r3
			vApplicationMallocFailedHook();
     336:	4b08      	ldr	r3, [pc, #32]	; (358 <pvPortMalloc+0x74>)
     338:	4798      	blx	r3
     33a:	2500      	movs	r5, #0
	return pvReturn;
     33c:	e7f0      	b.n	320 <pvPortMalloc+0x3c>
     33e:	46c0      	nop			; (mov r8, r8)
     340:	00000e31 	.word	0x00000e31
     344:	20000024 	.word	0x20000024
     348:	20002f08 	.word	0x20002f08
     34c:	00002ed7 	.word	0x00002ed7
     350:	00000f6d 	.word	0x00000f6d
     354:	20000028 	.word	0x20000028
     358:	00002137 	.word	0x00002137

0000035c <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
     35c:	2800      	cmp	r0, #0
     35e:	d001      	beq.n	364 <vPortFree+0x8>
     360:	b672      	cpsid	i
     362:	e7fe      	b.n	362 <vPortFree+0x6>
}
     364:	4770      	bx	lr

00000366 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     366:	0003      	movs	r3, r0
     368:	3308      	adds	r3, #8
     36a:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     36c:	2201      	movs	r2, #1
     36e:	4252      	negs	r2, r2
     370:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     372:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     374:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     376:	2300      	movs	r3, #0
     378:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     37a:	4770      	bx	lr

0000037c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     37c:	2300      	movs	r3, #0
     37e:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     380:	4770      	bx	lr

00000382 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
     382:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     384:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     386:	689a      	ldr	r2, [r3, #8]
     388:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     38a:	689a      	ldr	r2, [r3, #8]
     38c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
     38e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     390:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
     392:	6803      	ldr	r3, [r0, #0]
     394:	3301      	adds	r3, #1
     396:	6003      	str	r3, [r0, #0]
}
     398:	4770      	bx	lr

0000039a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     39a:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     39c:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     39e:	0002      	movs	r2, r0
     3a0:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
     3a2:	1c63      	adds	r3, r4, #1
     3a4:	d102      	bne.n	3ac <vListInsert+0x12>
		pxIterator = pxList->xListEnd.pxPrevious;
     3a6:	6902      	ldr	r2, [r0, #16]
     3a8:	e004      	b.n	3b4 <vListInsert+0x1a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     3aa:	001a      	movs	r2, r3
     3ac:	6853      	ldr	r3, [r2, #4]
     3ae:	681d      	ldr	r5, [r3, #0]
     3b0:	42ac      	cmp	r4, r5
     3b2:	d2fa      	bcs.n	3aa <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     3b4:	6853      	ldr	r3, [r2, #4]
     3b6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     3b8:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
     3ba:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
     3bc:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     3be:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
     3c0:	6803      	ldr	r3, [r0, #0]
     3c2:	3301      	adds	r3, #1
     3c4:	6003      	str	r3, [r0, #0]
}
     3c6:	bd30      	pop	{r4, r5, pc}

000003c8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     3c8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     3ca:	6842      	ldr	r2, [r0, #4]
     3cc:	6881      	ldr	r1, [r0, #8]
     3ce:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     3d0:	6882      	ldr	r2, [r0, #8]
     3d2:	6841      	ldr	r1, [r0, #4]
     3d4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     3d6:	685a      	ldr	r2, [r3, #4]
     3d8:	4290      	cmp	r0, r2
     3da:	d006      	beq.n	3ea <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     3dc:	2200      	movs	r2, #0
     3de:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
     3e0:	681a      	ldr	r2, [r3, #0]
     3e2:	3a01      	subs	r2, #1
     3e4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
     3e6:	6818      	ldr	r0, [r3, #0]
}
     3e8:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     3ea:	6882      	ldr	r2, [r0, #8]
     3ec:	605a      	str	r2, [r3, #4]
     3ee:	e7f5      	b.n	3dc <uxListRemove+0x14>

000003f0 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
     3f0:	b510      	push	{r4, lr}
     3f2:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
     3f4:	4b03      	ldr	r3, [pc, #12]	; (404 <prvIsQueueEmpty+0x14>)
     3f6:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
     3f8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
     3fa:	4b03      	ldr	r3, [pc, #12]	; (408 <prvIsQueueEmpty+0x18>)
     3fc:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
     3fe:	4260      	negs	r0, r4
     400:	4160      	adcs	r0, r4

	return xReturn;
}
     402:	bd10      	pop	{r4, pc}
     404:	00000229 	.word	0x00000229
     408:	00000241 	.word	0x00000241

0000040c <prvCopyDataToQueue>:
{
     40c:	b570      	push	{r4, r5, r6, lr}
     40e:	0004      	movs	r4, r0
     410:	0016      	movs	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
     412:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
     414:	6c02      	ldr	r2, [r0, #64]	; 0x40
     416:	2a00      	cmp	r2, #0
     418:	d10b      	bne.n	432 <prvCopyDataToQueue+0x26>
BaseType_t xReturn = pdFALSE;
     41a:	2000      	movs	r0, #0
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     41c:	6823      	ldr	r3, [r4, #0]
     41e:	4283      	cmp	r3, r0
     420:	d104      	bne.n	42c <prvCopyDataToQueue+0x20>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
     422:	6860      	ldr	r0, [r4, #4]
     424:	4b16      	ldr	r3, [pc, #88]	; (480 <prvCopyDataToQueue+0x74>)
     426:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
     428:	2300      	movs	r3, #0
     42a:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
     42c:	3501      	adds	r5, #1
     42e:	63a5      	str	r5, [r4, #56]	; 0x38
}
     430:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
     432:	2e00      	cmp	r6, #0
     434:	d10e      	bne.n	454 <prvCopyDataToQueue+0x48>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
     436:	6880      	ldr	r0, [r0, #8]
     438:	4b12      	ldr	r3, [pc, #72]	; (484 <prvCopyDataToQueue+0x78>)
     43a:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
     43c:	68a3      	ldr	r3, [r4, #8]
     43e:	6c22      	ldr	r2, [r4, #64]	; 0x40
     440:	4694      	mov	ip, r2
     442:	4463      	add	r3, ip
     444:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
     446:	2000      	movs	r0, #0
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     448:	6862      	ldr	r2, [r4, #4]
     44a:	4293      	cmp	r3, r2
     44c:	d3ee      	bcc.n	42c <prvCopyDataToQueue+0x20>
			pxQueue->pcWriteTo = pxQueue->pcHead;
     44e:	6823      	ldr	r3, [r4, #0]
     450:	60a3      	str	r3, [r4, #8]
     452:	e7eb      	b.n	42c <prvCopyDataToQueue+0x20>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     454:	68c0      	ldr	r0, [r0, #12]
     456:	4b0b      	ldr	r3, [pc, #44]	; (484 <prvCopyDataToQueue+0x78>)
     458:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
     45a:	6c23      	ldr	r3, [r4, #64]	; 0x40
     45c:	425b      	negs	r3, r3
     45e:	68e2      	ldr	r2, [r4, #12]
     460:	18d2      	adds	r2, r2, r3
     462:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     464:	6821      	ldr	r1, [r4, #0]
     466:	428a      	cmp	r2, r1
     468:	d203      	bcs.n	472 <prvCopyDataToQueue+0x66>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
     46a:	6862      	ldr	r2, [r4, #4]
     46c:	4694      	mov	ip, r2
     46e:	4463      	add	r3, ip
     470:	60e3      	str	r3, [r4, #12]
BaseType_t xReturn = pdFALSE;
     472:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
     474:	2e02      	cmp	r6, #2
     476:	d1d9      	bne.n	42c <prvCopyDataToQueue+0x20>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
     478:	4285      	cmp	r5, r0
     47a:	d0d7      	beq.n	42c <prvCopyDataToQueue+0x20>
				--uxMessagesWaiting;
     47c:	3d01      	subs	r5, #1
     47e:	e7d5      	b.n	42c <prvCopyDataToQueue+0x20>
     480:	00001309 	.word	0x00001309
     484:	0000229d 	.word	0x0000229d

00000488 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
     488:	b570      	push	{r4, r5, r6, lr}
     48a:	b082      	sub	sp, #8
     48c:	9001      	str	r0, [sp, #4]
     48e:	000a      	movs	r2, r1
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
     490:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
     492:	2c00      	cmp	r4, #0
     494:	d005      	beq.n	4a2 <prvNotifyQueueSetContainer+0x1a>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
     496:	6ba1      	ldr	r1, [r4, #56]	; 0x38
     498:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     49a:	4299      	cmp	r1, r3
     49c:	d303      	bcc.n	4a6 <prvNotifyQueueSetContainer+0x1e>
     49e:	b672      	cpsid	i
     4a0:	e7fe      	b.n	4a0 <prvNotifyQueueSetContainer+0x18>
		configASSERT( pxQueueSetContainer );
     4a2:	b672      	cpsid	i
     4a4:	e7fe      	b.n	4a4 <prvNotifyQueueSetContainer+0x1c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
     4a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
	BaseType_t xReturn = pdFALSE;
     4a8:	2600      	movs	r6, #0
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
     4aa:	428b      	cmp	r3, r1
     4ac:	d802      	bhi.n	4b4 <prvNotifyQueueSetContainer+0x2c>
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
     4ae:	0030      	movs	r0, r6
     4b0:	b002      	add	sp, #8
     4b2:	bd70      	pop	{r4, r5, r6, pc}
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
     4b4:	2345      	movs	r3, #69	; 0x45
     4b6:	5ce5      	ldrb	r5, [r4, r3]
     4b8:	b26d      	sxtb	r5, r5
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
     4ba:	a901      	add	r1, sp, #4
     4bc:	0020      	movs	r0, r4
     4be:	4b0a      	ldr	r3, [pc, #40]	; (4e8 <prvNotifyQueueSetContainer+0x60>)
     4c0:	4798      	blx	r3
     4c2:	0006      	movs	r6, r0
			if( cTxLock == queueUNLOCKED )
     4c4:	1c6b      	adds	r3, r5, #1
     4c6:	d10a      	bne.n	4de <prvNotifyQueueSetContainer+0x56>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
     4c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
     4ca:	2b00      	cmp	r3, #0
     4cc:	d0ef      	beq.n	4ae <prvNotifyQueueSetContainer+0x26>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
     4ce:	0020      	movs	r0, r4
     4d0:	3024      	adds	r0, #36	; 0x24
     4d2:	4b06      	ldr	r3, [pc, #24]	; (4ec <prvNotifyQueueSetContainer+0x64>)
     4d4:	4798      	blx	r3
     4d6:	2800      	cmp	r0, #0
     4d8:	d0e9      	beq.n	4ae <prvNotifyQueueSetContainer+0x26>
						xReturn = pdTRUE;
     4da:	2601      	movs	r6, #1
     4dc:	e7e7      	b.n	4ae <prvNotifyQueueSetContainer+0x26>
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
     4de:	3501      	adds	r5, #1
     4e0:	b26d      	sxtb	r5, r5
     4e2:	2345      	movs	r3, #69	; 0x45
     4e4:	54e5      	strb	r5, [r4, r3]
     4e6:	e7e2      	b.n	4ae <prvNotifyQueueSetContainer+0x26>
     4e8:	0000040d 	.word	0x0000040d
     4ec:	000011cd 	.word	0x000011cd

000004f0 <prvCopyDataFromQueue>:
{
     4f0:	b510      	push	{r4, lr}
     4f2:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
     4f4:	6c02      	ldr	r2, [r0, #64]	; 0x40
     4f6:	2a00      	cmp	r2, #0
     4f8:	d00b      	beq.n	512 <prvCopyDataFromQueue+0x22>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
     4fa:	68c3      	ldr	r3, [r0, #12]
     4fc:	189b      	adds	r3, r3, r2
     4fe:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
     500:	6841      	ldr	r1, [r0, #4]
     502:	428b      	cmp	r3, r1
     504:	d301      	bcc.n	50a <prvCopyDataFromQueue+0x1a>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
     506:	6803      	ldr	r3, [r0, #0]
     508:	60c3      	str	r3, [r0, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
     50a:	68c1      	ldr	r1, [r0, #12]
     50c:	0020      	movs	r0, r4
     50e:	4b01      	ldr	r3, [pc, #4]	; (514 <prvCopyDataFromQueue+0x24>)
     510:	4798      	blx	r3
}
     512:	bd10      	pop	{r4, pc}
     514:	0000229d 	.word	0x0000229d

00000518 <prvUnlockQueue>:
{
     518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     51a:	0007      	movs	r7, r0
	taskENTER_CRITICAL();
     51c:	4b25      	ldr	r3, [pc, #148]	; (5b4 <prvUnlockQueue+0x9c>)
     51e:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
     520:	2345      	movs	r3, #69	; 0x45
     522:	5cfc      	ldrb	r4, [r7, r3]
     524:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
     526:	2c00      	cmp	r4, #0
     528:	dd1c      	ble.n	564 <prvUnlockQueue+0x4c>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
     52a:	4e23      	ldr	r6, [pc, #140]	; (5b8 <prvUnlockQueue+0xa0>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     52c:	4d23      	ldr	r5, [pc, #140]	; (5bc <prvUnlockQueue+0xa4>)
     52e:	e00b      	b.n	548 <prvUnlockQueue+0x30>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     532:	2b00      	cmp	r3, #0
     534:	d016      	beq.n	564 <prvUnlockQueue+0x4c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     536:	0038      	movs	r0, r7
     538:	3024      	adds	r0, #36	; 0x24
     53a:	47a8      	blx	r5
     53c:	2800      	cmp	r0, #0
     53e:	d10e      	bne.n	55e <prvUnlockQueue+0x46>
     540:	3c01      	subs	r4, #1
     542:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
     544:	2c00      	cmp	r4, #0
     546:	d00d      	beq.n	564 <prvUnlockQueue+0x4c>
				if( pxQueue->pxQueueSetContainer != NULL )
     548:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     54a:	2b00      	cmp	r3, #0
     54c:	d0f0      	beq.n	530 <prvUnlockQueue+0x18>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
     54e:	2100      	movs	r1, #0
     550:	0038      	movs	r0, r7
     552:	47b0      	blx	r6
     554:	2800      	cmp	r0, #0
     556:	d0f3      	beq.n	540 <prvUnlockQueue+0x28>
						vTaskMissedYield();
     558:	4b19      	ldr	r3, [pc, #100]	; (5c0 <prvUnlockQueue+0xa8>)
     55a:	4798      	blx	r3
     55c:	e7f0      	b.n	540 <prvUnlockQueue+0x28>
							vTaskMissedYield();
     55e:	4b18      	ldr	r3, [pc, #96]	; (5c0 <prvUnlockQueue+0xa8>)
     560:	4798      	blx	r3
     562:	e7ed      	b.n	540 <prvUnlockQueue+0x28>
		pxQueue->cTxLock = queueUNLOCKED;
     564:	22ff      	movs	r2, #255	; 0xff
     566:	2345      	movs	r3, #69	; 0x45
     568:	54fa      	strb	r2, [r7, r3]
	taskEXIT_CRITICAL();
     56a:	4b16      	ldr	r3, [pc, #88]	; (5c4 <prvUnlockQueue+0xac>)
     56c:	4798      	blx	r3
	taskENTER_CRITICAL();
     56e:	4b11      	ldr	r3, [pc, #68]	; (5b4 <prvUnlockQueue+0x9c>)
     570:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
     572:	2344      	movs	r3, #68	; 0x44
     574:	5cfc      	ldrb	r4, [r7, r3]
     576:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
     578:	2c00      	cmp	r4, #0
     57a:	dd14      	ble.n	5a6 <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     57c:	693b      	ldr	r3, [r7, #16]
     57e:	2b00      	cmp	r3, #0
     580:	d011      	beq.n	5a6 <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     582:	003d      	movs	r5, r7
     584:	3510      	adds	r5, #16
     586:	4e0d      	ldr	r6, [pc, #52]	; (5bc <prvUnlockQueue+0xa4>)
     588:	e006      	b.n	598 <prvUnlockQueue+0x80>
     58a:	3c01      	subs	r4, #1
     58c:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
     58e:	2c00      	cmp	r4, #0
     590:	d009      	beq.n	5a6 <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     592:	693b      	ldr	r3, [r7, #16]
     594:	2b00      	cmp	r3, #0
     596:	d006      	beq.n	5a6 <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     598:	0028      	movs	r0, r5
     59a:	47b0      	blx	r6
     59c:	2800      	cmp	r0, #0
     59e:	d0f4      	beq.n	58a <prvUnlockQueue+0x72>
					vTaskMissedYield();
     5a0:	4b07      	ldr	r3, [pc, #28]	; (5c0 <prvUnlockQueue+0xa8>)
     5a2:	4798      	blx	r3
     5a4:	e7f1      	b.n	58a <prvUnlockQueue+0x72>
		pxQueue->cRxLock = queueUNLOCKED;
     5a6:	22ff      	movs	r2, #255	; 0xff
     5a8:	2344      	movs	r3, #68	; 0x44
     5aa:	54fa      	strb	r2, [r7, r3]
	taskEXIT_CRITICAL();
     5ac:	4b05      	ldr	r3, [pc, #20]	; (5c4 <prvUnlockQueue+0xac>)
     5ae:	4798      	blx	r3
}
     5b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     5b2:	46c0      	nop			; (mov r8, r8)
     5b4:	00000229 	.word	0x00000229
     5b8:	00000489 	.word	0x00000489
     5bc:	000011cd 	.word	0x000011cd
     5c0:	000012dd 	.word	0x000012dd
     5c4:	00000241 	.word	0x00000241

000005c8 <xQueueGenericReset>:
{
     5c8:	b570      	push	{r4, r5, r6, lr}
     5ca:	0004      	movs	r4, r0
     5cc:	000d      	movs	r5, r1
	configASSERT( pxQueue );
     5ce:	2800      	cmp	r0, #0
     5d0:	d021      	beq.n	616 <xQueueGenericReset+0x4e>
	taskENTER_CRITICAL();
     5d2:	4b17      	ldr	r3, [pc, #92]	; (630 <xQueueGenericReset+0x68>)
     5d4:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
     5d6:	6822      	ldr	r2, [r4, #0]
     5d8:	6c21      	ldr	r1, [r4, #64]	; 0x40
     5da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     5dc:	434b      	muls	r3, r1
     5de:	18d0      	adds	r0, r2, r3
     5e0:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
     5e2:	2000      	movs	r0, #0
     5e4:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
     5e6:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
     5e8:	1a5b      	subs	r3, r3, r1
     5ea:	18d3      	adds	r3, r2, r3
     5ec:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
     5ee:	23ff      	movs	r3, #255	; 0xff
     5f0:	2244      	movs	r2, #68	; 0x44
     5f2:	54a3      	strb	r3, [r4, r2]
		pxQueue->cTxLock = queueUNLOCKED;
     5f4:	3201      	adds	r2, #1
     5f6:	54a3      	strb	r3, [r4, r2]
		if( xNewQueue == pdFALSE )
     5f8:	2d00      	cmp	r5, #0
     5fa:	d111      	bne.n	620 <xQueueGenericReset+0x58>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     5fc:	6923      	ldr	r3, [r4, #16]
     5fe:	2b00      	cmp	r3, #0
     600:	d005      	beq.n	60e <xQueueGenericReset+0x46>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     602:	0020      	movs	r0, r4
     604:	3010      	adds	r0, #16
     606:	4b0b      	ldr	r3, [pc, #44]	; (634 <xQueueGenericReset+0x6c>)
     608:	4798      	blx	r3
     60a:	2800      	cmp	r0, #0
     60c:	d105      	bne.n	61a <xQueueGenericReset+0x52>
	taskEXIT_CRITICAL();
     60e:	4b0a      	ldr	r3, [pc, #40]	; (638 <xQueueGenericReset+0x70>)
     610:	4798      	blx	r3
}
     612:	2001      	movs	r0, #1
     614:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
     616:	b672      	cpsid	i
     618:	e7fe      	b.n	618 <xQueueGenericReset+0x50>
					queueYIELD_IF_USING_PREEMPTION();
     61a:	4b08      	ldr	r3, [pc, #32]	; (63c <xQueueGenericReset+0x74>)
     61c:	4798      	blx	r3
     61e:	e7f6      	b.n	60e <xQueueGenericReset+0x46>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
     620:	0020      	movs	r0, r4
     622:	3010      	adds	r0, #16
     624:	4d06      	ldr	r5, [pc, #24]	; (640 <xQueueGenericReset+0x78>)
     626:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
     628:	0020      	movs	r0, r4
     62a:	3024      	adds	r0, #36	; 0x24
     62c:	47a8      	blx	r5
     62e:	e7ee      	b.n	60e <xQueueGenericReset+0x46>
     630:	00000229 	.word	0x00000229
     634:	000011cd 	.word	0x000011cd
     638:	00000241 	.word	0x00000241
     63c:	00000211 	.word	0x00000211
     640:	00000367 	.word	0x00000367

00000644 <xQueueGenericCreate>:
	{
     644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     646:	0006      	movs	r6, r0
     648:	000d      	movs	r5, r1
     64a:	0017      	movs	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
     64c:	2800      	cmp	r0, #0
     64e:	d101      	bne.n	654 <xQueueGenericCreate+0x10>
     650:	b672      	cpsid	i
     652:	e7fe      	b.n	652 <xQueueGenericCreate+0xe>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     654:	0008      	movs	r0, r1
     656:	4370      	muls	r0, r6
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
     658:	3054      	adds	r0, #84	; 0x54
     65a:	4b0b      	ldr	r3, [pc, #44]	; (688 <xQueueGenericCreate+0x44>)
     65c:	4798      	blx	r3
     65e:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
     660:	d010      	beq.n	684 <xQueueGenericCreate+0x40>
	if( uxItemSize == ( UBaseType_t ) 0 )
     662:	2d00      	cmp	r5, #0
     664:	d003      	beq.n	66e <xQueueGenericCreate+0x2a>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
     666:	0003      	movs	r3, r0
     668:	3354      	adds	r3, #84	; 0x54
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
     66a:	6003      	str	r3, [r0, #0]
     66c:	e000      	b.n	670 <xQueueGenericCreate+0x2c>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
     66e:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
     670:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
     672:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
     674:	2101      	movs	r1, #1
     676:	0020      	movs	r0, r4
     678:	4b04      	ldr	r3, [pc, #16]	; (68c <xQueueGenericCreate+0x48>)
     67a:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
     67c:	2350      	movs	r3, #80	; 0x50
     67e:	54e7      	strb	r7, [r4, r3]
		pxNewQueue->pxQueueSetContainer = NULL;
     680:	2300      	movs	r3, #0
     682:	64a3      	str	r3, [r4, #72]	; 0x48
	}
     684:	0020      	movs	r0, r4
     686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     688:	000002e5 	.word	0x000002e5
     68c:	000005c9 	.word	0x000005c9

00000690 <xQueueGenericSend>:
{
     690:	b5f0      	push	{r4, r5, r6, r7, lr}
     692:	46ce      	mov	lr, r9
     694:	4647      	mov	r7, r8
     696:	b580      	push	{r7, lr}
     698:	b085      	sub	sp, #20
     69a:	0004      	movs	r4, r0
     69c:	000f      	movs	r7, r1
     69e:	9201      	str	r2, [sp, #4]
     6a0:	001d      	movs	r5, r3
	configASSERT( pxQueue );
     6a2:	2800      	cmp	r0, #0
     6a4:	d00c      	beq.n	6c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
     6a6:	2900      	cmp	r1, #0
     6a8:	d00c      	beq.n	6c4 <xQueueGenericSend+0x34>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
     6aa:	2d02      	cmp	r5, #2
     6ac:	d00f      	beq.n	6ce <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
     6ae:	4b4e      	ldr	r3, [pc, #312]	; (7e8 <xQueueGenericSend+0x158>)
     6b0:	4798      	blx	r3
     6b2:	2800      	cmp	r0, #0
     6b4:	d110      	bne.n	6d8 <xQueueGenericSend+0x48>
     6b6:	9b01      	ldr	r3, [sp, #4]
     6b8:	2b00      	cmp	r3, #0
     6ba:	d011      	beq.n	6e0 <xQueueGenericSend+0x50>
     6bc:	b672      	cpsid	i
     6be:	e7fe      	b.n	6be <xQueueGenericSend+0x2e>
	configASSERT( pxQueue );
     6c0:	b672      	cpsid	i
     6c2:	e7fe      	b.n	6c2 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
     6c4:	6c03      	ldr	r3, [r0, #64]	; 0x40
     6c6:	2b00      	cmp	r3, #0
     6c8:	d0ef      	beq.n	6aa <xQueueGenericSend+0x1a>
     6ca:	b672      	cpsid	i
     6cc:	e7fe      	b.n	6cc <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
     6ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     6d0:	2b01      	cmp	r3, #1
     6d2:	d0ec      	beq.n	6ae <xQueueGenericSend+0x1e>
     6d4:	b672      	cpsid	i
     6d6:	e7fe      	b.n	6d6 <xQueueGenericSend+0x46>
     6d8:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
     6da:	4b44      	ldr	r3, [pc, #272]	; (7ec <xQueueGenericSend+0x15c>)
     6dc:	4698      	mov	r8, r3
     6de:	e04c      	b.n	77a <xQueueGenericSend+0xea>
     6e0:	2600      	movs	r6, #0
     6e2:	e7fa      	b.n	6da <xQueueGenericSend+0x4a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     6e4:	002a      	movs	r2, r5
     6e6:	0039      	movs	r1, r7
     6e8:	0020      	movs	r0, r4
     6ea:	4b41      	ldr	r3, [pc, #260]	; (7f0 <xQueueGenericSend+0x160>)
     6ec:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
     6ee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     6f0:	2b00      	cmp	r3, #0
     6f2:	d00f      	beq.n	714 <xQueueGenericSend+0x84>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
     6f4:	0029      	movs	r1, r5
     6f6:	0020      	movs	r0, r4
     6f8:	4b3e      	ldr	r3, [pc, #248]	; (7f4 <xQueueGenericSend+0x164>)
     6fa:	4798      	blx	r3
     6fc:	2800      	cmp	r0, #0
     6fe:	d001      	beq.n	704 <xQueueGenericSend+0x74>
							queueYIELD_IF_USING_PREEMPTION();
     700:	4b3d      	ldr	r3, [pc, #244]	; (7f8 <xQueueGenericSend+0x168>)
     702:	4798      	blx	r3
				taskEXIT_CRITICAL();
     704:	4b3d      	ldr	r3, [pc, #244]	; (7fc <xQueueGenericSend+0x16c>)
     706:	4798      	blx	r3
				return pdPASS;
     708:	2001      	movs	r0, #1
}
     70a:	b005      	add	sp, #20
     70c:	bc0c      	pop	{r2, r3}
     70e:	4690      	mov	r8, r2
     710:	4699      	mov	r9, r3
     712:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     714:	6a63      	ldr	r3, [r4, #36]	; 0x24
     716:	2b00      	cmp	r3, #0
     718:	d008      	beq.n	72c <xQueueGenericSend+0x9c>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     71a:	0020      	movs	r0, r4
     71c:	3024      	adds	r0, #36	; 0x24
     71e:	4b38      	ldr	r3, [pc, #224]	; (800 <xQueueGenericSend+0x170>)
     720:	4798      	blx	r3
     722:	2800      	cmp	r0, #0
     724:	d0ee      	beq.n	704 <xQueueGenericSend+0x74>
								queueYIELD_IF_USING_PREEMPTION();
     726:	4b34      	ldr	r3, [pc, #208]	; (7f8 <xQueueGenericSend+0x168>)
     728:	4798      	blx	r3
     72a:	e7eb      	b.n	704 <xQueueGenericSend+0x74>
						else if( xYieldRequired != pdFALSE )
     72c:	2800      	cmp	r0, #0
     72e:	d0e9      	beq.n	704 <xQueueGenericSend+0x74>
							queueYIELD_IF_USING_PREEMPTION();
     730:	4b31      	ldr	r3, [pc, #196]	; (7f8 <xQueueGenericSend+0x168>)
     732:	4798      	blx	r3
     734:	e7e6      	b.n	704 <xQueueGenericSend+0x74>
					taskEXIT_CRITICAL();
     736:	4b31      	ldr	r3, [pc, #196]	; (7fc <xQueueGenericSend+0x16c>)
     738:	4798      	blx	r3
					return errQUEUE_FULL;
     73a:	2000      	movs	r0, #0
     73c:	e7e5      	b.n	70a <xQueueGenericSend+0x7a>
		prvLockQueue( pxQueue );
     73e:	4b2f      	ldr	r3, [pc, #188]	; (7fc <xQueueGenericSend+0x16c>)
     740:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     742:	a901      	add	r1, sp, #4
     744:	a802      	add	r0, sp, #8
     746:	4b2f      	ldr	r3, [pc, #188]	; (804 <xQueueGenericSend+0x174>)
     748:	4798      	blx	r3
     74a:	2800      	cmp	r0, #0
     74c:	d144      	bne.n	7d8 <xQueueGenericSend+0x148>
	taskENTER_CRITICAL();
     74e:	4b27      	ldr	r3, [pc, #156]	; (7ec <xQueueGenericSend+0x15c>)
     750:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
     752:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     754:	4699      	mov	r9, r3
     756:	6be6      	ldr	r6, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
     758:	4b28      	ldr	r3, [pc, #160]	; (7fc <xQueueGenericSend+0x16c>)
     75a:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
     75c:	45b1      	cmp	r9, r6
     75e:	d135      	bne.n	7cc <xQueueGenericSend+0x13c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
     760:	0020      	movs	r0, r4
     762:	3010      	adds	r0, #16
     764:	9901      	ldr	r1, [sp, #4]
     766:	4b28      	ldr	r3, [pc, #160]	; (808 <xQueueGenericSend+0x178>)
     768:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
     76a:	0020      	movs	r0, r4
     76c:	4b27      	ldr	r3, [pc, #156]	; (80c <xQueueGenericSend+0x17c>)
     76e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
     770:	4b27      	ldr	r3, [pc, #156]	; (810 <xQueueGenericSend+0x180>)
     772:	4798      	blx	r3
     774:	2800      	cmp	r0, #0
     776:	d026      	beq.n	7c6 <xQueueGenericSend+0x136>
     778:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
     77a:	47c0      	blx	r8
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
     77c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     77e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
     780:	4293      	cmp	r3, r2
     782:	d3af      	bcc.n	6e4 <xQueueGenericSend+0x54>
     784:	2d02      	cmp	r5, #2
     786:	d0ad      	beq.n	6e4 <xQueueGenericSend+0x54>
				if( xTicksToWait == ( TickType_t ) 0 )
     788:	9b01      	ldr	r3, [sp, #4]
     78a:	2b00      	cmp	r3, #0
     78c:	d0d3      	beq.n	736 <xQueueGenericSend+0xa6>
				else if( xEntryTimeSet == pdFALSE )
     78e:	2e00      	cmp	r6, #0
     790:	d102      	bne.n	798 <xQueueGenericSend+0x108>
					vTaskInternalSetTimeOutState( &xTimeOut );
     792:	a802      	add	r0, sp, #8
     794:	4b1f      	ldr	r3, [pc, #124]	; (814 <xQueueGenericSend+0x184>)
     796:	4798      	blx	r3
		taskEXIT_CRITICAL();
     798:	4b18      	ldr	r3, [pc, #96]	; (7fc <xQueueGenericSend+0x16c>)
     79a:	4798      	blx	r3
		vTaskSuspendAll();
     79c:	4b1e      	ldr	r3, [pc, #120]	; (818 <xQueueGenericSend+0x188>)
     79e:	4798      	blx	r3
		prvLockQueue( pxQueue );
     7a0:	4b12      	ldr	r3, [pc, #72]	; (7ec <xQueueGenericSend+0x15c>)
     7a2:	4798      	blx	r3
     7a4:	2344      	movs	r3, #68	; 0x44
     7a6:	5ce3      	ldrb	r3, [r4, r3]
     7a8:	b25b      	sxtb	r3, r3
     7aa:	3301      	adds	r3, #1
     7ac:	d102      	bne.n	7b4 <xQueueGenericSend+0x124>
     7ae:	2200      	movs	r2, #0
     7b0:	2344      	movs	r3, #68	; 0x44
     7b2:	54e2      	strb	r2, [r4, r3]
     7b4:	2345      	movs	r3, #69	; 0x45
     7b6:	5ce3      	ldrb	r3, [r4, r3]
     7b8:	b25b      	sxtb	r3, r3
     7ba:	3301      	adds	r3, #1
     7bc:	d1bf      	bne.n	73e <xQueueGenericSend+0xae>
     7be:	2200      	movs	r2, #0
     7c0:	2345      	movs	r3, #69	; 0x45
     7c2:	54e2      	strb	r2, [r4, r3]
     7c4:	e7bb      	b.n	73e <xQueueGenericSend+0xae>
					portYIELD_WITHIN_API();
     7c6:	4b0c      	ldr	r3, [pc, #48]	; (7f8 <xQueueGenericSend+0x168>)
     7c8:	4798      	blx	r3
     7ca:	e7d5      	b.n	778 <xQueueGenericSend+0xe8>
				prvUnlockQueue( pxQueue );
     7cc:	0020      	movs	r0, r4
     7ce:	4b0f      	ldr	r3, [pc, #60]	; (80c <xQueueGenericSend+0x17c>)
     7d0:	4798      	blx	r3
				( void ) xTaskResumeAll();
     7d2:	4b0f      	ldr	r3, [pc, #60]	; (810 <xQueueGenericSend+0x180>)
     7d4:	4798      	blx	r3
     7d6:	e7cf      	b.n	778 <xQueueGenericSend+0xe8>
			prvUnlockQueue( pxQueue );
     7d8:	0020      	movs	r0, r4
     7da:	4b0c      	ldr	r3, [pc, #48]	; (80c <xQueueGenericSend+0x17c>)
     7dc:	4798      	blx	r3
			( void ) xTaskResumeAll();
     7de:	4b0c      	ldr	r3, [pc, #48]	; (810 <xQueueGenericSend+0x180>)
     7e0:	4798      	blx	r3
			return errQUEUE_FULL;
     7e2:	2000      	movs	r0, #0
     7e4:	e791      	b.n	70a <xQueueGenericSend+0x7a>
     7e6:	46c0      	nop			; (mov r8, r8)
     7e8:	000012e9 	.word	0x000012e9
     7ec:	00000229 	.word	0x00000229
     7f0:	0000040d 	.word	0x0000040d
     7f4:	00000489 	.word	0x00000489
     7f8:	00000211 	.word	0x00000211
     7fc:	00000241 	.word	0x00000241
     800:	000011cd 	.word	0x000011cd
     804:	0000126d 	.word	0x0000126d
     808:	00001169 	.word	0x00001169
     80c:	00000519 	.word	0x00000519
     810:	00000f6d 	.word	0x00000f6d
     814:	00001255 	.word	0x00001255
     818:	00000e31 	.word	0x00000e31

0000081c <xQueueGenericSendFromISR>:
{
     81c:	b5f0      	push	{r4, r5, r6, r7, lr}
     81e:	b083      	sub	sp, #12
     820:	0004      	movs	r4, r0
     822:	9101      	str	r1, [sp, #4]
     824:	0016      	movs	r6, r2
     826:	001d      	movs	r5, r3
	configASSERT( pxQueue );
     828:	2800      	cmp	r0, #0
     82a:	d012      	beq.n	852 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
     82c:	9b01      	ldr	r3, [sp, #4]
     82e:	2b00      	cmp	r3, #0
     830:	d011      	beq.n	856 <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
     832:	2d02      	cmp	r5, #2
     834:	d014      	beq.n	860 <xQueueGenericSendFromISR+0x44>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
     836:	4b28      	ldr	r3, [pc, #160]	; (8d8 <xQueueGenericSendFromISR+0xbc>)
     838:	4798      	blx	r3
     83a:	9000      	str	r0, [sp, #0]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
     83c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     83e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
     840:	429a      	cmp	r2, r3
     842:	d82f      	bhi.n	8a4 <xQueueGenericSendFromISR+0x88>
			xReturn = errQUEUE_FULL;
     844:	2500      	movs	r5, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
     846:	9800      	ldr	r0, [sp, #0]
     848:	4b24      	ldr	r3, [pc, #144]	; (8dc <xQueueGenericSendFromISR+0xc0>)
     84a:	4798      	blx	r3
}
     84c:	0028      	movs	r0, r5
     84e:	b003      	add	sp, #12
     850:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pxQueue );
     852:	b672      	cpsid	i
     854:	e7fe      	b.n	854 <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
     856:	6c03      	ldr	r3, [r0, #64]	; 0x40
     858:	2b00      	cmp	r3, #0
     85a:	d0ea      	beq.n	832 <xQueueGenericSendFromISR+0x16>
     85c:	b672      	cpsid	i
     85e:	e7fe      	b.n	85e <xQueueGenericSendFromISR+0x42>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
     860:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     862:	2b01      	cmp	r3, #1
     864:	d01a      	beq.n	89c <xQueueGenericSendFromISR+0x80>
     866:	b672      	cpsid	i
     868:	e7fe      	b.n	868 <xQueueGenericSendFromISR+0x4c>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     86a:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
     86c:	2501      	movs	r5, #1
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     86e:	2b00      	cmp	r3, #0
     870:	d0e9      	beq.n	846 <xQueueGenericSendFromISR+0x2a>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     872:	0020      	movs	r0, r4
     874:	3024      	adds	r0, #36	; 0x24
     876:	4b1a      	ldr	r3, [pc, #104]	; (8e0 <xQueueGenericSendFromISR+0xc4>)
     878:	4798      	blx	r3
     87a:	2800      	cmp	r0, #0
     87c:	d0e3      	beq.n	846 <xQueueGenericSendFromISR+0x2a>
								if( pxHigherPriorityTaskWoken != NULL )
     87e:	2e00      	cmp	r6, #0
     880:	d00a      	beq.n	898 <xQueueGenericSendFromISR+0x7c>
									*pxHigherPriorityTaskWoken = pdTRUE;
     882:	2301      	movs	r3, #1
     884:	6033      	str	r3, [r6, #0]
     886:	e7de      	b.n	846 <xQueueGenericSendFromISR+0x2a>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
     888:	1c7b      	adds	r3, r7, #1
     88a:	b25b      	sxtb	r3, r3
     88c:	2245      	movs	r2, #69	; 0x45
     88e:	54a3      	strb	r3, [r4, r2]
			xReturn = pdPASS;
     890:	2501      	movs	r5, #1
     892:	e7d8      	b.n	846 <xQueueGenericSendFromISR+0x2a>
     894:	2501      	movs	r5, #1
     896:	e7d6      	b.n	846 <xQueueGenericSendFromISR+0x2a>
     898:	2501      	movs	r5, #1
     89a:	e7d4      	b.n	846 <xQueueGenericSendFromISR+0x2a>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
     89c:	4b0e      	ldr	r3, [pc, #56]	; (8d8 <xQueueGenericSendFromISR+0xbc>)
     89e:	4798      	blx	r3
     8a0:	9000      	str	r0, [sp, #0]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
     8a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
     8a4:	2345      	movs	r3, #69	; 0x45
     8a6:	5ce7      	ldrb	r7, [r4, r3]
     8a8:	b27f      	sxtb	r7, r7
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     8aa:	002a      	movs	r2, r5
     8ac:	9901      	ldr	r1, [sp, #4]
     8ae:	0020      	movs	r0, r4
     8b0:	4b0c      	ldr	r3, [pc, #48]	; (8e4 <xQueueGenericSendFromISR+0xc8>)
     8b2:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
     8b4:	1c7b      	adds	r3, r7, #1
     8b6:	d1e7      	bne.n	888 <xQueueGenericSendFromISR+0x6c>
					if( pxQueue->pxQueueSetContainer != NULL )
     8b8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     8ba:	2b00      	cmp	r3, #0
     8bc:	d0d5      	beq.n	86a <xQueueGenericSendFromISR+0x4e>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
     8be:	0029      	movs	r1, r5
     8c0:	0020      	movs	r0, r4
     8c2:	4b09      	ldr	r3, [pc, #36]	; (8e8 <xQueueGenericSendFromISR+0xcc>)
     8c4:	4798      	blx	r3
			xReturn = pdPASS;
     8c6:	2501      	movs	r5, #1
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
     8c8:	2800      	cmp	r0, #0
     8ca:	d0bc      	beq.n	846 <xQueueGenericSendFromISR+0x2a>
							if( pxHigherPriorityTaskWoken != NULL )
     8cc:	2e00      	cmp	r6, #0
     8ce:	d0e1      	beq.n	894 <xQueueGenericSendFromISR+0x78>
								*pxHigherPriorityTaskWoken = pdTRUE;
     8d0:	2301      	movs	r3, #1
     8d2:	6033      	str	r3, [r6, #0]
     8d4:	e7b7      	b.n	846 <xQueueGenericSendFromISR+0x2a>
     8d6:	46c0      	nop			; (mov r8, r8)
     8d8:	00000261 	.word	0x00000261
     8dc:	00000269 	.word	0x00000269
     8e0:	000011cd 	.word	0x000011cd
     8e4:	0000040d 	.word	0x0000040d
     8e8:	00000489 	.word	0x00000489

000008ec <xQueueReceive>:
{
     8ec:	b5f0      	push	{r4, r5, r6, r7, lr}
     8ee:	46c6      	mov	lr, r8
     8f0:	b500      	push	{lr}
     8f2:	b084      	sub	sp, #16
     8f4:	0004      	movs	r4, r0
     8f6:	000f      	movs	r7, r1
     8f8:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
     8fa:	2800      	cmp	r0, #0
     8fc:	d00a      	beq.n	914 <xQueueReceive+0x28>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
     8fe:	2900      	cmp	r1, #0
     900:	d00a      	beq.n	918 <xQueueReceive+0x2c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
     902:	4b42      	ldr	r3, [pc, #264]	; (a0c <xQueueReceive+0x120>)
     904:	4798      	blx	r3
     906:	2800      	cmp	r0, #0
     908:	d10b      	bne.n	922 <xQueueReceive+0x36>
     90a:	9b01      	ldr	r3, [sp, #4]
     90c:	2b00      	cmp	r3, #0
     90e:	d00c      	beq.n	92a <xQueueReceive+0x3e>
     910:	b672      	cpsid	i
     912:	e7fe      	b.n	912 <xQueueReceive+0x26>
	configASSERT( ( pxQueue ) );
     914:	b672      	cpsid	i
     916:	e7fe      	b.n	916 <xQueueReceive+0x2a>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
     918:	6c03      	ldr	r3, [r0, #64]	; 0x40
     91a:	2b00      	cmp	r3, #0
     91c:	d0f1      	beq.n	902 <xQueueReceive+0x16>
     91e:	b672      	cpsid	i
     920:	e7fe      	b.n	920 <xQueueReceive+0x34>
     922:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
     924:	4b3a      	ldr	r3, [pc, #232]	; (a10 <xQueueReceive+0x124>)
     926:	4698      	mov	r8, r3
     928:	e02f      	b.n	98a <xQueueReceive+0x9e>
     92a:	2600      	movs	r6, #0
     92c:	e7fa      	b.n	924 <xQueueReceive+0x38>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
     92e:	0039      	movs	r1, r7
     930:	0020      	movs	r0, r4
     932:	4b38      	ldr	r3, [pc, #224]	; (a14 <xQueueReceive+0x128>)
     934:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
     936:	3d01      	subs	r5, #1
     938:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     93a:	6923      	ldr	r3, [r4, #16]
     93c:	2b00      	cmp	r3, #0
     93e:	d007      	beq.n	950 <xQueueReceive+0x64>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     940:	0020      	movs	r0, r4
     942:	3010      	adds	r0, #16
     944:	4b34      	ldr	r3, [pc, #208]	; (a18 <xQueueReceive+0x12c>)
     946:	4798      	blx	r3
     948:	2800      	cmp	r0, #0
     94a:	d001      	beq.n	950 <xQueueReceive+0x64>
						queueYIELD_IF_USING_PREEMPTION();
     94c:	4b33      	ldr	r3, [pc, #204]	; (a1c <xQueueReceive+0x130>)
     94e:	4798      	blx	r3
				taskEXIT_CRITICAL();
     950:	4b33      	ldr	r3, [pc, #204]	; (a20 <xQueueReceive+0x134>)
     952:	4798      	blx	r3
				return pdPASS;
     954:	2001      	movs	r0, #1
}
     956:	b004      	add	sp, #16
     958:	bc04      	pop	{r2}
     95a:	4690      	mov	r8, r2
     95c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
     95e:	4b30      	ldr	r3, [pc, #192]	; (a20 <xQueueReceive+0x134>)
     960:	4798      	blx	r3
					return errQUEUE_EMPTY;
     962:	2000      	movs	r0, #0
     964:	e7f7      	b.n	956 <xQueueReceive+0x6a>
					vTaskInternalSetTimeOutState( &xTimeOut );
     966:	a802      	add	r0, sp, #8
     968:	4b2e      	ldr	r3, [pc, #184]	; (a24 <xQueueReceive+0x138>)
     96a:	4798      	blx	r3
     96c:	e016      	b.n	99c <xQueueReceive+0xb0>
		prvLockQueue( pxQueue );
     96e:	2200      	movs	r2, #0
     970:	2344      	movs	r3, #68	; 0x44
     972:	54e2      	strb	r2, [r4, r3]
     974:	e01d      	b.n	9b2 <xQueueReceive+0xc6>
     976:	2200      	movs	r2, #0
     978:	2345      	movs	r3, #69	; 0x45
     97a:	54e2      	strb	r2, [r4, r3]
     97c:	e01e      	b.n	9bc <xQueueReceive+0xd0>
				prvUnlockQueue( pxQueue );
     97e:	0020      	movs	r0, r4
     980:	4b29      	ldr	r3, [pc, #164]	; (a28 <xQueueReceive+0x13c>)
     982:	4798      	blx	r3
				( void ) xTaskResumeAll();
     984:	4b29      	ldr	r3, [pc, #164]	; (a2c <xQueueReceive+0x140>)
     986:	4798      	blx	r3
     988:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
     98a:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
     98c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
     98e:	2d00      	cmp	r5, #0
     990:	d1cd      	bne.n	92e <xQueueReceive+0x42>
				if( xTicksToWait == ( TickType_t ) 0 )
     992:	9b01      	ldr	r3, [sp, #4]
     994:	2b00      	cmp	r3, #0
     996:	d0e2      	beq.n	95e <xQueueReceive+0x72>
				else if( xEntryTimeSet == pdFALSE )
     998:	2e00      	cmp	r6, #0
     99a:	d0e4      	beq.n	966 <xQueueReceive+0x7a>
		taskEXIT_CRITICAL();
     99c:	4b20      	ldr	r3, [pc, #128]	; (a20 <xQueueReceive+0x134>)
     99e:	4798      	blx	r3
		vTaskSuspendAll();
     9a0:	4b23      	ldr	r3, [pc, #140]	; (a30 <xQueueReceive+0x144>)
     9a2:	4798      	blx	r3
		prvLockQueue( pxQueue );
     9a4:	4b1a      	ldr	r3, [pc, #104]	; (a10 <xQueueReceive+0x124>)
     9a6:	4798      	blx	r3
     9a8:	2344      	movs	r3, #68	; 0x44
     9aa:	5ce3      	ldrb	r3, [r4, r3]
     9ac:	b25b      	sxtb	r3, r3
     9ae:	3301      	adds	r3, #1
     9b0:	d0dd      	beq.n	96e <xQueueReceive+0x82>
     9b2:	2345      	movs	r3, #69	; 0x45
     9b4:	5ce3      	ldrb	r3, [r4, r3]
     9b6:	b25b      	sxtb	r3, r3
     9b8:	3301      	adds	r3, #1
     9ba:	d0dc      	beq.n	976 <xQueueReceive+0x8a>
     9bc:	4b18      	ldr	r3, [pc, #96]	; (a20 <xQueueReceive+0x134>)
     9be:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     9c0:	a901      	add	r1, sp, #4
     9c2:	a802      	add	r0, sp, #8
     9c4:	4b1b      	ldr	r3, [pc, #108]	; (a34 <xQueueReceive+0x148>)
     9c6:	4798      	blx	r3
     9c8:	2800      	cmp	r0, #0
     9ca:	d113      	bne.n	9f4 <xQueueReceive+0x108>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     9cc:	0020      	movs	r0, r4
     9ce:	4b1a      	ldr	r3, [pc, #104]	; (a38 <xQueueReceive+0x14c>)
     9d0:	4798      	blx	r3
     9d2:	2800      	cmp	r0, #0
     9d4:	d0d3      	beq.n	97e <xQueueReceive+0x92>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     9d6:	0020      	movs	r0, r4
     9d8:	3024      	adds	r0, #36	; 0x24
     9da:	9901      	ldr	r1, [sp, #4]
     9dc:	4b17      	ldr	r3, [pc, #92]	; (a3c <xQueueReceive+0x150>)
     9de:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
     9e0:	0020      	movs	r0, r4
     9e2:	4b11      	ldr	r3, [pc, #68]	; (a28 <xQueueReceive+0x13c>)
     9e4:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
     9e6:	4b11      	ldr	r3, [pc, #68]	; (a2c <xQueueReceive+0x140>)
     9e8:	4798      	blx	r3
     9ea:	2800      	cmp	r0, #0
     9ec:	d1cc      	bne.n	988 <xQueueReceive+0x9c>
					portYIELD_WITHIN_API();
     9ee:	4b0b      	ldr	r3, [pc, #44]	; (a1c <xQueueReceive+0x130>)
     9f0:	4798      	blx	r3
     9f2:	e7c9      	b.n	988 <xQueueReceive+0x9c>
			prvUnlockQueue( pxQueue );
     9f4:	0020      	movs	r0, r4
     9f6:	4b0c      	ldr	r3, [pc, #48]	; (a28 <xQueueReceive+0x13c>)
     9f8:	4798      	blx	r3
			( void ) xTaskResumeAll();
     9fa:	4b0c      	ldr	r3, [pc, #48]	; (a2c <xQueueReceive+0x140>)
     9fc:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     9fe:	0020      	movs	r0, r4
     a00:	4b0d      	ldr	r3, [pc, #52]	; (a38 <xQueueReceive+0x14c>)
     a02:	4798      	blx	r3
     a04:	2800      	cmp	r0, #0
     a06:	d0bf      	beq.n	988 <xQueueReceive+0x9c>
				return errQUEUE_EMPTY;
     a08:	2000      	movs	r0, #0
     a0a:	e7a4      	b.n	956 <xQueueReceive+0x6a>
     a0c:	000012e9 	.word	0x000012e9
     a10:	00000229 	.word	0x00000229
     a14:	000004f1 	.word	0x000004f1
     a18:	000011cd 	.word	0x000011cd
     a1c:	00000211 	.word	0x00000211
     a20:	00000241 	.word	0x00000241
     a24:	00001255 	.word	0x00001255
     a28:	00000519 	.word	0x00000519
     a2c:	00000f6d 	.word	0x00000f6d
     a30:	00000e31 	.word	0x00000e31
     a34:	0000126d 	.word	0x0000126d
     a38:	000003f1 	.word	0x000003f1
     a3c:	00001169 	.word	0x00001169

00000a40 <vQueueWaitForMessageRestricted>:
	{
     a40:	b570      	push	{r4, r5, r6, lr}
     a42:	0004      	movs	r4, r0
     a44:	000d      	movs	r5, r1
     a46:	0016      	movs	r6, r2
		prvLockQueue( pxQueue );
     a48:	4b11      	ldr	r3, [pc, #68]	; (a90 <vQueueWaitForMessageRestricted+0x50>)
     a4a:	4798      	blx	r3
     a4c:	2344      	movs	r3, #68	; 0x44
     a4e:	5ce3      	ldrb	r3, [r4, r3]
     a50:	b25b      	sxtb	r3, r3
     a52:	3301      	adds	r3, #1
     a54:	d00d      	beq.n	a72 <vQueueWaitForMessageRestricted+0x32>
     a56:	2345      	movs	r3, #69	; 0x45
     a58:	5ce3      	ldrb	r3, [r4, r3]
     a5a:	b25b      	sxtb	r3, r3
     a5c:	3301      	adds	r3, #1
     a5e:	d00c      	beq.n	a7a <vQueueWaitForMessageRestricted+0x3a>
     a60:	4b0c      	ldr	r3, [pc, #48]	; (a94 <vQueueWaitForMessageRestricted+0x54>)
     a62:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     a64:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     a66:	2b00      	cmp	r3, #0
     a68:	d00b      	beq.n	a82 <vQueueWaitForMessageRestricted+0x42>
		prvUnlockQueue( pxQueue );
     a6a:	0020      	movs	r0, r4
     a6c:	4b0a      	ldr	r3, [pc, #40]	; (a98 <vQueueWaitForMessageRestricted+0x58>)
     a6e:	4798      	blx	r3
	}
     a70:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
     a72:	2200      	movs	r2, #0
     a74:	2344      	movs	r3, #68	; 0x44
     a76:	54e2      	strb	r2, [r4, r3]
     a78:	e7ed      	b.n	a56 <vQueueWaitForMessageRestricted+0x16>
     a7a:	2200      	movs	r2, #0
     a7c:	2345      	movs	r3, #69	; 0x45
     a7e:	54e2      	strb	r2, [r4, r3]
     a80:	e7ee      	b.n	a60 <vQueueWaitForMessageRestricted+0x20>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     a82:	0020      	movs	r0, r4
     a84:	3024      	adds	r0, #36	; 0x24
     a86:	0032      	movs	r2, r6
     a88:	0029      	movs	r1, r5
     a8a:	4b04      	ldr	r3, [pc, #16]	; (a9c <vQueueWaitForMessageRestricted+0x5c>)
     a8c:	4798      	blx	r3
     a8e:	e7ec      	b.n	a6a <vQueueWaitForMessageRestricted+0x2a>
     a90:	00000229 	.word	0x00000229
     a94:	00000241 	.word	0x00000241
     a98:	00000519 	.word	0x00000519
     a9c:	00001195 	.word	0x00001195

00000aa0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     aa0:	4b08      	ldr	r3, [pc, #32]	; (ac4 <prvResetNextTaskUnblockTime+0x24>)
     aa2:	681b      	ldr	r3, [r3, #0]
     aa4:	681b      	ldr	r3, [r3, #0]
     aa6:	2b00      	cmp	r3, #0
     aa8:	d007      	beq.n	aba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
     aaa:	4b06      	ldr	r3, [pc, #24]	; (ac4 <prvResetNextTaskUnblockTime+0x24>)
     aac:	681b      	ldr	r3, [r3, #0]
     aae:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
     ab0:	68db      	ldr	r3, [r3, #12]
     ab2:	685a      	ldr	r2, [r3, #4]
     ab4:	4b04      	ldr	r3, [pc, #16]	; (ac8 <prvResetNextTaskUnblockTime+0x28>)
     ab6:	601a      	str	r2, [r3, #0]
	}
}
     ab8:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
     aba:	2201      	movs	r2, #1
     abc:	4252      	negs	r2, r2
     abe:	4b02      	ldr	r3, [pc, #8]	; (ac8 <prvResetNextTaskUnblockTime+0x28>)
     ac0:	601a      	str	r2, [r3, #0]
     ac2:	e7f9      	b.n	ab8 <prvResetNextTaskUnblockTime+0x18>
     ac4:	20002f10 	.word	0x20002f10
     ac8:	20002fc0 	.word	0x20002fc0

00000acc <prvIdleTask>:
{
     acc:	b5f0      	push	{r4, r5, r6, r7, lr}
     ace:	46d6      	mov	lr, sl
     ad0:	464f      	mov	r7, r9
     ad2:	4646      	mov	r6, r8
     ad4:	b5c0      	push	{r6, r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
     ad6:	4b14      	ldr	r3, [pc, #80]	; (b28 <prvIdleTask+0x5c>)
     ad8:	4699      	mov	r9, r3
			taskENTER_CRITICAL();
     ada:	4b14      	ldr	r3, [pc, #80]	; (b2c <prvIdleTask+0x60>)
     adc:	4698      	mov	r8, r3
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
     ade:	4f14      	ldr	r7, [pc, #80]	; (b30 <prvIdleTask+0x64>)
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
     ae0:	4b14      	ldr	r3, [pc, #80]	; (b34 <prvIdleTask+0x68>)
     ae2:	469a      	mov	sl, r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
     ae4:	464b      	mov	r3, r9
     ae6:	681b      	ldr	r3, [r3, #0]
     ae8:	2b00      	cmp	r3, #0
     aea:	d016      	beq.n	b1a <prvIdleTask+0x4e>
			taskENTER_CRITICAL();
     aec:	47c0      	blx	r8
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
     aee:	68fb      	ldr	r3, [r7, #12]
     af0:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
     af2:	1d28      	adds	r0, r5, #4
     af4:	47d0      	blx	sl
				--uxCurrentNumberOfTasks;
     af6:	4a10      	ldr	r2, [pc, #64]	; (b38 <prvIdleTask+0x6c>)
     af8:	6813      	ldr	r3, [r2, #0]
     afa:	3b01      	subs	r3, #1
     afc:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
     afe:	4c0a      	ldr	r4, [pc, #40]	; (b28 <prvIdleTask+0x5c>)
     b00:	6823      	ldr	r3, [r4, #0]
     b02:	3b01      	subs	r3, #1
     b04:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
     b06:	4b0d      	ldr	r3, [pc, #52]	; (b3c <prvIdleTask+0x70>)
     b08:	4798      	blx	r3
			vPortFree( pxTCB->pxStack );
     b0a:	6b28      	ldr	r0, [r5, #48]	; 0x30
     b0c:	4e0c      	ldr	r6, [pc, #48]	; (b40 <prvIdleTask+0x74>)
     b0e:	47b0      	blx	r6
			vPortFree( pxTCB );
     b10:	0028      	movs	r0, r5
     b12:	47b0      	blx	r6
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
     b14:	6823      	ldr	r3, [r4, #0]
     b16:	2b00      	cmp	r3, #0
     b18:	d1e8      	bne.n	aec <prvIdleTask+0x20>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
     b1a:	4b0a      	ldr	r3, [pc, #40]	; (b44 <prvIdleTask+0x78>)
     b1c:	681b      	ldr	r3, [r3, #0]
     b1e:	2b01      	cmp	r3, #1
     b20:	d9e0      	bls.n	ae4 <prvIdleTask+0x18>
				taskYIELD();
     b22:	4b09      	ldr	r3, [pc, #36]	; (b48 <prvIdleTask+0x7c>)
     b24:	4798      	blx	r3
     b26:	e7dd      	b.n	ae4 <prvIdleTask+0x18>
     b28:	20002f80 	.word	0x20002f80
     b2c:	00000229 	.word	0x00000229
     b30:	20002ff4 	.word	0x20002ff4
     b34:	000003c9 	.word	0x000003c9
     b38:	20002f7c 	.word	0x20002f7c
     b3c:	00000241 	.word	0x00000241
     b40:	0000035d 	.word	0x0000035d
     b44:	20002f18 	.word	0x20002f18
     b48:	00000211 	.word	0x00000211

00000b4c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
     b4c:	b570      	push	{r4, r5, r6, lr}
     b4e:	0004      	movs	r4, r0
     b50:	000d      	movs	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
     b52:	4b17      	ldr	r3, [pc, #92]	; (bb0 <prvAddCurrentTaskToDelayedList+0x64>)
     b54:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
     b56:	4b17      	ldr	r3, [pc, #92]	; (bb4 <prvAddCurrentTaskToDelayedList+0x68>)
     b58:	6818      	ldr	r0, [r3, #0]
     b5a:	3004      	adds	r0, #4
     b5c:	4b16      	ldr	r3, [pc, #88]	; (bb8 <prvAddCurrentTaskToDelayedList+0x6c>)
     b5e:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
     b60:	1c63      	adds	r3, r4, #1
     b62:	d013      	beq.n	b8c <prvAddCurrentTaskToDelayedList+0x40>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
     b64:	1934      	adds	r4, r6, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
     b66:	4b13      	ldr	r3, [pc, #76]	; (bb4 <prvAddCurrentTaskToDelayedList+0x68>)
     b68:	681b      	ldr	r3, [r3, #0]
     b6a:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
     b6c:	42a6      	cmp	r6, r4
     b6e:	d816      	bhi.n	b9e <prvAddCurrentTaskToDelayedList+0x52>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
     b70:	4b12      	ldr	r3, [pc, #72]	; (bbc <prvAddCurrentTaskToDelayedList+0x70>)
     b72:	6818      	ldr	r0, [r3, #0]
     b74:	4b0f      	ldr	r3, [pc, #60]	; (bb4 <prvAddCurrentTaskToDelayedList+0x68>)
     b76:	6819      	ldr	r1, [r3, #0]
     b78:	3104      	adds	r1, #4
     b7a:	4b11      	ldr	r3, [pc, #68]	; (bc0 <prvAddCurrentTaskToDelayedList+0x74>)
     b7c:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
     b7e:	4b11      	ldr	r3, [pc, #68]	; (bc4 <prvAddCurrentTaskToDelayedList+0x78>)
     b80:	681b      	ldr	r3, [r3, #0]
     b82:	429c      	cmp	r4, r3
     b84:	d212      	bcs.n	bac <prvAddCurrentTaskToDelayedList+0x60>
				{
					xNextTaskUnblockTime = xTimeToWake;
     b86:	4b0f      	ldr	r3, [pc, #60]	; (bc4 <prvAddCurrentTaskToDelayedList+0x78>)
     b88:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
     b8a:	e00f      	b.n	bac <prvAddCurrentTaskToDelayedList+0x60>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
     b8c:	2d00      	cmp	r5, #0
     b8e:	d0e9      	beq.n	b64 <prvAddCurrentTaskToDelayedList+0x18>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
     b90:	4b08      	ldr	r3, [pc, #32]	; (bb4 <prvAddCurrentTaskToDelayedList+0x68>)
     b92:	6819      	ldr	r1, [r3, #0]
     b94:	3104      	adds	r1, #4
     b96:	480c      	ldr	r0, [pc, #48]	; (bc8 <prvAddCurrentTaskToDelayedList+0x7c>)
     b98:	4b0c      	ldr	r3, [pc, #48]	; (bcc <prvAddCurrentTaskToDelayedList+0x80>)
     b9a:	4798      	blx	r3
     b9c:	e006      	b.n	bac <prvAddCurrentTaskToDelayedList+0x60>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
     b9e:	4b0c      	ldr	r3, [pc, #48]	; (bd0 <prvAddCurrentTaskToDelayedList+0x84>)
     ba0:	6818      	ldr	r0, [r3, #0]
     ba2:	4b04      	ldr	r3, [pc, #16]	; (bb4 <prvAddCurrentTaskToDelayedList+0x68>)
     ba4:	6819      	ldr	r1, [r3, #0]
     ba6:	3104      	adds	r1, #4
     ba8:	4b05      	ldr	r3, [pc, #20]	; (bc0 <prvAddCurrentTaskToDelayedList+0x74>)
     baa:	4798      	blx	r3
}
     bac:	bd70      	pop	{r4, r5, r6, pc}
     bae:	46c0      	nop			; (mov r8, r8)
     bb0:	20003008 	.word	0x20003008
     bb4:	20002f0c 	.word	0x20002f0c
     bb8:	000003c9 	.word	0x000003c9
     bbc:	20002f10 	.word	0x20002f10
     bc0:	0000039b 	.word	0x0000039b
     bc4:	20002fc0 	.word	0x20002fc0
     bc8:	20002fe0 	.word	0x20002fe0
     bcc:	00000383 	.word	0x00000383
     bd0:	20002f14 	.word	0x20002f14

00000bd4 <xTaskCreate>:
	{
     bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
     bd6:	46c6      	mov	lr, r8
     bd8:	b500      	push	{lr}
     bda:	b084      	sub	sp, #16
     bdc:	9001      	str	r0, [sp, #4]
     bde:	000d      	movs	r5, r1
     be0:	9302      	str	r3, [sp, #8]
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     be2:	0097      	lsls	r7, r2, #2
     be4:	0038      	movs	r0, r7
     be6:	4b5f      	ldr	r3, [pc, #380]	; (d64 <xTaskCreate+0x190>)
     be8:	4798      	blx	r3
     bea:	1e06      	subs	r6, r0, #0
			if( pxStack != NULL )
     bec:	d100      	bne.n	bf0 <xTaskCreate+0x1c>
     bee:	e089      	b.n	d04 <xTaskCreate+0x130>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
     bf0:	2054      	movs	r0, #84	; 0x54
     bf2:	4b5c      	ldr	r3, [pc, #368]	; (d64 <xTaskCreate+0x190>)
     bf4:	4798      	blx	r3
     bf6:	1e04      	subs	r4, r0, #0
				if( pxNewTCB != NULL )
     bf8:	d100      	bne.n	bfc <xTaskCreate+0x28>
     bfa:	e080      	b.n	cfe <xTaskCreate+0x12a>
					pxNewTCB->pxStack = pxStack;
     bfc:	6306      	str	r6, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
     bfe:	003a      	movs	r2, r7
     c00:	21a5      	movs	r1, #165	; 0xa5
     c02:	0030      	movs	r0, r6
     c04:	4b58      	ldr	r3, [pc, #352]	; (d68 <xTaskCreate+0x194>)
     c06:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
     c08:	1f3a      	subs	r2, r7, #4
     c0a:	6b23      	ldr	r3, [r4, #48]	; 0x30
     c0c:	469c      	mov	ip, r3
     c0e:	4462      	add	r2, ip
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
     c10:	2307      	movs	r3, #7
     c12:	439a      	bics	r2, r3
     c14:	4690      	mov	r8, r2
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
     c16:	782a      	ldrb	r2, [r5, #0]
     c18:	332d      	adds	r3, #45	; 0x2d
     c1a:	54e2      	strb	r2, [r4, r3]
		if( pcName[ x ] == 0x00 )
     c1c:	782b      	ldrb	r3, [r5, #0]
     c1e:	2b00      	cmp	r3, #0
     c20:	d00d      	beq.n	c3e <xTaskCreate+0x6a>
     c22:	3501      	adds	r5, #1
     c24:	0023      	movs	r3, r4
     c26:	3335      	adds	r3, #53	; 0x35
     c28:	0020      	movs	r0, r4
     c2a:	303c      	adds	r0, #60	; 0x3c
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
     c2c:	782a      	ldrb	r2, [r5, #0]
     c2e:	701a      	strb	r2, [r3, #0]
		if( pcName[ x ] == 0x00 )
     c30:	782a      	ldrb	r2, [r5, #0]
     c32:	2a00      	cmp	r2, #0
     c34:	d003      	beq.n	c3e <xTaskCreate+0x6a>
     c36:	3501      	adds	r5, #1
     c38:	3301      	adds	r3, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
     c3a:	4283      	cmp	r3, r0
     c3c:	d1f6      	bne.n	c2c <xTaskCreate+0x58>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
     c3e:	2200      	movs	r2, #0
     c40:	233b      	movs	r3, #59	; 0x3b
     c42:	54e2      	strb	r2, [r4, r3]
     c44:	9f0a      	ldr	r7, [sp, #40]	; 0x28
     c46:	2f04      	cmp	r7, #4
     c48:	d900      	bls.n	c4c <xTaskCreate+0x78>
     c4a:	2704      	movs	r7, #4
	pxNewTCB->uxPriority = uxPriority;
     c4c:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
     c4e:	6467      	str	r7, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
     c50:	2600      	movs	r6, #0
     c52:	64a6      	str	r6, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
     c54:	1d23      	adds	r3, r4, #4
     c56:	9303      	str	r3, [sp, #12]
     c58:	0018      	movs	r0, r3
     c5a:	4d44      	ldr	r5, [pc, #272]	; (d6c <xTaskCreate+0x198>)
     c5c:	47a8      	blx	r5
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
     c5e:	0020      	movs	r0, r4
     c60:	3018      	adds	r0, #24
     c62:	47a8      	blx	r5
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
     c64:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     c66:	2305      	movs	r3, #5
     c68:	1bdb      	subs	r3, r3, r7
     c6a:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
     c6c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
     c6e:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
     c70:	2350      	movs	r3, #80	; 0x50
     c72:	54e6      	strb	r6, [r4, r3]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
     c74:	9a02      	ldr	r2, [sp, #8]
     c76:	9901      	ldr	r1, [sp, #4]
     c78:	4640      	mov	r0, r8
     c7a:	4b3d      	ldr	r3, [pc, #244]	; (d70 <xTaskCreate+0x19c>)
     c7c:	4798      	blx	r3
     c7e:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
     c80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     c82:	2b00      	cmp	r3, #0
     c84:	d000      	beq.n	c88 <xTaskCreate+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
     c86:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
     c88:	4b3a      	ldr	r3, [pc, #232]	; (d74 <xTaskCreate+0x1a0>)
     c8a:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
     c8c:	4a3a      	ldr	r2, [pc, #232]	; (d78 <xTaskCreate+0x1a4>)
     c8e:	6813      	ldr	r3, [r2, #0]
     c90:	3301      	adds	r3, #1
     c92:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
     c94:	4b39      	ldr	r3, [pc, #228]	; (d7c <xTaskCreate+0x1a8>)
     c96:	681b      	ldr	r3, [r3, #0]
     c98:	2b00      	cmp	r3, #0
     c9a:	d036      	beq.n	d0a <xTaskCreate+0x136>
			if( xSchedulerRunning == pdFALSE )
     c9c:	4b38      	ldr	r3, [pc, #224]	; (d80 <xTaskCreate+0x1ac>)
     c9e:	681b      	ldr	r3, [r3, #0]
     ca0:	2b00      	cmp	r3, #0
     ca2:	d107      	bne.n	cb4 <xTaskCreate+0xe0>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
     ca4:	4b35      	ldr	r3, [pc, #212]	; (d7c <xTaskCreate+0x1a8>)
     ca6:	681b      	ldr	r3, [r3, #0]
     ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     caa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     cac:	4293      	cmp	r3, r2
     cae:	d801      	bhi.n	cb4 <xTaskCreate+0xe0>
					pxCurrentTCB = pxNewTCB;
     cb0:	4b32      	ldr	r3, [pc, #200]	; (d7c <xTaskCreate+0x1a8>)
     cb2:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
     cb4:	4a33      	ldr	r2, [pc, #204]	; (d84 <xTaskCreate+0x1b0>)
     cb6:	6813      	ldr	r3, [r2, #0]
     cb8:	3301      	adds	r3, #1
     cba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
     cbc:	63e3      	str	r3, [r4, #60]	; 0x3c
		prvAddTaskToReadyList( pxNewTCB );
     cbe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     cc0:	4a31      	ldr	r2, [pc, #196]	; (d88 <xTaskCreate+0x1b4>)
     cc2:	6812      	ldr	r2, [r2, #0]
     cc4:	4293      	cmp	r3, r2
     cc6:	d901      	bls.n	ccc <xTaskCreate+0xf8>
     cc8:	4a2f      	ldr	r2, [pc, #188]	; (d88 <xTaskCreate+0x1b4>)
     cca:	6013      	str	r3, [r2, #0]
     ccc:	0098      	lsls	r0, r3, #2
     cce:	18c0      	adds	r0, r0, r3
     cd0:	0080      	lsls	r0, r0, #2
     cd2:	4b2e      	ldr	r3, [pc, #184]	; (d8c <xTaskCreate+0x1b8>)
     cd4:	1818      	adds	r0, r3, r0
     cd6:	9903      	ldr	r1, [sp, #12]
     cd8:	4b2d      	ldr	r3, [pc, #180]	; (d90 <xTaskCreate+0x1bc>)
     cda:	4798      	blx	r3
	taskEXIT_CRITICAL();
     cdc:	4b2d      	ldr	r3, [pc, #180]	; (d94 <xTaskCreate+0x1c0>)
     cde:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
     ce0:	4b27      	ldr	r3, [pc, #156]	; (d80 <xTaskCreate+0x1ac>)
     ce2:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
     ce4:	2001      	movs	r0, #1
	if( xSchedulerRunning != pdFALSE )
     ce6:	2b00      	cmp	r3, #0
     ce8:	d005      	beq.n	cf6 <xTaskCreate+0x122>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
     cea:	4b24      	ldr	r3, [pc, #144]	; (d7c <xTaskCreate+0x1a8>)
     cec:	681b      	ldr	r3, [r3, #0]
     cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     cf0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     cf2:	429a      	cmp	r2, r3
     cf4:	d331      	bcc.n	d5a <xTaskCreate+0x186>
	}
     cf6:	b004      	add	sp, #16
     cf8:	bc04      	pop	{r2}
     cfa:	4690      	mov	r8, r2
     cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vPortFree( pxStack );
     cfe:	0030      	movs	r0, r6
     d00:	4b25      	ldr	r3, [pc, #148]	; (d98 <xTaskCreate+0x1c4>)
     d02:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
     d04:	2001      	movs	r0, #1
     d06:	4240      	negs	r0, r0
     d08:	e7f5      	b.n	cf6 <xTaskCreate+0x122>
			pxCurrentTCB = pxNewTCB;
     d0a:	4b1c      	ldr	r3, [pc, #112]	; (d7c <xTaskCreate+0x1a8>)
     d0c:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
     d0e:	6813      	ldr	r3, [r2, #0]
     d10:	2b01      	cmp	r3, #1
     d12:	d1cf      	bne.n	cb4 <xTaskCreate+0xe0>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
     d14:	4f1d      	ldr	r7, [pc, #116]	; (d8c <xTaskCreate+0x1b8>)
     d16:	0038      	movs	r0, r7
     d18:	4e20      	ldr	r6, [pc, #128]	; (d9c <xTaskCreate+0x1c8>)
     d1a:	47b0      	blx	r6
     d1c:	0038      	movs	r0, r7
     d1e:	3014      	adds	r0, #20
     d20:	47b0      	blx	r6
     d22:	0038      	movs	r0, r7
     d24:	3028      	adds	r0, #40	; 0x28
     d26:	47b0      	blx	r6
     d28:	0038      	movs	r0, r7
     d2a:	303c      	adds	r0, #60	; 0x3c
     d2c:	47b0      	blx	r6
     d2e:	0038      	movs	r0, r7
     d30:	3050      	adds	r0, #80	; 0x50
     d32:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
     d34:	4b1a      	ldr	r3, [pc, #104]	; (da0 <xTaskCreate+0x1cc>)
     d36:	4698      	mov	r8, r3
     d38:	0018      	movs	r0, r3
     d3a:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
     d3c:	4f19      	ldr	r7, [pc, #100]	; (da4 <xTaskCreate+0x1d0>)
     d3e:	0038      	movs	r0, r7
     d40:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
     d42:	4819      	ldr	r0, [pc, #100]	; (da8 <xTaskCreate+0x1d4>)
     d44:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
     d46:	4819      	ldr	r0, [pc, #100]	; (dac <xTaskCreate+0x1d8>)
     d48:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
     d4a:	4819      	ldr	r0, [pc, #100]	; (db0 <xTaskCreate+0x1dc>)
     d4c:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
     d4e:	4b19      	ldr	r3, [pc, #100]	; (db4 <xTaskCreate+0x1e0>)
     d50:	4642      	mov	r2, r8
     d52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
     d54:	4b18      	ldr	r3, [pc, #96]	; (db8 <xTaskCreate+0x1e4>)
     d56:	601f      	str	r7, [r3, #0]
     d58:	e7ac      	b.n	cb4 <xTaskCreate+0xe0>
			taskYIELD_IF_USING_PREEMPTION();
     d5a:	4b18      	ldr	r3, [pc, #96]	; (dbc <xTaskCreate+0x1e8>)
     d5c:	4798      	blx	r3
			xReturn = pdPASS;
     d5e:	2001      	movs	r0, #1
     d60:	e7c9      	b.n	cf6 <xTaskCreate+0x122>
     d62:	46c0      	nop			; (mov r8, r8)
     d64:	000002e5 	.word	0x000002e5
     d68:	000022af 	.word	0x000022af
     d6c:	0000037d 	.word	0x0000037d
     d70:	00000175 	.word	0x00000175
     d74:	00000229 	.word	0x00000229
     d78:	20002f7c 	.word	0x20002f7c
     d7c:	20002f0c 	.word	0x20002f0c
     d80:	20002fdc 	.word	0x20002fdc
     d84:	20002f8c 	.word	0x20002f8c
     d88:	20002f90 	.word	0x20002f90
     d8c:	20002f18 	.word	0x20002f18
     d90:	00000383 	.word	0x00000383
     d94:	00000241 	.word	0x00000241
     d98:	0000035d 	.word	0x0000035d
     d9c:	00000367 	.word	0x00000367
     da0:	20002f94 	.word	0x20002f94
     da4:	20002fa8 	.word	0x20002fa8
     da8:	20002fc8 	.word	0x20002fc8
     dac:	20002ff4 	.word	0x20002ff4
     db0:	20002fe0 	.word	0x20002fe0
     db4:	20002f10 	.word	0x20002f10
     db8:	20002f14 	.word	0x20002f14
     dbc:	00000211 	.word	0x00000211

00000dc0 <vTaskStartScheduler>:
{
     dc0:	b510      	push	{r4, lr}
     dc2:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
     dc4:	4b11      	ldr	r3, [pc, #68]	; (e0c <vTaskStartScheduler+0x4c>)
     dc6:	9301      	str	r3, [sp, #4]
     dc8:	2300      	movs	r3, #0
     dca:	9300      	str	r3, [sp, #0]
     dcc:	2264      	movs	r2, #100	; 0x64
     dce:	4910      	ldr	r1, [pc, #64]	; (e10 <vTaskStartScheduler+0x50>)
     dd0:	4810      	ldr	r0, [pc, #64]	; (e14 <vTaskStartScheduler+0x54>)
     dd2:	4c11      	ldr	r4, [pc, #68]	; (e18 <vTaskStartScheduler+0x58>)
     dd4:	47a0      	blx	r4
		if( xReturn == pdPASS )
     dd6:	2801      	cmp	r0, #1
     dd8:	d003      	beq.n	de2 <vTaskStartScheduler+0x22>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
     dda:	1c43      	adds	r3, r0, #1
     ddc:	d013      	beq.n	e06 <vTaskStartScheduler+0x46>
}
     dde:	b002      	add	sp, #8
     de0:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
     de2:	4b0e      	ldr	r3, [pc, #56]	; (e1c <vTaskStartScheduler+0x5c>)
     de4:	4798      	blx	r3
	if( xReturn == pdPASS )
     de6:	2801      	cmp	r0, #1
     de8:	d1f7      	bne.n	dda <vTaskStartScheduler+0x1a>
		portDISABLE_INTERRUPTS();
     dea:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
     dec:	2201      	movs	r2, #1
     dee:	4252      	negs	r2, r2
     df0:	4b0b      	ldr	r3, [pc, #44]	; (e20 <vTaskStartScheduler+0x60>)
     df2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
     df4:	3202      	adds	r2, #2
     df6:	4b0b      	ldr	r3, [pc, #44]	; (e24 <vTaskStartScheduler+0x64>)
     df8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
     dfa:	2200      	movs	r2, #0
     dfc:	4b0a      	ldr	r3, [pc, #40]	; (e28 <vTaskStartScheduler+0x68>)
     dfe:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
     e00:	4b0a      	ldr	r3, [pc, #40]	; (e2c <vTaskStartScheduler+0x6c>)
     e02:	4798      	blx	r3
     e04:	e7eb      	b.n	dde <vTaskStartScheduler+0x1e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
     e06:	b672      	cpsid	i
     e08:	e7fe      	b.n	e08 <vTaskStartScheduler+0x48>
     e0a:	46c0      	nop			; (mov r8, r8)
     e0c:	20002fbc 	.word	0x20002fbc
     e10:	000022c0 	.word	0x000022c0
     e14:	00000acd 	.word	0x00000acd
     e18:	00000bd5 	.word	0x00000bd5
     e1c:	0000142d 	.word	0x0000142d
     e20:	20002fc0 	.word	0x20002fc0
     e24:	20002fdc 	.word	0x20002fdc
     e28:	20003008 	.word	0x20003008
     e2c:	00000199 	.word	0x00000199

00000e30 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
     e30:	4a02      	ldr	r2, [pc, #8]	; (e3c <vTaskSuspendAll+0xc>)
     e32:	6813      	ldr	r3, [r2, #0]
     e34:	3301      	adds	r3, #1
     e36:	6013      	str	r3, [r2, #0]
}
     e38:	4770      	bx	lr
     e3a:	46c0      	nop			; (mov r8, r8)
     e3c:	20002f88 	.word	0x20002f88

00000e40 <xTaskGetTickCount>:
		xTicks = xTickCount;
     e40:	4b01      	ldr	r3, [pc, #4]	; (e48 <xTaskGetTickCount+0x8>)
     e42:	6818      	ldr	r0, [r3, #0]
}
     e44:	4770      	bx	lr
     e46:	46c0      	nop			; (mov r8, r8)
     e48:	20003008 	.word	0x20003008

00000e4c <xTaskIncrementTick>:
{
     e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
     e4e:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
     e50:	4b38      	ldr	r3, [pc, #224]	; (f34 <xTaskIncrementTick+0xe8>)
     e52:	681b      	ldr	r3, [r3, #0]
     e54:	2b00      	cmp	r3, #0
     e56:	d160      	bne.n	f1a <xTaskIncrementTick+0xce>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
     e58:	4b37      	ldr	r3, [pc, #220]	; (f38 <xTaskIncrementTick+0xec>)
     e5a:	681d      	ldr	r5, [r3, #0]
     e5c:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
     e5e:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
     e60:	2d00      	cmp	r5, #0
     e62:	d112      	bne.n	e8a <xTaskIncrementTick+0x3e>
			taskSWITCH_DELAYED_LISTS();
     e64:	4b35      	ldr	r3, [pc, #212]	; (f3c <xTaskIncrementTick+0xf0>)
     e66:	681b      	ldr	r3, [r3, #0]
     e68:	681b      	ldr	r3, [r3, #0]
     e6a:	2b00      	cmp	r3, #0
     e6c:	d001      	beq.n	e72 <xTaskIncrementTick+0x26>
     e6e:	b672      	cpsid	i
     e70:	e7fe      	b.n	e70 <xTaskIncrementTick+0x24>
     e72:	4a32      	ldr	r2, [pc, #200]	; (f3c <xTaskIncrementTick+0xf0>)
     e74:	6811      	ldr	r1, [r2, #0]
     e76:	4b32      	ldr	r3, [pc, #200]	; (f40 <xTaskIncrementTick+0xf4>)
     e78:	6818      	ldr	r0, [r3, #0]
     e7a:	6010      	str	r0, [r2, #0]
     e7c:	6019      	str	r1, [r3, #0]
     e7e:	4a31      	ldr	r2, [pc, #196]	; (f44 <xTaskIncrementTick+0xf8>)
     e80:	6813      	ldr	r3, [r2, #0]
     e82:	3301      	adds	r3, #1
     e84:	6013      	str	r3, [r2, #0]
     e86:	4b30      	ldr	r3, [pc, #192]	; (f48 <xTaskIncrementTick+0xfc>)
     e88:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
     e8a:	4b30      	ldr	r3, [pc, #192]	; (f4c <xTaskIncrementTick+0x100>)
     e8c:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
     e8e:	2400      	movs	r4, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
     e90:	429d      	cmp	r5, r3
     e92:	d333      	bcc.n	efc <xTaskIncrementTick+0xb0>
     e94:	2400      	movs	r4, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     e96:	4f29      	ldr	r7, [pc, #164]	; (f3c <xTaskIncrementTick+0xf0>)
     e98:	683b      	ldr	r3, [r7, #0]
     e9a:	681b      	ldr	r3, [r3, #0]
     e9c:	2b00      	cmp	r3, #0
     e9e:	d029      	beq.n	ef4 <xTaskIncrementTick+0xa8>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
     ea0:	4b26      	ldr	r3, [pc, #152]	; (f3c <xTaskIncrementTick+0xf0>)
     ea2:	681b      	ldr	r3, [r3, #0]
     ea4:	68db      	ldr	r3, [r3, #12]
     ea6:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
     ea8:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
     eaa:	429d      	cmp	r5, r3
     eac:	d332      	bcc.n	f14 <xTaskIncrementTick+0xc8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
     eae:	1d33      	adds	r3, r6, #4
     eb0:	9301      	str	r3, [sp, #4]
     eb2:	0018      	movs	r0, r3
     eb4:	4b26      	ldr	r3, [pc, #152]	; (f50 <xTaskIncrementTick+0x104>)
     eb6:	4798      	blx	r3
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
     eb8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     eba:	2b00      	cmp	r3, #0
     ebc:	d003      	beq.n	ec6 <xTaskIncrementTick+0x7a>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
     ebe:	0030      	movs	r0, r6
     ec0:	3018      	adds	r0, #24
     ec2:	4b23      	ldr	r3, [pc, #140]	; (f50 <xTaskIncrementTick+0x104>)
     ec4:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
     ec6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
     ec8:	4a22      	ldr	r2, [pc, #136]	; (f54 <xTaskIncrementTick+0x108>)
     eca:	6812      	ldr	r2, [r2, #0]
     ecc:	4293      	cmp	r3, r2
     ece:	d901      	bls.n	ed4 <xTaskIncrementTick+0x88>
     ed0:	4a20      	ldr	r2, [pc, #128]	; (f54 <xTaskIncrementTick+0x108>)
     ed2:	6013      	str	r3, [r2, #0]
     ed4:	0098      	lsls	r0, r3, #2
     ed6:	18c0      	adds	r0, r0, r3
     ed8:	0080      	lsls	r0, r0, #2
     eda:	4b1f      	ldr	r3, [pc, #124]	; (f58 <xTaskIncrementTick+0x10c>)
     edc:	1818      	adds	r0, r3, r0
     ede:	9901      	ldr	r1, [sp, #4]
     ee0:	4b1e      	ldr	r3, [pc, #120]	; (f5c <xTaskIncrementTick+0x110>)
     ee2:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
     ee4:	4b1e      	ldr	r3, [pc, #120]	; (f60 <xTaskIncrementTick+0x114>)
     ee6:	681b      	ldr	r3, [r3, #0]
     ee8:	6af2      	ldr	r2, [r6, #44]	; 0x2c
     eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     eec:	429a      	cmp	r2, r3
     eee:	d3d3      	bcc.n	e98 <xTaskIncrementTick+0x4c>
							xSwitchRequired = pdTRUE;
     ef0:	2401      	movs	r4, #1
     ef2:	e7d1      	b.n	e98 <xTaskIncrementTick+0x4c>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     ef4:	2201      	movs	r2, #1
     ef6:	4252      	negs	r2, r2
     ef8:	4b14      	ldr	r3, [pc, #80]	; (f4c <xTaskIncrementTick+0x100>)
     efa:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
     efc:	4b18      	ldr	r3, [pc, #96]	; (f60 <xTaskIncrementTick+0x114>)
     efe:	681b      	ldr	r3, [r3, #0]
     f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     f02:	0093      	lsls	r3, r2, #2
     f04:	189b      	adds	r3, r3, r2
     f06:	009b      	lsls	r3, r3, #2
     f08:	4a13      	ldr	r2, [pc, #76]	; (f58 <xTaskIncrementTick+0x10c>)
     f0a:	589b      	ldr	r3, [r3, r2]
     f0c:	2b01      	cmp	r3, #1
     f0e:	d909      	bls.n	f24 <xTaskIncrementTick+0xd8>
				xSwitchRequired = pdTRUE;
     f10:	2401      	movs	r4, #1
     f12:	e007      	b.n	f24 <xTaskIncrementTick+0xd8>
						xNextTaskUnblockTime = xItemValue;
     f14:	4a0d      	ldr	r2, [pc, #52]	; (f4c <xTaskIncrementTick+0x100>)
     f16:	6013      	str	r3, [r2, #0]
						break;
     f18:	e7f0      	b.n	efc <xTaskIncrementTick+0xb0>
		++uxPendedTicks;
     f1a:	4a12      	ldr	r2, [pc, #72]	; (f64 <xTaskIncrementTick+0x118>)
     f1c:	6813      	ldr	r3, [r2, #0]
     f1e:	3301      	adds	r3, #1
     f20:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
     f22:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
     f24:	4b10      	ldr	r3, [pc, #64]	; (f68 <xTaskIncrementTick+0x11c>)
     f26:	681b      	ldr	r3, [r3, #0]
     f28:	2b00      	cmp	r3, #0
     f2a:	d000      	beq.n	f2e <xTaskIncrementTick+0xe2>
			xSwitchRequired = pdTRUE;
     f2c:	2401      	movs	r4, #1
}
     f2e:	0020      	movs	r0, r4
     f30:	b003      	add	sp, #12
     f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f34:	20002f88 	.word	0x20002f88
     f38:	20003008 	.word	0x20003008
     f3c:	20002f10 	.word	0x20002f10
     f40:	20002f14 	.word	0x20002f14
     f44:	20002fc4 	.word	0x20002fc4
     f48:	00000aa1 	.word	0x00000aa1
     f4c:	20002fc0 	.word	0x20002fc0
     f50:	000003c9 	.word	0x000003c9
     f54:	20002f90 	.word	0x20002f90
     f58:	20002f18 	.word	0x20002f18
     f5c:	00000383 	.word	0x00000383
     f60:	20002f0c 	.word	0x20002f0c
     f64:	20002f84 	.word	0x20002f84
     f68:	2000300c 	.word	0x2000300c

00000f6c <xTaskResumeAll>:
{
     f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
     f6e:	4b30      	ldr	r3, [pc, #192]	; (1030 <xTaskResumeAll+0xc4>)
     f70:	681b      	ldr	r3, [r3, #0]
     f72:	2b00      	cmp	r3, #0
     f74:	d101      	bne.n	f7a <xTaskResumeAll+0xe>
     f76:	b672      	cpsid	i
     f78:	e7fe      	b.n	f78 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
     f7a:	4b2e      	ldr	r3, [pc, #184]	; (1034 <xTaskResumeAll+0xc8>)
     f7c:	4798      	blx	r3
		--uxSchedulerSuspended;
     f7e:	4b2c      	ldr	r3, [pc, #176]	; (1030 <xTaskResumeAll+0xc4>)
     f80:	681a      	ldr	r2, [r3, #0]
     f82:	3a01      	subs	r2, #1
     f84:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
     f86:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
     f88:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
     f8a:	2b00      	cmp	r3, #0
     f8c:	d103      	bne.n	f96 <xTaskResumeAll+0x2a>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
     f8e:	4b2a      	ldr	r3, [pc, #168]	; (1038 <xTaskResumeAll+0xcc>)
     f90:	681b      	ldr	r3, [r3, #0]
     f92:	2b00      	cmp	r3, #0
     f94:	d103      	bne.n	f9e <xTaskResumeAll+0x32>
	taskEXIT_CRITICAL();
     f96:	4b29      	ldr	r3, [pc, #164]	; (103c <xTaskResumeAll+0xd0>)
     f98:	4798      	blx	r3
}
     f9a:	0020      	movs	r0, r4
     f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
     f9e:	4d28      	ldr	r5, [pc, #160]	; (1040 <xTaskResumeAll+0xd4>)
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
     fa0:	002f      	movs	r7, r5
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
     fa2:	682b      	ldr	r3, [r5, #0]
     fa4:	2b00      	cmp	r3, #0
     fa6:	d022      	beq.n	fee <xTaskResumeAll+0x82>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
     fa8:	68fb      	ldr	r3, [r7, #12]
     faa:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
     fac:	0020      	movs	r0, r4
     fae:	3018      	adds	r0, #24
     fb0:	4b24      	ldr	r3, [pc, #144]	; (1044 <xTaskResumeAll+0xd8>)
     fb2:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
     fb4:	1d26      	adds	r6, r4, #4
     fb6:	0030      	movs	r0, r6
     fb8:	4b22      	ldr	r3, [pc, #136]	; (1044 <xTaskResumeAll+0xd8>)
     fba:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
     fbc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     fbe:	4a22      	ldr	r2, [pc, #136]	; (1048 <xTaskResumeAll+0xdc>)
     fc0:	6812      	ldr	r2, [r2, #0]
     fc2:	4293      	cmp	r3, r2
     fc4:	d901      	bls.n	fca <xTaskResumeAll+0x5e>
     fc6:	4a20      	ldr	r2, [pc, #128]	; (1048 <xTaskResumeAll+0xdc>)
     fc8:	6013      	str	r3, [r2, #0]
     fca:	0098      	lsls	r0, r3, #2
     fcc:	18c0      	adds	r0, r0, r3
     fce:	0080      	lsls	r0, r0, #2
     fd0:	4b1e      	ldr	r3, [pc, #120]	; (104c <xTaskResumeAll+0xe0>)
     fd2:	1818      	adds	r0, r3, r0
     fd4:	0031      	movs	r1, r6
     fd6:	4b1e      	ldr	r3, [pc, #120]	; (1050 <xTaskResumeAll+0xe4>)
     fd8:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
     fda:	4b1e      	ldr	r3, [pc, #120]	; (1054 <xTaskResumeAll+0xe8>)
     fdc:	681b      	ldr	r3, [r3, #0]
     fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     fe0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     fe2:	429a      	cmp	r2, r3
     fe4:	d3dd      	bcc.n	fa2 <xTaskResumeAll+0x36>
						xYieldPending = pdTRUE;
     fe6:	2201      	movs	r2, #1
     fe8:	4b1b      	ldr	r3, [pc, #108]	; (1058 <xTaskResumeAll+0xec>)
     fea:	601a      	str	r2, [r3, #0]
     fec:	e7d9      	b.n	fa2 <xTaskResumeAll+0x36>
				if( pxTCB != NULL )
     fee:	2c00      	cmp	r4, #0
     ff0:	d001      	beq.n	ff6 <xTaskResumeAll+0x8a>
					prvResetNextTaskUnblockTime();
     ff2:	4b1a      	ldr	r3, [pc, #104]	; (105c <xTaskResumeAll+0xf0>)
     ff4:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
     ff6:	4b1a      	ldr	r3, [pc, #104]	; (1060 <xTaskResumeAll+0xf4>)
     ff8:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
     ffa:	2c00      	cmp	r4, #0
     ffc:	d00e      	beq.n	101c <xTaskResumeAll+0xb0>
							if( xTaskIncrementTick() != pdFALSE )
     ffe:	4f19      	ldr	r7, [pc, #100]	; (1064 <xTaskResumeAll+0xf8>)
								xYieldPending = pdTRUE;
    1000:	4e15      	ldr	r6, [pc, #84]	; (1058 <xTaskResumeAll+0xec>)
    1002:	2501      	movs	r5, #1
    1004:	e002      	b.n	100c <xTaskResumeAll+0xa0>
							--uxPendedCounts;
    1006:	3c01      	subs	r4, #1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    1008:	2c00      	cmp	r4, #0
    100a:	d004      	beq.n	1016 <xTaskResumeAll+0xaa>
							if( xTaskIncrementTick() != pdFALSE )
    100c:	47b8      	blx	r7
    100e:	2800      	cmp	r0, #0
    1010:	d0f9      	beq.n	1006 <xTaskResumeAll+0x9a>
								xYieldPending = pdTRUE;
    1012:	6035      	str	r5, [r6, #0]
    1014:	e7f7      	b.n	1006 <xTaskResumeAll+0x9a>
						uxPendedTicks = 0;
    1016:	2200      	movs	r2, #0
    1018:	4b11      	ldr	r3, [pc, #68]	; (1060 <xTaskResumeAll+0xf4>)
    101a:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
    101c:	4b0e      	ldr	r3, [pc, #56]	; (1058 <xTaskResumeAll+0xec>)
    101e:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
    1020:	2400      	movs	r4, #0
				if( xYieldPending != pdFALSE )
    1022:	2b00      	cmp	r3, #0
    1024:	d0b7      	beq.n	f96 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
    1026:	4b10      	ldr	r3, [pc, #64]	; (1068 <xTaskResumeAll+0xfc>)
    1028:	4798      	blx	r3
						xAlreadyYielded = pdTRUE;
    102a:	3401      	adds	r4, #1
    102c:	e7b3      	b.n	f96 <xTaskResumeAll+0x2a>
    102e:	46c0      	nop			; (mov r8, r8)
    1030:	20002f88 	.word	0x20002f88
    1034:	00000229 	.word	0x00000229
    1038:	20002f7c 	.word	0x20002f7c
    103c:	00000241 	.word	0x00000241
    1040:	20002fc8 	.word	0x20002fc8
    1044:	000003c9 	.word	0x000003c9
    1048:	20002f90 	.word	0x20002f90
    104c:	20002f18 	.word	0x20002f18
    1050:	00000383 	.word	0x00000383
    1054:	20002f0c 	.word	0x20002f0c
    1058:	2000300c 	.word	0x2000300c
    105c:	00000aa1 	.word	0x00000aa1
    1060:	20002f84 	.word	0x20002f84
    1064:	00000e4d 	.word	0x00000e4d
    1068:	00000211 	.word	0x00000211

0000106c <vTaskDelay>:
	{
    106c:	b510      	push	{r4, lr}
    106e:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
    1070:	d00f      	beq.n	1092 <vTaskDelay+0x26>
			configASSERT( uxSchedulerSuspended == 0 );
    1072:	4b09      	ldr	r3, [pc, #36]	; (1098 <vTaskDelay+0x2c>)
    1074:	681b      	ldr	r3, [r3, #0]
    1076:	2b00      	cmp	r3, #0
    1078:	d001      	beq.n	107e <vTaskDelay+0x12>
    107a:	b672      	cpsid	i
    107c:	e7fe      	b.n	107c <vTaskDelay+0x10>
			vTaskSuspendAll();
    107e:	4b07      	ldr	r3, [pc, #28]	; (109c <vTaskDelay+0x30>)
    1080:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    1082:	2100      	movs	r1, #0
    1084:	0020      	movs	r0, r4
    1086:	4b06      	ldr	r3, [pc, #24]	; (10a0 <vTaskDelay+0x34>)
    1088:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
    108a:	4b06      	ldr	r3, [pc, #24]	; (10a4 <vTaskDelay+0x38>)
    108c:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
    108e:	2800      	cmp	r0, #0
    1090:	d101      	bne.n	1096 <vTaskDelay+0x2a>
			portYIELD_WITHIN_API();
    1092:	4b05      	ldr	r3, [pc, #20]	; (10a8 <vTaskDelay+0x3c>)
    1094:	4798      	blx	r3
	}
    1096:	bd10      	pop	{r4, pc}
    1098:	20002f88 	.word	0x20002f88
    109c:	00000e31 	.word	0x00000e31
    10a0:	00000b4d 	.word	0x00000b4d
    10a4:	00000f6d 	.word	0x00000f6d
    10a8:	00000211 	.word	0x00000211

000010ac <vTaskSwitchContext>:
{
    10ac:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    10ae:	4b28      	ldr	r3, [pc, #160]	; (1150 <vTaskSwitchContext+0xa4>)
    10b0:	681b      	ldr	r3, [r3, #0]
    10b2:	2b00      	cmp	r3, #0
    10b4:	d125      	bne.n	1102 <vTaskSwitchContext+0x56>
		xYieldPending = pdFALSE;
    10b6:	2200      	movs	r2, #0
    10b8:	4b26      	ldr	r3, [pc, #152]	; (1154 <vTaskSwitchContext+0xa8>)
    10ba:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
    10bc:	4b26      	ldr	r3, [pc, #152]	; (1158 <vTaskSwitchContext+0xac>)
    10be:	681a      	ldr	r2, [r3, #0]
    10c0:	681b      	ldr	r3, [r3, #0]
    10c2:	6812      	ldr	r2, [r2, #0]
    10c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    10c6:	429a      	cmp	r2, r3
    10c8:	d805      	bhi.n	10d6 <vTaskSwitchContext+0x2a>
    10ca:	4b23      	ldr	r3, [pc, #140]	; (1158 <vTaskSwitchContext+0xac>)
    10cc:	6818      	ldr	r0, [r3, #0]
    10ce:	6819      	ldr	r1, [r3, #0]
    10d0:	3134      	adds	r1, #52	; 0x34
    10d2:	4b22      	ldr	r3, [pc, #136]	; (115c <vTaskSwitchContext+0xb0>)
    10d4:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
    10d6:	4b22      	ldr	r3, [pc, #136]	; (1160 <vTaskSwitchContext+0xb4>)
    10d8:	681b      	ldr	r3, [r3, #0]
    10da:	009a      	lsls	r2, r3, #2
    10dc:	18d2      	adds	r2, r2, r3
    10de:	0092      	lsls	r2, r2, #2
    10e0:	4920      	ldr	r1, [pc, #128]	; (1164 <vTaskSwitchContext+0xb8>)
    10e2:	5852      	ldr	r2, [r2, r1]
    10e4:	2a00      	cmp	r2, #0
    10e6:	d110      	bne.n	110a <vTaskSwitchContext+0x5e>
    10e8:	2b00      	cmp	r3, #0
    10ea:	d008      	beq.n	10fe <vTaskSwitchContext+0x52>
    10ec:	3b01      	subs	r3, #1
    10ee:	009a      	lsls	r2, r3, #2
    10f0:	18d2      	adds	r2, r2, r3
    10f2:	0092      	lsls	r2, r2, #2
    10f4:	5852      	ldr	r2, [r2, r1]
    10f6:	2a00      	cmp	r2, #0
    10f8:	d107      	bne.n	110a <vTaskSwitchContext+0x5e>
    10fa:	2b00      	cmp	r3, #0
    10fc:	d1f6      	bne.n	10ec <vTaskSwitchContext+0x40>
    10fe:	b672      	cpsid	i
    1100:	e7fe      	b.n	1100 <vTaskSwitchContext+0x54>
		xYieldPending = pdTRUE;
    1102:	2201      	movs	r2, #1
    1104:	4b13      	ldr	r3, [pc, #76]	; (1154 <vTaskSwitchContext+0xa8>)
    1106:	601a      	str	r2, [r3, #0]
}
    1108:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
    110a:	4816      	ldr	r0, [pc, #88]	; (1164 <vTaskSwitchContext+0xb8>)
    110c:	009a      	lsls	r2, r3, #2
    110e:	18d1      	adds	r1, r2, r3
    1110:	0089      	lsls	r1, r1, #2
    1112:	1841      	adds	r1, r0, r1
    1114:	684c      	ldr	r4, [r1, #4]
    1116:	6864      	ldr	r4, [r4, #4]
    1118:	604c      	str	r4, [r1, #4]
    111a:	18d2      	adds	r2, r2, r3
    111c:	0092      	lsls	r2, r2, #2
    111e:	3208      	adds	r2, #8
    1120:	1882      	adds	r2, r0, r2
    1122:	4294      	cmp	r4, r2
    1124:	d00b      	beq.n	113e <vTaskSwitchContext+0x92>
    1126:	009a      	lsls	r2, r3, #2
    1128:	18d2      	adds	r2, r2, r3
    112a:	0092      	lsls	r2, r2, #2
    112c:	490d      	ldr	r1, [pc, #52]	; (1164 <vTaskSwitchContext+0xb8>)
    112e:	188a      	adds	r2, r1, r2
    1130:	6852      	ldr	r2, [r2, #4]
    1132:	68d1      	ldr	r1, [r2, #12]
    1134:	4a08      	ldr	r2, [pc, #32]	; (1158 <vTaskSwitchContext+0xac>)
    1136:	6011      	str	r1, [r2, #0]
    1138:	4a09      	ldr	r2, [pc, #36]	; (1160 <vTaskSwitchContext+0xb4>)
    113a:	6013      	str	r3, [r2, #0]
}
    113c:	e7e4      	b.n	1108 <vTaskSwitchContext+0x5c>
		taskSELECT_HIGHEST_PRIORITY_TASK();
    113e:	6860      	ldr	r0, [r4, #4]
    1140:	009a      	lsls	r2, r3, #2
    1142:	18d2      	adds	r2, r2, r3
    1144:	0092      	lsls	r2, r2, #2
    1146:	4907      	ldr	r1, [pc, #28]	; (1164 <vTaskSwitchContext+0xb8>)
    1148:	188a      	adds	r2, r1, r2
    114a:	6050      	str	r0, [r2, #4]
    114c:	e7eb      	b.n	1126 <vTaskSwitchContext+0x7a>
    114e:	46c0      	nop			; (mov r8, r8)
    1150:	20002f88 	.word	0x20002f88
    1154:	2000300c 	.word	0x2000300c
    1158:	20002f0c 	.word	0x20002f0c
    115c:	00002139 	.word	0x00002139
    1160:	20002f90 	.word	0x20002f90
    1164:	20002f18 	.word	0x20002f18

00001168 <vTaskPlaceOnEventList>:
{
    1168:	b510      	push	{r4, lr}
    116a:	000c      	movs	r4, r1
	configASSERT( pxEventList );
    116c:	2800      	cmp	r0, #0
    116e:	d101      	bne.n	1174 <vTaskPlaceOnEventList+0xc>
    1170:	b672      	cpsid	i
    1172:	e7fe      	b.n	1172 <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1174:	4b04      	ldr	r3, [pc, #16]	; (1188 <vTaskPlaceOnEventList+0x20>)
    1176:	6819      	ldr	r1, [r3, #0]
    1178:	3118      	adds	r1, #24
    117a:	4b04      	ldr	r3, [pc, #16]	; (118c <vTaskPlaceOnEventList+0x24>)
    117c:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    117e:	2101      	movs	r1, #1
    1180:	0020      	movs	r0, r4
    1182:	4b03      	ldr	r3, [pc, #12]	; (1190 <vTaskPlaceOnEventList+0x28>)
    1184:	4798      	blx	r3
}
    1186:	bd10      	pop	{r4, pc}
    1188:	20002f0c 	.word	0x20002f0c
    118c:	0000039b 	.word	0x0000039b
    1190:	00000b4d 	.word	0x00000b4d

00001194 <vTaskPlaceOnEventListRestricted>:
	{
    1194:	b570      	push	{r4, r5, r6, lr}
    1196:	000c      	movs	r4, r1
    1198:	0015      	movs	r5, r2
		configASSERT( pxEventList );
    119a:	2800      	cmp	r0, #0
    119c:	d00d      	beq.n	11ba <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    119e:	4b08      	ldr	r3, [pc, #32]	; (11c0 <vTaskPlaceOnEventListRestricted+0x2c>)
    11a0:	6819      	ldr	r1, [r3, #0]
    11a2:	3118      	adds	r1, #24
    11a4:	4b07      	ldr	r3, [pc, #28]	; (11c4 <vTaskPlaceOnEventListRestricted+0x30>)
    11a6:	4798      	blx	r3
		if( xWaitIndefinitely != pdFALSE )
    11a8:	2d00      	cmp	r5, #0
    11aa:	d001      	beq.n	11b0 <vTaskPlaceOnEventListRestricted+0x1c>
			xTicksToWait = portMAX_DELAY;
    11ac:	2401      	movs	r4, #1
    11ae:	4264      	negs	r4, r4
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    11b0:	0029      	movs	r1, r5
    11b2:	0020      	movs	r0, r4
    11b4:	4b04      	ldr	r3, [pc, #16]	; (11c8 <vTaskPlaceOnEventListRestricted+0x34>)
    11b6:	4798      	blx	r3
	}
    11b8:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxEventList );
    11ba:	b672      	cpsid	i
    11bc:	e7fe      	b.n	11bc <vTaskPlaceOnEventListRestricted+0x28>
    11be:	46c0      	nop			; (mov r8, r8)
    11c0:	20002f0c 	.word	0x20002f0c
    11c4:	00000383 	.word	0x00000383
    11c8:	00000b4d 	.word	0x00000b4d

000011cc <xTaskRemoveFromEventList>:
{
    11cc:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    11ce:	68c3      	ldr	r3, [r0, #12]
    11d0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
    11d2:	2c00      	cmp	r4, #0
    11d4:	d027      	beq.n	1226 <xTaskRemoveFromEventList+0x5a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    11d6:	0025      	movs	r5, r4
    11d8:	3518      	adds	r5, #24
    11da:	0028      	movs	r0, r5
    11dc:	4b15      	ldr	r3, [pc, #84]	; (1234 <xTaskRemoveFromEventList+0x68>)
    11de:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    11e0:	4b15      	ldr	r3, [pc, #84]	; (1238 <xTaskRemoveFromEventList+0x6c>)
    11e2:	681b      	ldr	r3, [r3, #0]
    11e4:	2b00      	cmp	r3, #0
    11e6:	d120      	bne.n	122a <xTaskRemoveFromEventList+0x5e>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    11e8:	1d25      	adds	r5, r4, #4
    11ea:	0028      	movs	r0, r5
    11ec:	4b11      	ldr	r3, [pc, #68]	; (1234 <xTaskRemoveFromEventList+0x68>)
    11ee:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    11f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    11f2:	4a12      	ldr	r2, [pc, #72]	; (123c <xTaskRemoveFromEventList+0x70>)
    11f4:	6812      	ldr	r2, [r2, #0]
    11f6:	4293      	cmp	r3, r2
    11f8:	d901      	bls.n	11fe <xTaskRemoveFromEventList+0x32>
    11fa:	4a10      	ldr	r2, [pc, #64]	; (123c <xTaskRemoveFromEventList+0x70>)
    11fc:	6013      	str	r3, [r2, #0]
    11fe:	0098      	lsls	r0, r3, #2
    1200:	18c0      	adds	r0, r0, r3
    1202:	0080      	lsls	r0, r0, #2
    1204:	4b0e      	ldr	r3, [pc, #56]	; (1240 <xTaskRemoveFromEventList+0x74>)
    1206:	1818      	adds	r0, r3, r0
    1208:	0029      	movs	r1, r5
    120a:	4b0e      	ldr	r3, [pc, #56]	; (1244 <xTaskRemoveFromEventList+0x78>)
    120c:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    120e:	4b0e      	ldr	r3, [pc, #56]	; (1248 <xTaskRemoveFromEventList+0x7c>)
    1210:	681b      	ldr	r3, [r3, #0]
    1212:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
    1216:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    1218:	429a      	cmp	r2, r3
    121a:	d903      	bls.n	1224 <xTaskRemoveFromEventList+0x58>
		xYieldPending = pdTRUE;
    121c:	2201      	movs	r2, #1
    121e:	4b0b      	ldr	r3, [pc, #44]	; (124c <xTaskRemoveFromEventList+0x80>)
    1220:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
    1222:	3001      	adds	r0, #1
}
    1224:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxUnblockedTCB );
    1226:	b672      	cpsid	i
    1228:	e7fe      	b.n	1228 <xTaskRemoveFromEventList+0x5c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    122a:	0029      	movs	r1, r5
    122c:	4808      	ldr	r0, [pc, #32]	; (1250 <xTaskRemoveFromEventList+0x84>)
    122e:	4b05      	ldr	r3, [pc, #20]	; (1244 <xTaskRemoveFromEventList+0x78>)
    1230:	4798      	blx	r3
    1232:	e7ec      	b.n	120e <xTaskRemoveFromEventList+0x42>
    1234:	000003c9 	.word	0x000003c9
    1238:	20002f88 	.word	0x20002f88
    123c:	20002f90 	.word	0x20002f90
    1240:	20002f18 	.word	0x20002f18
    1244:	00000383 	.word	0x00000383
    1248:	20002f0c 	.word	0x20002f0c
    124c:	2000300c 	.word	0x2000300c
    1250:	20002fc8 	.word	0x20002fc8

00001254 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    1254:	4b03      	ldr	r3, [pc, #12]	; (1264 <vTaskInternalSetTimeOutState+0x10>)
    1256:	681b      	ldr	r3, [r3, #0]
    1258:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    125a:	4b03      	ldr	r3, [pc, #12]	; (1268 <vTaskInternalSetTimeOutState+0x14>)
    125c:	681b      	ldr	r3, [r3, #0]
    125e:	6043      	str	r3, [r0, #4]
}
    1260:	4770      	bx	lr
    1262:	46c0      	nop			; (mov r8, r8)
    1264:	20002fc4 	.word	0x20002fc4
    1268:	20003008 	.word	0x20003008

0000126c <xTaskCheckForTimeOut>:
{
    126c:	b570      	push	{r4, r5, r6, lr}
    126e:	0006      	movs	r6, r0
    1270:	000d      	movs	r5, r1
	configASSERT( pxTimeOut );
    1272:	2800      	cmp	r0, #0
    1274:	d01b      	beq.n	12ae <xTaskCheckForTimeOut+0x42>
	configASSERT( pxTicksToWait );
    1276:	2900      	cmp	r1, #0
    1278:	d01b      	beq.n	12b2 <xTaskCheckForTimeOut+0x46>
	taskENTER_CRITICAL();
    127a:	4b13      	ldr	r3, [pc, #76]	; (12c8 <xTaskCheckForTimeOut+0x5c>)
    127c:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    127e:	4b13      	ldr	r3, [pc, #76]	; (12cc <xTaskCheckForTimeOut+0x60>)
    1280:	681a      	ldr	r2, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    1282:	6871      	ldr	r1, [r6, #4]
			if( *pxTicksToWait == portMAX_DELAY )
    1284:	682b      	ldr	r3, [r5, #0]
    1286:	1c58      	adds	r0, r3, #1
    1288:	d01c      	beq.n	12c4 <xTaskCheckForTimeOut+0x58>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    128a:	4811      	ldr	r0, [pc, #68]	; (12d0 <xTaskCheckForTimeOut+0x64>)
    128c:	6800      	ldr	r0, [r0, #0]
    128e:	6834      	ldr	r4, [r6, #0]
    1290:	4284      	cmp	r4, r0
    1292:	d002      	beq.n	129a <xTaskCheckForTimeOut+0x2e>
			xReturn = pdTRUE;
    1294:	2401      	movs	r4, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    1296:	428a      	cmp	r2, r1
    1298:	d205      	bcs.n	12a6 <xTaskCheckForTimeOut+0x3a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    129a:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    129c:	429a      	cmp	r2, r3
    129e:	d30a      	bcc.n	12b6 <xTaskCheckForTimeOut+0x4a>
			*pxTicksToWait = 0;
    12a0:	2300      	movs	r3, #0
    12a2:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
    12a4:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
    12a6:	4b0b      	ldr	r3, [pc, #44]	; (12d4 <xTaskCheckForTimeOut+0x68>)
    12a8:	4798      	blx	r3
}
    12aa:	0020      	movs	r0, r4
    12ac:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxTimeOut );
    12ae:	b672      	cpsid	i
    12b0:	e7fe      	b.n	12b0 <xTaskCheckForTimeOut+0x44>
	configASSERT( pxTicksToWait );
    12b2:	b672      	cpsid	i
    12b4:	e7fe      	b.n	12b4 <xTaskCheckForTimeOut+0x48>
			*pxTicksToWait -= xElapsedTime;
    12b6:	1a9b      	subs	r3, r3, r2
    12b8:	602b      	str	r3, [r5, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
    12ba:	0030      	movs	r0, r6
    12bc:	4b06      	ldr	r3, [pc, #24]	; (12d8 <xTaskCheckForTimeOut+0x6c>)
    12be:	4798      	blx	r3
			xReturn = pdFALSE;
    12c0:	2400      	movs	r4, #0
    12c2:	e7f0      	b.n	12a6 <xTaskCheckForTimeOut+0x3a>
				xReturn = pdFALSE;
    12c4:	2400      	movs	r4, #0
    12c6:	e7ee      	b.n	12a6 <xTaskCheckForTimeOut+0x3a>
    12c8:	00000229 	.word	0x00000229
    12cc:	20003008 	.word	0x20003008
    12d0:	20002fc4 	.word	0x20002fc4
    12d4:	00000241 	.word	0x00000241
    12d8:	00001255 	.word	0x00001255

000012dc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    12dc:	2201      	movs	r2, #1
    12de:	4b01      	ldr	r3, [pc, #4]	; (12e4 <vTaskMissedYield+0x8>)
    12e0:	601a      	str	r2, [r3, #0]
}
    12e2:	4770      	bx	lr
    12e4:	2000300c 	.word	0x2000300c

000012e8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
    12e8:	4b05      	ldr	r3, [pc, #20]	; (1300 <xTaskGetSchedulerState+0x18>)
    12ea:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
    12ec:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
    12ee:	2b00      	cmp	r3, #0
    12f0:	d004      	beq.n	12fc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    12f2:	4b04      	ldr	r3, [pc, #16]	; (1304 <xTaskGetSchedulerState+0x1c>)
    12f4:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
    12f6:	4243      	negs	r3, r0
    12f8:	4158      	adcs	r0, r3
    12fa:	0040      	lsls	r0, r0, #1
	}
    12fc:	4770      	bx	lr
    12fe:	46c0      	nop			; (mov r8, r8)
    1300:	20002fdc 	.word	0x20002fdc
    1304:	20002f88 	.word	0x20002f88

00001308 <xTaskPriorityDisinherit>:
	{
    1308:	b570      	push	{r4, r5, r6, lr}
    130a:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
    130c:	d02c      	beq.n	1368 <xTaskPriorityDisinherit+0x60>
			configASSERT( pxTCB == pxCurrentTCB );
    130e:	4b18      	ldr	r3, [pc, #96]	; (1370 <xTaskPriorityDisinherit+0x68>)
    1310:	681b      	ldr	r3, [r3, #0]
    1312:	4298      	cmp	r0, r3
    1314:	d001      	beq.n	131a <xTaskPriorityDisinherit+0x12>
    1316:	b672      	cpsid	i
    1318:	e7fe      	b.n	1318 <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
    131a:	6c83      	ldr	r3, [r0, #72]	; 0x48
    131c:	2b00      	cmp	r3, #0
    131e:	d101      	bne.n	1324 <xTaskPriorityDisinherit+0x1c>
    1320:	b672      	cpsid	i
    1322:	e7fe      	b.n	1322 <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
    1324:	3b01      	subs	r3, #1
    1326:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    1328:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    132a:	6c41      	ldr	r1, [r0, #68]	; 0x44
    132c:	428a      	cmp	r2, r1
    132e:	d01d      	beq.n	136c <xTaskPriorityDisinherit+0x64>
	BaseType_t xReturn = pdFALSE;
    1330:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    1332:	2b00      	cmp	r3, #0
    1334:	d117      	bne.n	1366 <xTaskPriorityDisinherit+0x5e>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1336:	1d25      	adds	r5, r4, #4
    1338:	0028      	movs	r0, r5
    133a:	4b0e      	ldr	r3, [pc, #56]	; (1374 <xTaskPriorityDisinherit+0x6c>)
    133c:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    133e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1340:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1342:	2205      	movs	r2, #5
    1344:	1ad2      	subs	r2, r2, r3
    1346:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
    1348:	4a0b      	ldr	r2, [pc, #44]	; (1378 <xTaskPriorityDisinherit+0x70>)
    134a:	6812      	ldr	r2, [r2, #0]
    134c:	4293      	cmp	r3, r2
    134e:	d901      	bls.n	1354 <xTaskPriorityDisinherit+0x4c>
    1350:	4a09      	ldr	r2, [pc, #36]	; (1378 <xTaskPriorityDisinherit+0x70>)
    1352:	6013      	str	r3, [r2, #0]
    1354:	009a      	lsls	r2, r3, #2
    1356:	18d3      	adds	r3, r2, r3
    1358:	009b      	lsls	r3, r3, #2
    135a:	4808      	ldr	r0, [pc, #32]	; (137c <xTaskPriorityDisinherit+0x74>)
    135c:	18c0      	adds	r0, r0, r3
    135e:	0029      	movs	r1, r5
    1360:	4b07      	ldr	r3, [pc, #28]	; (1380 <xTaskPriorityDisinherit+0x78>)
    1362:	4798      	blx	r3
					xReturn = pdTRUE;
    1364:	2001      	movs	r0, #1
	}
    1366:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
    1368:	2000      	movs	r0, #0
    136a:	e7fc      	b.n	1366 <xTaskPriorityDisinherit+0x5e>
    136c:	2000      	movs	r0, #0
    136e:	e7fa      	b.n	1366 <xTaskPriorityDisinherit+0x5e>
    1370:	20002f0c 	.word	0x20002f0c
    1374:	000003c9 	.word	0x000003c9
    1378:	20002f90 	.word	0x20002f90
    137c:	20002f18 	.word	0x20002f18
    1380:	00000383 	.word	0x00000383

00001384 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    1384:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    1386:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    1388:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
    138a:	4291      	cmp	r1, r2
    138c:	d80b      	bhi.n	13a6 <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    138e:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    1390:	2401      	movs	r4, #1
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1392:	6983      	ldr	r3, [r0, #24]
    1394:	429a      	cmp	r2, r3
    1396:	d211      	bcs.n	13bc <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    1398:	1d01      	adds	r1, r0, #4
    139a:	4b09      	ldr	r3, [pc, #36]	; (13c0 <prvInsertTimerInActiveList+0x3c>)
    139c:	6818      	ldr	r0, [r3, #0]
    139e:	4b09      	ldr	r3, [pc, #36]	; (13c4 <prvInsertTimerInActiveList+0x40>)
    13a0:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
    13a2:	2400      	movs	r4, #0
    13a4:	e00a      	b.n	13bc <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    13a6:	429a      	cmp	r2, r3
    13a8:	d202      	bcs.n	13b0 <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    13aa:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    13ac:	4299      	cmp	r1, r3
    13ae:	d205      	bcs.n	13bc <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    13b0:	1d01      	adds	r1, r0, #4
    13b2:	4b05      	ldr	r3, [pc, #20]	; (13c8 <prvInsertTimerInActiveList+0x44>)
    13b4:	6818      	ldr	r0, [r3, #0]
    13b6:	4b03      	ldr	r3, [pc, #12]	; (13c4 <prvInsertTimerInActiveList+0x40>)
    13b8:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
    13ba:	2400      	movs	r4, #0
		}
	}

	return xProcessTimerNow;
}
    13bc:	0020      	movs	r0, r4
    13be:	bd10      	pop	{r4, pc}
    13c0:	20003014 	.word	0x20003014
    13c4:	0000039b 	.word	0x0000039b
    13c8:	20003010 	.word	0x20003010

000013cc <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    13cc:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    13ce:	4b0e      	ldr	r3, [pc, #56]	; (1408 <prvCheckForValidListAndQueue+0x3c>)
    13d0:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    13d2:	4b0e      	ldr	r3, [pc, #56]	; (140c <prvCheckForValidListAndQueue+0x40>)
    13d4:	681b      	ldr	r3, [r3, #0]
    13d6:	2b00      	cmp	r3, #0
    13d8:	d002      	beq.n	13e0 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    13da:	4b0d      	ldr	r3, [pc, #52]	; (1410 <prvCheckForValidListAndQueue+0x44>)
    13dc:	4798      	blx	r3
}
    13de:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
    13e0:	4d0c      	ldr	r5, [pc, #48]	; (1414 <prvCheckForValidListAndQueue+0x48>)
    13e2:	0028      	movs	r0, r5
    13e4:	4e0c      	ldr	r6, [pc, #48]	; (1418 <prvCheckForValidListAndQueue+0x4c>)
    13e6:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
    13e8:	4c0c      	ldr	r4, [pc, #48]	; (141c <prvCheckForValidListAndQueue+0x50>)
    13ea:	0020      	movs	r0, r4
    13ec:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
    13ee:	4b0c      	ldr	r3, [pc, #48]	; (1420 <prvCheckForValidListAndQueue+0x54>)
    13f0:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    13f2:	4b0c      	ldr	r3, [pc, #48]	; (1424 <prvCheckForValidListAndQueue+0x58>)
    13f4:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    13f6:	2200      	movs	r2, #0
    13f8:	210c      	movs	r1, #12
    13fa:	2005      	movs	r0, #5
    13fc:	4b0a      	ldr	r3, [pc, #40]	; (1428 <prvCheckForValidListAndQueue+0x5c>)
    13fe:	4798      	blx	r3
    1400:	4b02      	ldr	r3, [pc, #8]	; (140c <prvCheckForValidListAndQueue+0x40>)
    1402:	6018      	str	r0, [r3, #0]
    1404:	e7e9      	b.n	13da <prvCheckForValidListAndQueue+0xe>
    1406:	46c0      	nop			; (mov r8, r8)
    1408:	00000229 	.word	0x00000229
    140c:	20003044 	.word	0x20003044
    1410:	00000241 	.word	0x00000241
    1414:	20003018 	.word	0x20003018
    1418:	00000367 	.word	0x00000367
    141c:	2000302c 	.word	0x2000302c
    1420:	20003010 	.word	0x20003010
    1424:	20003014 	.word	0x20003014
    1428:	00000645 	.word	0x00000645

0000142c <xTimerCreateTimerTask>:
{
    142c:	b510      	push	{r4, lr}
    142e:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
    1430:	4b0a      	ldr	r3, [pc, #40]	; (145c <xTimerCreateTimerTask+0x30>)
    1432:	4798      	blx	r3
	if( xTimerQueue != NULL )
    1434:	4b0a      	ldr	r3, [pc, #40]	; (1460 <xTimerCreateTimerTask+0x34>)
    1436:	681b      	ldr	r3, [r3, #0]
    1438:	2b00      	cmp	r3, #0
    143a:	d00d      	beq.n	1458 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate(	prvTimerTask,
    143c:	4b09      	ldr	r3, [pc, #36]	; (1464 <xTimerCreateTimerTask+0x38>)
    143e:	9301      	str	r3, [sp, #4]
    1440:	2302      	movs	r3, #2
    1442:	9300      	str	r3, [sp, #0]
    1444:	2300      	movs	r3, #0
    1446:	2280      	movs	r2, #128	; 0x80
    1448:	4907      	ldr	r1, [pc, #28]	; (1468 <xTimerCreateTimerTask+0x3c>)
    144a:	4808      	ldr	r0, [pc, #32]	; (146c <xTimerCreateTimerTask+0x40>)
    144c:	4c08      	ldr	r4, [pc, #32]	; (1470 <xTimerCreateTimerTask+0x44>)
    144e:	47a0      	blx	r4
	configASSERT( xReturn );
    1450:	2800      	cmp	r0, #0
    1452:	d001      	beq.n	1458 <xTimerCreateTimerTask+0x2c>
}
    1454:	b002      	add	sp, #8
    1456:	bd10      	pop	{r4, pc}
	configASSERT( xReturn );
    1458:	b672      	cpsid	i
    145a:	e7fe      	b.n	145a <xTimerCreateTimerTask+0x2e>
    145c:	000013cd 	.word	0x000013cd
    1460:	20003044 	.word	0x20003044
    1464:	20003048 	.word	0x20003048
    1468:	000022f0 	.word	0x000022f0
    146c:	00001599 	.word	0x00001599
    1470:	00000bd5 	.word	0x00000bd5

00001474 <xTimerGenericCommand>:
{
    1474:	b530      	push	{r4, r5, lr}
    1476:	b085      	sub	sp, #20
    1478:	0004      	movs	r4, r0
    147a:	001d      	movs	r5, r3
	configASSERT( xTimer );
    147c:	2800      	cmp	r0, #0
    147e:	d014      	beq.n	14aa <xTimerGenericCommand+0x36>
	if( xTimerQueue != NULL )
    1480:	4b13      	ldr	r3, [pc, #76]	; (14d0 <xTimerGenericCommand+0x5c>)
    1482:	6818      	ldr	r0, [r3, #0]
    1484:	2800      	cmp	r0, #0
    1486:	d021      	beq.n	14cc <xTimerGenericCommand+0x58>
		xMessage.xMessageID = xCommandID;
    1488:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    148a:	9202      	str	r2, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    148c:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    148e:	2905      	cmp	r1, #5
    1490:	dc15      	bgt.n	14be <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    1492:	4b10      	ldr	r3, [pc, #64]	; (14d4 <xTimerGenericCommand+0x60>)
    1494:	4798      	blx	r3
    1496:	2802      	cmp	r0, #2
    1498:	d009      	beq.n	14ae <xTimerGenericCommand+0x3a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    149a:	4b0d      	ldr	r3, [pc, #52]	; (14d0 <xTimerGenericCommand+0x5c>)
    149c:	6818      	ldr	r0, [r3, #0]
    149e:	2300      	movs	r3, #0
    14a0:	2200      	movs	r2, #0
    14a2:	a901      	add	r1, sp, #4
    14a4:	4c0c      	ldr	r4, [pc, #48]	; (14d8 <xTimerGenericCommand+0x64>)
    14a6:	47a0      	blx	r4
    14a8:	e00e      	b.n	14c8 <xTimerGenericCommand+0x54>
	configASSERT( xTimer );
    14aa:	b672      	cpsid	i
    14ac:	e7fe      	b.n	14ac <xTimerGenericCommand+0x38>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    14ae:	4b08      	ldr	r3, [pc, #32]	; (14d0 <xTimerGenericCommand+0x5c>)
    14b0:	6818      	ldr	r0, [r3, #0]
    14b2:	2300      	movs	r3, #0
    14b4:	9a08      	ldr	r2, [sp, #32]
    14b6:	a901      	add	r1, sp, #4
    14b8:	4c07      	ldr	r4, [pc, #28]	; (14d8 <xTimerGenericCommand+0x64>)
    14ba:	47a0      	blx	r4
    14bc:	e004      	b.n	14c8 <xTimerGenericCommand+0x54>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    14be:	2300      	movs	r3, #0
    14c0:	002a      	movs	r2, r5
    14c2:	a901      	add	r1, sp, #4
    14c4:	4c05      	ldr	r4, [pc, #20]	; (14dc <xTimerGenericCommand+0x68>)
    14c6:	47a0      	blx	r4
}
    14c8:	b005      	add	sp, #20
    14ca:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
    14cc:	2000      	movs	r0, #0
	return xReturn;
    14ce:	e7fb      	b.n	14c8 <xTimerGenericCommand+0x54>
    14d0:	20003044 	.word	0x20003044
    14d4:	000012e9 	.word	0x000012e9
    14d8:	00000691 	.word	0x00000691
    14dc:	0000081d 	.word	0x0000081d

000014e0 <prvSampleTimeNow>:
{
    14e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    14e2:	46d6      	mov	lr, sl
    14e4:	464f      	mov	r7, r9
    14e6:	4646      	mov	r6, r8
    14e8:	b5c0      	push	{r6, r7, lr}
    14ea:	b082      	sub	sp, #8
    14ec:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
    14ee:	4b23      	ldr	r3, [pc, #140]	; (157c <prvSampleTimeNow+0x9c>)
    14f0:	4798      	blx	r3
    14f2:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
    14f4:	4b22      	ldr	r3, [pc, #136]	; (1580 <prvSampleTimeNow+0xa0>)
    14f6:	681b      	ldr	r3, [r3, #0]
    14f8:	4298      	cmp	r0, r3
    14fa:	d317      	bcc.n	152c <prvSampleTimeNow+0x4c>
		*pxTimerListsWereSwitched = pdFALSE;
    14fc:	2300      	movs	r3, #0
    14fe:	4642      	mov	r2, r8
    1500:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
    1502:	4b1f      	ldr	r3, [pc, #124]	; (1580 <prvSampleTimeNow+0xa0>)
    1504:	4652      	mov	r2, sl
    1506:	601a      	str	r2, [r3, #0]
}
    1508:	4650      	mov	r0, sl
    150a:	b002      	add	sp, #8
    150c:	bc1c      	pop	{r2, r3, r4}
    150e:	4690      	mov	r8, r2
    1510:	4699      	mov	r9, r3
    1512:	46a2      	mov	sl, r4
    1514:	bdf0      	pop	{r4, r5, r6, r7, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    1516:	2300      	movs	r3, #0
    1518:	9300      	str	r3, [sp, #0]
    151a:	003a      	movs	r2, r7
    151c:	2100      	movs	r1, #0
    151e:	0020      	movs	r0, r4
    1520:	4c18      	ldr	r4, [pc, #96]	; (1584 <prvSampleTimeNow+0xa4>)
    1522:	47a0      	blx	r4
				configASSERT( xResult );
    1524:	2800      	cmp	r0, #0
    1526:	d104      	bne.n	1532 <prvSampleTimeNow+0x52>
    1528:	b672      	cpsid	i
    152a:	e7fe      	b.n	152a <prvSampleTimeNow+0x4a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    152c:	4d16      	ldr	r5, [pc, #88]	; (1588 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    152e:	4b17      	ldr	r3, [pc, #92]	; (158c <prvSampleTimeNow+0xac>)
    1530:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    1532:	682b      	ldr	r3, [r5, #0]
    1534:	681a      	ldr	r2, [r3, #0]
    1536:	2a00      	cmp	r2, #0
    1538:	d017      	beq.n	156a <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    153a:	68db      	ldr	r3, [r3, #12]
    153c:	681f      	ldr	r7, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    153e:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1540:	1d26      	adds	r6, r4, #4
    1542:	0030      	movs	r0, r6
    1544:	47c8      	blx	r9
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    1546:	0020      	movs	r0, r4
    1548:	6a63      	ldr	r3, [r4, #36]	; 0x24
    154a:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    154c:	69e3      	ldr	r3, [r4, #28]
    154e:	2b01      	cmp	r3, #1
    1550:	d1ef      	bne.n	1532 <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    1552:	69a3      	ldr	r3, [r4, #24]
    1554:	18fb      	adds	r3, r7, r3
			if( xReloadTime > xNextExpireTime )
    1556:	429f      	cmp	r7, r3
    1558:	d2dd      	bcs.n	1516 <prvSampleTimeNow+0x36>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    155a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    155c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    155e:	4b0a      	ldr	r3, [pc, #40]	; (1588 <prvSampleTimeNow+0xa8>)
    1560:	6818      	ldr	r0, [r3, #0]
    1562:	0031      	movs	r1, r6
    1564:	4b0a      	ldr	r3, [pc, #40]	; (1590 <prvSampleTimeNow+0xb0>)
    1566:	4798      	blx	r3
    1568:	e7e3      	b.n	1532 <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
    156a:	4a0a      	ldr	r2, [pc, #40]	; (1594 <prvSampleTimeNow+0xb4>)
    156c:	4906      	ldr	r1, [pc, #24]	; (1588 <prvSampleTimeNow+0xa8>)
    156e:	6810      	ldr	r0, [r2, #0]
    1570:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
    1572:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
    1574:	2301      	movs	r3, #1
    1576:	4642      	mov	r2, r8
    1578:	6013      	str	r3, [r2, #0]
    157a:	e7c2      	b.n	1502 <prvSampleTimeNow+0x22>
    157c:	00000e41 	.word	0x00000e41
    1580:	20003040 	.word	0x20003040
    1584:	00001475 	.word	0x00001475
    1588:	20003010 	.word	0x20003010
    158c:	000003c9 	.word	0x000003c9
    1590:	0000039b 	.word	0x0000039b
    1594:	20003014 	.word	0x20003014

00001598 <prvTimerTask>:
{
    1598:	b5f0      	push	{r4, r5, r6, r7, lr}
    159a:	b089      	sub	sp, #36	; 0x24
		vApplicationDaemonTaskStartupHook();
    159c:	4b53      	ldr	r3, [pc, #332]	; (16ec <prvTimerTask+0x154>)
    159e:	4798      	blx	r3
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    15a0:	4f53      	ldr	r7, [pc, #332]	; (16f0 <prvTimerTask+0x158>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    15a2:	4b54      	ldr	r3, [pc, #336]	; (16f4 <prvTimerTask+0x15c>)
    15a4:	681b      	ldr	r3, [r3, #0]
    15a6:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    15a8:	2a00      	cmp	r2, #0
    15aa:	d00e      	beq.n	15ca <prvTimerTask+0x32>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    15ac:	68db      	ldr	r3, [r3, #12]
    15ae:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
    15b0:	4b51      	ldr	r3, [pc, #324]	; (16f8 <prvTimerTask+0x160>)
    15b2:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    15b4:	a805      	add	r0, sp, #20
    15b6:	4b51      	ldr	r3, [pc, #324]	; (16fc <prvTimerTask+0x164>)
    15b8:	4798      	blx	r3
    15ba:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
    15bc:	9b05      	ldr	r3, [sp, #20]
    15be:	2b00      	cmp	r3, #0
    15c0:	d15f      	bne.n	1682 <prvTimerTask+0xea>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    15c2:	4284      	cmp	r4, r0
    15c4:	d936      	bls.n	1634 <prvTimerTask+0x9c>
    15c6:	2200      	movs	r2, #0
    15c8:	e00f      	b.n	15ea <prvTimerTask+0x52>
	vTaskSuspendAll();
    15ca:	4b4b      	ldr	r3, [pc, #300]	; (16f8 <prvTimerTask+0x160>)
    15cc:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    15ce:	a805      	add	r0, sp, #20
    15d0:	4b4a      	ldr	r3, [pc, #296]	; (16fc <prvTimerTask+0x164>)
    15d2:	4798      	blx	r3
    15d4:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
    15d6:	9b05      	ldr	r3, [sp, #20]
    15d8:	2b00      	cmp	r3, #0
    15da:	d152      	bne.n	1682 <prvTimerTask+0xea>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    15dc:	4b48      	ldr	r3, [pc, #288]	; (1700 <prvTimerTask+0x168>)
    15de:	681b      	ldr	r3, [r3, #0]
    15e0:	681b      	ldr	r3, [r3, #0]
    15e2:	425a      	negs	r2, r3
    15e4:	415a      	adcs	r2, r3
    15e6:	b2d2      	uxtb	r2, r2
    15e8:	2400      	movs	r4, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    15ea:	1b61      	subs	r1, r4, r5
    15ec:	4b45      	ldr	r3, [pc, #276]	; (1704 <prvTimerTask+0x16c>)
    15ee:	6818      	ldr	r0, [r3, #0]
    15f0:	4b45      	ldr	r3, [pc, #276]	; (1708 <prvTimerTask+0x170>)
    15f2:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    15f4:	4b45      	ldr	r3, [pc, #276]	; (170c <prvTimerTask+0x174>)
    15f6:	4798      	blx	r3
    15f8:	2800      	cmp	r0, #0
    15fa:	d03f      	beq.n	167c <prvTimerTask+0xe4>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    15fc:	4d41      	ldr	r5, [pc, #260]	; (1704 <prvTimerTask+0x16c>)
    15fe:	4c44      	ldr	r4, [pc, #272]	; (1710 <prvTimerTask+0x178>)
    1600:	2200      	movs	r2, #0
    1602:	a905      	add	r1, sp, #20
    1604:	6828      	ldr	r0, [r5, #0]
    1606:	47a0      	blx	r4
    1608:	2800      	cmp	r0, #0
    160a:	d0ca      	beq.n	15a2 <prvTimerTask+0xa>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    160c:	9b05      	ldr	r3, [sp, #20]
    160e:	9303      	str	r3, [sp, #12]
    1610:	2b00      	cmp	r3, #0
    1612:	dbf5      	blt.n	1600 <prvTimerTask+0x68>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    1614:	9e07      	ldr	r6, [sp, #28]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    1616:	6973      	ldr	r3, [r6, #20]
    1618:	2b00      	cmp	r3, #0
    161a:	d001      	beq.n	1620 <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    161c:	1d30      	adds	r0, r6, #4
    161e:	47b8      	blx	r7
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    1620:	a804      	add	r0, sp, #16
    1622:	4b36      	ldr	r3, [pc, #216]	; (16fc <prvTimerTask+0x164>)
    1624:	4798      	blx	r3
			switch( xMessage.xMessageID )
    1626:	9b05      	ldr	r3, [sp, #20]
    1628:	2b09      	cmp	r3, #9
    162a:	d8e9      	bhi.n	1600 <prvTimerTask+0x68>
    162c:	009b      	lsls	r3, r3, #2
    162e:	4a39      	ldr	r2, [pc, #228]	; (1714 <prvTimerTask+0x17c>)
    1630:	58d3      	ldr	r3, [r2, r3]
    1632:	469f      	mov	pc, r3
				( void ) xTaskResumeAll();
    1634:	4b35      	ldr	r3, [pc, #212]	; (170c <prvTimerTask+0x174>)
    1636:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    1638:	4b2e      	ldr	r3, [pc, #184]	; (16f4 <prvTimerTask+0x15c>)
    163a:	681b      	ldr	r3, [r3, #0]
    163c:	68db      	ldr	r3, [r3, #12]
    163e:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1640:	1d30      	adds	r0, r6, #4
    1642:	4b2b      	ldr	r3, [pc, #172]	; (16f0 <prvTimerTask+0x158>)
    1644:	4798      	blx	r3
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    1646:	69f3      	ldr	r3, [r6, #28]
    1648:	2b01      	cmp	r3, #1
    164a:	d003      	beq.n	1654 <prvTimerTask+0xbc>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    164c:	6a73      	ldr	r3, [r6, #36]	; 0x24
    164e:	0030      	movs	r0, r6
    1650:	4798      	blx	r3
    1652:	e7d3      	b.n	15fc <prvTimerTask+0x64>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    1654:	69b3      	ldr	r3, [r6, #24]
    1656:	18e1      	adds	r1, r4, r3
    1658:	0023      	movs	r3, r4
    165a:	002a      	movs	r2, r5
    165c:	0030      	movs	r0, r6
    165e:	4d2e      	ldr	r5, [pc, #184]	; (1718 <prvTimerTask+0x180>)
    1660:	47a8      	blx	r5
    1662:	2800      	cmp	r0, #0
    1664:	d0f2      	beq.n	164c <prvTimerTask+0xb4>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    1666:	2300      	movs	r3, #0
    1668:	9300      	str	r3, [sp, #0]
    166a:	0022      	movs	r2, r4
    166c:	2100      	movs	r1, #0
    166e:	0030      	movs	r0, r6
    1670:	4c2a      	ldr	r4, [pc, #168]	; (171c <prvTimerTask+0x184>)
    1672:	47a0      	blx	r4
			configASSERT( xResult );
    1674:	2800      	cmp	r0, #0
    1676:	d1e9      	bne.n	164c <prvTimerTask+0xb4>
    1678:	b672      	cpsid	i
    167a:	e7fe      	b.n	167a <prvTimerTask+0xe2>
					portYIELD_WITHIN_API();
    167c:	4b28      	ldr	r3, [pc, #160]	; (1720 <prvTimerTask+0x188>)
    167e:	4798      	blx	r3
    1680:	e7bc      	b.n	15fc <prvTimerTask+0x64>
			( void ) xTaskResumeAll();
    1682:	4b22      	ldr	r3, [pc, #136]	; (170c <prvTimerTask+0x174>)
    1684:	4798      	blx	r3
    1686:	e7b9      	b.n	15fc <prvTimerTask+0x64>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    1688:	9b06      	ldr	r3, [sp, #24]
    168a:	69b2      	ldr	r2, [r6, #24]
    168c:	4694      	mov	ip, r2
    168e:	4463      	add	r3, ip
    1690:	0019      	movs	r1, r3
    1692:	9b06      	ldr	r3, [sp, #24]
    1694:	0002      	movs	r2, r0
    1696:	0030      	movs	r0, r6
    1698:	4c1f      	ldr	r4, [pc, #124]	; (1718 <prvTimerTask+0x180>)
    169a:	47a0      	blx	r4
    169c:	2800      	cmp	r0, #0
    169e:	d0ae      	beq.n	15fe <prvTimerTask+0x66>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    16a0:	0030      	movs	r0, r6
    16a2:	6a73      	ldr	r3, [r6, #36]	; 0x24
    16a4:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    16a6:	69f3      	ldr	r3, [r6, #28]
    16a8:	2b01      	cmp	r3, #1
    16aa:	d1a8      	bne.n	15fe <prvTimerTask+0x66>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    16ac:	9b06      	ldr	r3, [sp, #24]
    16ae:	69b1      	ldr	r1, [r6, #24]
    16b0:	468c      	mov	ip, r1
    16b2:	4463      	add	r3, ip
    16b4:	001a      	movs	r2, r3
    16b6:	2300      	movs	r3, #0
    16b8:	9300      	str	r3, [sp, #0]
    16ba:	2100      	movs	r1, #0
    16bc:	0030      	movs	r0, r6
    16be:	4c17      	ldr	r4, [pc, #92]	; (171c <prvTimerTask+0x184>)
    16c0:	47a0      	blx	r4
							configASSERT( xResult );
    16c2:	2800      	cmp	r0, #0
    16c4:	d19b      	bne.n	15fe <prvTimerTask+0x66>
    16c6:	b672      	cpsid	i
    16c8:	e7fe      	b.n	16c8 <prvTimerTask+0x130>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    16ca:	9906      	ldr	r1, [sp, #24]
    16cc:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    16ce:	2900      	cmp	r1, #0
    16d0:	d006      	beq.n	16e0 <prvTimerTask+0x148>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    16d2:	1841      	adds	r1, r0, r1
    16d4:	0003      	movs	r3, r0
    16d6:	0002      	movs	r2, r0
    16d8:	0030      	movs	r0, r6
    16da:	4c0f      	ldr	r4, [pc, #60]	; (1718 <prvTimerTask+0x180>)
    16dc:	47a0      	blx	r4
    16de:	e78e      	b.n	15fe <prvTimerTask+0x66>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    16e0:	b672      	cpsid	i
    16e2:	e7fe      	b.n	16e2 <prvTimerTask+0x14a>
						vPortFree( pxTimer );
    16e4:	0030      	movs	r0, r6
    16e6:	4b0f      	ldr	r3, [pc, #60]	; (1724 <prvTimerTask+0x18c>)
    16e8:	4798      	blx	r3
    16ea:	e788      	b.n	15fe <prvTimerTask+0x66>
    16ec:	00002135 	.word	0x00002135
    16f0:	000003c9 	.word	0x000003c9
    16f4:	20003010 	.word	0x20003010
    16f8:	00000e31 	.word	0x00000e31
    16fc:	000014e1 	.word	0x000014e1
    1700:	20003014 	.word	0x20003014
    1704:	20003044 	.word	0x20003044
    1708:	00000a41 	.word	0x00000a41
    170c:	00000f6d 	.word	0x00000f6d
    1710:	000008ed 	.word	0x000008ed
    1714:	000022c8 	.word	0x000022c8
    1718:	00001385 	.word	0x00001385
    171c:	00001475 	.word	0x00001475
    1720:	00000211 	.word	0x00000211
    1724:	0000035d 	.word	0x0000035d

00001728 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1728:	4b0c      	ldr	r3, [pc, #48]	; (175c <cpu_irq_enter_critical+0x34>)
    172a:	681b      	ldr	r3, [r3, #0]
    172c:	2b00      	cmp	r3, #0
    172e:	d106      	bne.n	173e <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1730:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1734:	2b00      	cmp	r3, #0
    1736:	d007      	beq.n	1748 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1738:	2200      	movs	r2, #0
    173a:	4b09      	ldr	r3, [pc, #36]	; (1760 <cpu_irq_enter_critical+0x38>)
    173c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    173e:	4a07      	ldr	r2, [pc, #28]	; (175c <cpu_irq_enter_critical+0x34>)
    1740:	6813      	ldr	r3, [r2, #0]
    1742:	3301      	adds	r3, #1
    1744:	6013      	str	r3, [r2, #0]
}
    1746:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1748:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    174a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    174e:	2200      	movs	r2, #0
    1750:	4b04      	ldr	r3, [pc, #16]	; (1764 <cpu_irq_enter_critical+0x3c>)
    1752:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1754:	3201      	adds	r2, #1
    1756:	4b02      	ldr	r3, [pc, #8]	; (1760 <cpu_irq_enter_critical+0x38>)
    1758:	701a      	strb	r2, [r3, #0]
    175a:	e7f0      	b.n	173e <cpu_irq_enter_critical+0x16>
    175c:	2000304c 	.word	0x2000304c
    1760:	20003050 	.word	0x20003050
    1764:	20000004 	.word	0x20000004

00001768 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1768:	4b08      	ldr	r3, [pc, #32]	; (178c <cpu_irq_leave_critical+0x24>)
    176a:	681a      	ldr	r2, [r3, #0]
    176c:	3a01      	subs	r2, #1
    176e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1770:	681b      	ldr	r3, [r3, #0]
    1772:	2b00      	cmp	r3, #0
    1774:	d109      	bne.n	178a <cpu_irq_leave_critical+0x22>
    1776:	4b06      	ldr	r3, [pc, #24]	; (1790 <cpu_irq_leave_critical+0x28>)
    1778:	781b      	ldrb	r3, [r3, #0]
    177a:	2b00      	cmp	r3, #0
    177c:	d005      	beq.n	178a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    177e:	2201      	movs	r2, #1
    1780:	4b04      	ldr	r3, [pc, #16]	; (1794 <cpu_irq_leave_critical+0x2c>)
    1782:	701a      	strb	r2, [r3, #0]
    1784:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1788:	b662      	cpsie	i
	}
}
    178a:	4770      	bx	lr
    178c:	2000304c 	.word	0x2000304c
    1790:	20003050 	.word	0x20003050
    1794:	20000004 	.word	0x20000004

00001798 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1798:	b5f0      	push	{r4, r5, r6, r7, lr}
    179a:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    179c:	ac01      	add	r4, sp, #4
    179e:	2501      	movs	r5, #1
    17a0:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    17a2:	2700      	movs	r7, #0
    17a4:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    17a6:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    17a8:	0021      	movs	r1, r4
    17aa:	2017      	movs	r0, #23
    17ac:	4e06      	ldr	r6, [pc, #24]	; (17c8 <system_board_init+0x30>)
    17ae:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    17b0:	2280      	movs	r2, #128	; 0x80
    17b2:	0412      	lsls	r2, r2, #16
    17b4:	4b05      	ldr	r3, [pc, #20]	; (17cc <system_board_init+0x34>)
    17b6:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    17b8:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    17ba:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    17bc:	0021      	movs	r1, r4
    17be:	2037      	movs	r0, #55	; 0x37
    17c0:	47b0      	blx	r6
}
    17c2:	b003      	add	sp, #12
    17c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17c6:	46c0      	nop			; (mov r8, r8)
    17c8:	000017d1 	.word	0x000017d1
    17cc:	41004400 	.word	0x41004400

000017d0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    17d0:	b500      	push	{lr}
    17d2:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    17d4:	ab01      	add	r3, sp, #4
    17d6:	2280      	movs	r2, #128	; 0x80
    17d8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    17da:	780a      	ldrb	r2, [r1, #0]
    17dc:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    17de:	784a      	ldrb	r2, [r1, #1]
    17e0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    17e2:	788a      	ldrb	r2, [r1, #2]
    17e4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    17e6:	0019      	movs	r1, r3
    17e8:	4b01      	ldr	r3, [pc, #4]	; (17f0 <port_pin_set_config+0x20>)
    17ea:	4798      	blx	r3
}
    17ec:	b003      	add	sp, #12
    17ee:	bd00      	pop	{pc}
    17f0:	00001f35 	.word	0x00001f35

000017f4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    17f4:	b510      	push	{r4, lr}
	switch (clock_source) {
    17f6:	2808      	cmp	r0, #8
    17f8:	d803      	bhi.n	1802 <system_clock_source_get_hz+0xe>
    17fa:	0080      	lsls	r0, r0, #2
    17fc:	4b1c      	ldr	r3, [pc, #112]	; (1870 <system_clock_source_get_hz+0x7c>)
    17fe:	581b      	ldr	r3, [r3, r0]
    1800:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1802:	2000      	movs	r0, #0
    1804:	e032      	b.n	186c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    1806:	4b1b      	ldr	r3, [pc, #108]	; (1874 <system_clock_source_get_hz+0x80>)
    1808:	6918      	ldr	r0, [r3, #16]
    180a:	e02f      	b.n	186c <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    180c:	4b1a      	ldr	r3, [pc, #104]	; (1878 <system_clock_source_get_hz+0x84>)
    180e:	6a1b      	ldr	r3, [r3, #32]
    1810:	059b      	lsls	r3, r3, #22
    1812:	0f9b      	lsrs	r3, r3, #30
    1814:	4819      	ldr	r0, [pc, #100]	; (187c <system_clock_source_get_hz+0x88>)
    1816:	40d8      	lsrs	r0, r3
    1818:	e028      	b.n	186c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    181a:	4b16      	ldr	r3, [pc, #88]	; (1874 <system_clock_source_get_hz+0x80>)
    181c:	6958      	ldr	r0, [r3, #20]
    181e:	e025      	b.n	186c <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1820:	4b14      	ldr	r3, [pc, #80]	; (1874 <system_clock_source_get_hz+0x80>)
    1822:	681b      	ldr	r3, [r3, #0]
			return 0;
    1824:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1826:	079b      	lsls	r3, r3, #30
    1828:	d520      	bpl.n	186c <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    182a:	4913      	ldr	r1, [pc, #76]	; (1878 <system_clock_source_get_hz+0x84>)
    182c:	2210      	movs	r2, #16
    182e:	68cb      	ldr	r3, [r1, #12]
    1830:	421a      	tst	r2, r3
    1832:	d0fc      	beq.n	182e <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    1834:	4b0f      	ldr	r3, [pc, #60]	; (1874 <system_clock_source_get_hz+0x80>)
    1836:	681a      	ldr	r2, [r3, #0]
    1838:	2324      	movs	r3, #36	; 0x24
    183a:	4013      	ands	r3, r2
    183c:	2b04      	cmp	r3, #4
    183e:	d001      	beq.n	1844 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    1840:	480f      	ldr	r0, [pc, #60]	; (1880 <system_clock_source_get_hz+0x8c>)
    1842:	e013      	b.n	186c <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1844:	2000      	movs	r0, #0
    1846:	4b0f      	ldr	r3, [pc, #60]	; (1884 <system_clock_source_get_hz+0x90>)
    1848:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    184a:	4b0a      	ldr	r3, [pc, #40]	; (1874 <system_clock_source_get_hz+0x80>)
    184c:	689b      	ldr	r3, [r3, #8]
    184e:	041b      	lsls	r3, r3, #16
    1850:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1852:	4358      	muls	r0, r3
    1854:	e00a      	b.n	186c <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1856:	2350      	movs	r3, #80	; 0x50
    1858:	4a07      	ldr	r2, [pc, #28]	; (1878 <system_clock_source_get_hz+0x84>)
    185a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    185c:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    185e:	075b      	lsls	r3, r3, #29
    1860:	d504      	bpl.n	186c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    1862:	4b04      	ldr	r3, [pc, #16]	; (1874 <system_clock_source_get_hz+0x80>)
    1864:	68d8      	ldr	r0, [r3, #12]
    1866:	e001      	b.n	186c <system_clock_source_get_hz+0x78>
		return 32768UL;
    1868:	2080      	movs	r0, #128	; 0x80
    186a:	0200      	lsls	r0, r0, #8
	}
}
    186c:	bd10      	pop	{r4, pc}
    186e:	46c0      	nop			; (mov r8, r8)
    1870:	000022f8 	.word	0x000022f8
    1874:	20003054 	.word	0x20003054
    1878:	40000800 	.word	0x40000800
    187c:	007a1200 	.word	0x007a1200
    1880:	02dc6c00 	.word	0x02dc6c00
    1884:	00001e59 	.word	0x00001e59

00001888 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1888:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    188a:	490c      	ldr	r1, [pc, #48]	; (18bc <system_clock_source_osc8m_set_config+0x34>)
    188c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    188e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1890:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1892:	7840      	ldrb	r0, [r0, #1]
    1894:	2201      	movs	r2, #1
    1896:	4010      	ands	r0, r2
    1898:	0180      	lsls	r0, r0, #6
    189a:	2640      	movs	r6, #64	; 0x40
    189c:	43b3      	bics	r3, r6
    189e:	4303      	orrs	r3, r0
    18a0:	402a      	ands	r2, r5
    18a2:	01d2      	lsls	r2, r2, #7
    18a4:	2080      	movs	r0, #128	; 0x80
    18a6:	4383      	bics	r3, r0
    18a8:	4313      	orrs	r3, r2
    18aa:	2203      	movs	r2, #3
    18ac:	4022      	ands	r2, r4
    18ae:	0212      	lsls	r2, r2, #8
    18b0:	4803      	ldr	r0, [pc, #12]	; (18c0 <system_clock_source_osc8m_set_config+0x38>)
    18b2:	4003      	ands	r3, r0
    18b4:	4313      	orrs	r3, r2
    18b6:	620b      	str	r3, [r1, #32]
}
    18b8:	bd70      	pop	{r4, r5, r6, pc}
    18ba:	46c0      	nop			; (mov r8, r8)
    18bc:	40000800 	.word	0x40000800
    18c0:	fffffcff 	.word	0xfffffcff

000018c4 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    18c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    18c6:	46de      	mov	lr, fp
    18c8:	4657      	mov	r7, sl
    18ca:	464e      	mov	r6, r9
    18cc:	4645      	mov	r5, r8
    18ce:	b5e0      	push	{r5, r6, r7, lr}
    18d0:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    18d2:	4b26      	ldr	r3, [pc, #152]	; (196c <system_clock_source_xosc32k_set_config+0xa8>)
    18d4:	469b      	mov	fp, r3
    18d6:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    18d8:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    18da:	7800      	ldrb	r0, [r0, #0]
    18dc:	4242      	negs	r2, r0
    18de:	4142      	adcs	r2, r0
    18e0:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    18e2:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    18e4:	78ca      	ldrb	r2, [r1, #3]
    18e6:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    18e8:	790a      	ldrb	r2, [r1, #4]
    18ea:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    18ec:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    18ee:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    18f0:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    18f2:	688a      	ldr	r2, [r1, #8]
    18f4:	491e      	ldr	r1, [pc, #120]	; (1970 <system_clock_source_xosc32k_set_config+0xac>)
    18f6:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    18f8:	2101      	movs	r1, #1
    18fa:	464a      	mov	r2, r9
    18fc:	0092      	lsls	r2, r2, #2
    18fe:	4691      	mov	r9, r2
    1900:	2204      	movs	r2, #4
    1902:	4393      	bics	r3, r2
    1904:	464a      	mov	r2, r9
    1906:	4313      	orrs	r3, r2
    1908:	4642      	mov	r2, r8
    190a:	400a      	ands	r2, r1
    190c:	00d2      	lsls	r2, r2, #3
    190e:	4690      	mov	r8, r2
    1910:	2208      	movs	r2, #8
    1912:	4393      	bics	r3, r2
    1914:	4642      	mov	r2, r8
    1916:	4313      	orrs	r3, r2
    1918:	4662      	mov	r2, ip
    191a:	400a      	ands	r2, r1
    191c:	0112      	lsls	r2, r2, #4
    191e:	4694      	mov	ip, r2
    1920:	2210      	movs	r2, #16
    1922:	4393      	bics	r3, r2
    1924:	4662      	mov	r2, ip
    1926:	4313      	orrs	r3, r2
    1928:	4008      	ands	r0, r1
    192a:	0140      	lsls	r0, r0, #5
    192c:	2220      	movs	r2, #32
    192e:	4393      	bics	r3, r2
    1930:	4303      	orrs	r3, r0
    1932:	400f      	ands	r7, r1
    1934:	01bf      	lsls	r7, r7, #6
    1936:	2040      	movs	r0, #64	; 0x40
    1938:	4383      	bics	r3, r0
    193a:	433b      	orrs	r3, r7
    193c:	400e      	ands	r6, r1
    193e:	01f6      	lsls	r6, r6, #7
    1940:	3040      	adds	r0, #64	; 0x40
    1942:	4383      	bics	r3, r0
    1944:	4333      	orrs	r3, r6
    1946:	3879      	subs	r0, #121	; 0x79
    1948:	4005      	ands	r5, r0
    194a:	022d      	lsls	r5, r5, #8
    194c:	4809      	ldr	r0, [pc, #36]	; (1974 <system_clock_source_xosc32k_set_config+0xb0>)
    194e:	4003      	ands	r3, r0
    1950:	432b      	orrs	r3, r5
    1952:	4021      	ands	r1, r4
    1954:	0309      	lsls	r1, r1, #12
    1956:	4808      	ldr	r0, [pc, #32]	; (1978 <system_clock_source_xosc32k_set_config+0xb4>)
    1958:	4003      	ands	r3, r0
    195a:	430b      	orrs	r3, r1
    195c:	465a      	mov	r2, fp
    195e:	8293      	strh	r3, [r2, #20]
}
    1960:	bc3c      	pop	{r2, r3, r4, r5}
    1962:	4690      	mov	r8, r2
    1964:	4699      	mov	r9, r3
    1966:	46a2      	mov	sl, r4
    1968:	46ab      	mov	fp, r5
    196a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    196c:	40000800 	.word	0x40000800
    1970:	20003054 	.word	0x20003054
    1974:	fffff8ff 	.word	0xfffff8ff
    1978:	ffffefff 	.word	0xffffefff

0000197c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    197c:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    197e:	7a03      	ldrb	r3, [r0, #8]
    1980:	069b      	lsls	r3, r3, #26
    1982:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    1984:	8942      	ldrh	r2, [r0, #10]
    1986:	0592      	lsls	r2, r2, #22
    1988:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    198a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    198c:	4918      	ldr	r1, [pc, #96]	; (19f0 <system_clock_source_dfll_set_config+0x74>)
    198e:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    1990:	7983      	ldrb	r3, [r0, #6]
    1992:	79c2      	ldrb	r2, [r0, #7]
    1994:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    1996:	8842      	ldrh	r2, [r0, #2]
    1998:	8884      	ldrh	r4, [r0, #4]
    199a:	4322      	orrs	r2, r4
    199c:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    199e:	7842      	ldrb	r2, [r0, #1]
    19a0:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    19a2:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    19a4:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    19a6:	7803      	ldrb	r3, [r0, #0]
    19a8:	2b04      	cmp	r3, #4
    19aa:	d011      	beq.n	19d0 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    19ac:	2b20      	cmp	r3, #32
    19ae:	d10e      	bne.n	19ce <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    19b0:	7b03      	ldrb	r3, [r0, #12]
    19b2:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    19b4:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    19b6:	4313      	orrs	r3, r2
    19b8:	89c2      	ldrh	r2, [r0, #14]
    19ba:	0412      	lsls	r2, r2, #16
    19bc:	490d      	ldr	r1, [pc, #52]	; (19f4 <system_clock_source_dfll_set_config+0x78>)
    19be:	400a      	ands	r2, r1
    19c0:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    19c2:	4a0b      	ldr	r2, [pc, #44]	; (19f0 <system_clock_source_dfll_set_config+0x74>)
    19c4:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    19c6:	6811      	ldr	r1, [r2, #0]
    19c8:	4b0b      	ldr	r3, [pc, #44]	; (19f8 <system_clock_source_dfll_set_config+0x7c>)
    19ca:	430b      	orrs	r3, r1
    19cc:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    19ce:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    19d0:	7b03      	ldrb	r3, [r0, #12]
    19d2:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    19d4:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    19d6:	4313      	orrs	r3, r2
    19d8:	89c2      	ldrh	r2, [r0, #14]
    19da:	0412      	lsls	r2, r2, #16
    19dc:	4905      	ldr	r1, [pc, #20]	; (19f4 <system_clock_source_dfll_set_config+0x78>)
    19de:	400a      	ands	r2, r1
    19e0:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    19e2:	4a03      	ldr	r2, [pc, #12]	; (19f0 <system_clock_source_dfll_set_config+0x74>)
    19e4:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    19e6:	6813      	ldr	r3, [r2, #0]
    19e8:	2104      	movs	r1, #4
    19ea:	430b      	orrs	r3, r1
    19ec:	6013      	str	r3, [r2, #0]
    19ee:	e7ee      	b.n	19ce <system_clock_source_dfll_set_config+0x52>
    19f0:	20003054 	.word	0x20003054
    19f4:	03ff0000 	.word	0x03ff0000
    19f8:	00000424 	.word	0x00000424

000019fc <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    19fc:	2808      	cmp	r0, #8
    19fe:	d803      	bhi.n	1a08 <system_clock_source_enable+0xc>
    1a00:	0080      	lsls	r0, r0, #2
    1a02:	4b25      	ldr	r3, [pc, #148]	; (1a98 <system_clock_source_enable+0x9c>)
    1a04:	581b      	ldr	r3, [r3, r0]
    1a06:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1a08:	2017      	movs	r0, #23
    1a0a:	e044      	b.n	1a96 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1a0c:	4a23      	ldr	r2, [pc, #140]	; (1a9c <system_clock_source_enable+0xa0>)
    1a0e:	6a13      	ldr	r3, [r2, #32]
    1a10:	2102      	movs	r1, #2
    1a12:	430b      	orrs	r3, r1
    1a14:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1a16:	2000      	movs	r0, #0
    1a18:	e03d      	b.n	1a96 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1a1a:	4a20      	ldr	r2, [pc, #128]	; (1a9c <system_clock_source_enable+0xa0>)
    1a1c:	6993      	ldr	r3, [r2, #24]
    1a1e:	2102      	movs	r1, #2
    1a20:	430b      	orrs	r3, r1
    1a22:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1a24:	2000      	movs	r0, #0
		break;
    1a26:	e036      	b.n	1a96 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1a28:	4a1c      	ldr	r2, [pc, #112]	; (1a9c <system_clock_source_enable+0xa0>)
    1a2a:	8a13      	ldrh	r3, [r2, #16]
    1a2c:	2102      	movs	r1, #2
    1a2e:	430b      	orrs	r3, r1
    1a30:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1a32:	2000      	movs	r0, #0
		break;
    1a34:	e02f      	b.n	1a96 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1a36:	4a19      	ldr	r2, [pc, #100]	; (1a9c <system_clock_source_enable+0xa0>)
    1a38:	8a93      	ldrh	r3, [r2, #20]
    1a3a:	2102      	movs	r1, #2
    1a3c:	430b      	orrs	r3, r1
    1a3e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1a40:	2000      	movs	r0, #0
		break;
    1a42:	e028      	b.n	1a96 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1a44:	4916      	ldr	r1, [pc, #88]	; (1aa0 <system_clock_source_enable+0xa4>)
    1a46:	680b      	ldr	r3, [r1, #0]
    1a48:	2202      	movs	r2, #2
    1a4a:	4313      	orrs	r3, r2
    1a4c:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1a4e:	4b13      	ldr	r3, [pc, #76]	; (1a9c <system_clock_source_enable+0xa0>)
    1a50:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1a52:	0019      	movs	r1, r3
    1a54:	320e      	adds	r2, #14
    1a56:	68cb      	ldr	r3, [r1, #12]
    1a58:	421a      	tst	r2, r3
    1a5a:	d0fc      	beq.n	1a56 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1a5c:	4a10      	ldr	r2, [pc, #64]	; (1aa0 <system_clock_source_enable+0xa4>)
    1a5e:	6891      	ldr	r1, [r2, #8]
    1a60:	4b0e      	ldr	r3, [pc, #56]	; (1a9c <system_clock_source_enable+0xa0>)
    1a62:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1a64:	6852      	ldr	r2, [r2, #4]
    1a66:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1a68:	2200      	movs	r2, #0
    1a6a:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1a6c:	0019      	movs	r1, r3
    1a6e:	3210      	adds	r2, #16
    1a70:	68cb      	ldr	r3, [r1, #12]
    1a72:	421a      	tst	r2, r3
    1a74:	d0fc      	beq.n	1a70 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1a76:	4b0a      	ldr	r3, [pc, #40]	; (1aa0 <system_clock_source_enable+0xa4>)
    1a78:	681b      	ldr	r3, [r3, #0]
    1a7a:	b29b      	uxth	r3, r3
    1a7c:	4a07      	ldr	r2, [pc, #28]	; (1a9c <system_clock_source_enable+0xa0>)
    1a7e:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1a80:	2000      	movs	r0, #0
    1a82:	e008      	b.n	1a96 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1a84:	4905      	ldr	r1, [pc, #20]	; (1a9c <system_clock_source_enable+0xa0>)
    1a86:	2244      	movs	r2, #68	; 0x44
    1a88:	5c8b      	ldrb	r3, [r1, r2]
    1a8a:	2002      	movs	r0, #2
    1a8c:	4303      	orrs	r3, r0
    1a8e:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1a90:	2000      	movs	r0, #0
		break;
    1a92:	e000      	b.n	1a96 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1a94:	2000      	movs	r0, #0
}
    1a96:	4770      	bx	lr
    1a98:	0000231c 	.word	0x0000231c
    1a9c:	40000800 	.word	0x40000800
    1aa0:	20003054 	.word	0x20003054

00001aa4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1aa6:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1aa8:	22c2      	movs	r2, #194	; 0xc2
    1aaa:	00d2      	lsls	r2, r2, #3
    1aac:	4b47      	ldr	r3, [pc, #284]	; (1bcc <system_clock_init+0x128>)
    1aae:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1ab0:	4a47      	ldr	r2, [pc, #284]	; (1bd0 <system_clock_init+0x12c>)
    1ab2:	6853      	ldr	r3, [r2, #4]
    1ab4:	211e      	movs	r1, #30
    1ab6:	438b      	bics	r3, r1
    1ab8:	391a      	subs	r1, #26
    1aba:	430b      	orrs	r3, r1
    1abc:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    1abe:	2202      	movs	r2, #2
    1ac0:	ab01      	add	r3, sp, #4
    1ac2:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1ac4:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1ac6:	4d43      	ldr	r5, [pc, #268]	; (1bd4 <system_clock_init+0x130>)
    1ac8:	b2e0      	uxtb	r0, r4
    1aca:	a901      	add	r1, sp, #4
    1acc:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1ace:	3401      	adds	r4, #1
    1ad0:	2c25      	cmp	r4, #37	; 0x25
    1ad2:	d1f9      	bne.n	1ac8 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1ad4:	a80a      	add	r0, sp, #40	; 0x28
    1ad6:	2300      	movs	r3, #0
    1ad8:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    1ada:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    1adc:	2280      	movs	r2, #128	; 0x80
    1ade:	0212      	lsls	r2, r2, #8
    1ae0:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    1ae2:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    1ae4:	2201      	movs	r2, #1
    1ae6:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    1ae8:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    1aea:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1aec:	3202      	adds	r2, #2
    1aee:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    1af0:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    1af2:	4b39      	ldr	r3, [pc, #228]	; (1bd8 <system_clock_init+0x134>)
    1af4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1af6:	2005      	movs	r0, #5
    1af8:	4b38      	ldr	r3, [pc, #224]	; (1bdc <system_clock_init+0x138>)
    1afa:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1afc:	4933      	ldr	r1, [pc, #204]	; (1bcc <system_clock_init+0x128>)
    1afe:	2202      	movs	r2, #2
    1b00:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1b02:	421a      	tst	r2, r3
    1b04:	d0fc      	beq.n	1b00 <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    1b06:	4a31      	ldr	r2, [pc, #196]	; (1bcc <system_clock_init+0x128>)
    1b08:	8a93      	ldrh	r3, [r2, #20]
    1b0a:	2180      	movs	r1, #128	; 0x80
    1b0c:	430b      	orrs	r3, r1
    1b0e:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1b10:	ab05      	add	r3, sp, #20
    1b12:	2100      	movs	r1, #0
    1b14:	2200      	movs	r2, #0
    1b16:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1b18:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1b1a:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1b1c:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    1b1e:	313f      	adds	r1, #63	; 0x3f
    1b20:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1b22:	393b      	subs	r1, #59	; 0x3b
    1b24:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1b26:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1b28:	4b2d      	ldr	r3, [pc, #180]	; (1be0 <system_clock_init+0x13c>)
    1b2a:	681b      	ldr	r3, [r3, #0]
    1b2c:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    1b2e:	2b3f      	cmp	r3, #63	; 0x3f
    1b30:	d04a      	beq.n	1bc8 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    1b32:	a805      	add	r0, sp, #20
    1b34:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1b36:	4b2b      	ldr	r3, [pc, #172]	; (1be4 <system_clock_init+0x140>)
    1b38:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1b3a:	2307      	movs	r3, #7
    1b3c:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1b3e:	3338      	adds	r3, #56	; 0x38
    1b40:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1b42:	4b29      	ldr	r3, [pc, #164]	; (1be8 <system_clock_init+0x144>)
    1b44:	4798      	blx	r3
	config->run_in_standby  = false;
    1b46:	a804      	add	r0, sp, #16
    1b48:	2500      	movs	r5, #0
    1b4a:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    1b4c:	2601      	movs	r6, #1
    1b4e:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1b50:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1b52:	4b26      	ldr	r3, [pc, #152]	; (1bec <system_clock_init+0x148>)
    1b54:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1b56:	2006      	movs	r0, #6
    1b58:	4f20      	ldr	r7, [pc, #128]	; (1bdc <system_clock_init+0x138>)
    1b5a:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1b5c:	4b24      	ldr	r3, [pc, #144]	; (1bf0 <system_clock_init+0x14c>)
    1b5e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1b60:	ac01      	add	r4, sp, #4
    1b62:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    1b64:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1b66:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1b68:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1b6a:	2305      	movs	r3, #5
    1b6c:	7023      	strb	r3, [r4, #0]
    1b6e:	0021      	movs	r1, r4
    1b70:	2001      	movs	r0, #1
    1b72:	4b20      	ldr	r3, [pc, #128]	; (1bf4 <system_clock_init+0x150>)
    1b74:	4798      	blx	r3
    1b76:	2001      	movs	r0, #1
    1b78:	4b1f      	ldr	r3, [pc, #124]	; (1bf8 <system_clock_init+0x154>)
    1b7a:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1b7c:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1b7e:	0021      	movs	r1, r4
    1b80:	2000      	movs	r0, #0
    1b82:	4b14      	ldr	r3, [pc, #80]	; (1bd4 <system_clock_init+0x130>)
    1b84:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    1b86:	2000      	movs	r0, #0
    1b88:	4b1c      	ldr	r3, [pc, #112]	; (1bfc <system_clock_init+0x158>)
    1b8a:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1b8c:	2007      	movs	r0, #7
    1b8e:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1b90:	490e      	ldr	r1, [pc, #56]	; (1bcc <system_clock_init+0x128>)
    1b92:	22d0      	movs	r2, #208	; 0xd0
    1b94:	68cb      	ldr	r3, [r1, #12]
    1b96:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1b98:	2bd0      	cmp	r3, #208	; 0xd0
    1b9a:	d1fb      	bne.n	1b94 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    1b9c:	4a18      	ldr	r2, [pc, #96]	; (1c00 <system_clock_init+0x15c>)
    1b9e:	2300      	movs	r3, #0
    1ba0:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1ba2:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1ba4:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1ba6:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    1ba8:	a901      	add	r1, sp, #4
    1baa:	2201      	movs	r2, #1
    1bac:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    1bae:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    1bb0:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1bb2:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1bb4:	3307      	adds	r3, #7
    1bb6:	700b      	strb	r3, [r1, #0]
    1bb8:	2000      	movs	r0, #0
    1bba:	4b0e      	ldr	r3, [pc, #56]	; (1bf4 <system_clock_init+0x150>)
    1bbc:	4798      	blx	r3
    1bbe:	2000      	movs	r0, #0
    1bc0:	4b0d      	ldr	r3, [pc, #52]	; (1bf8 <system_clock_init+0x154>)
    1bc2:	4798      	blx	r3
#endif
}
    1bc4:	b00f      	add	sp, #60	; 0x3c
    1bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    1bc8:	3b20      	subs	r3, #32
    1bca:	e7b2      	b.n	1b32 <system_clock_init+0x8e>
    1bcc:	40000800 	.word	0x40000800
    1bd0:	41004000 	.word	0x41004000
    1bd4:	00001e3d 	.word	0x00001e3d
    1bd8:	000018c5 	.word	0x000018c5
    1bdc:	000019fd 	.word	0x000019fd
    1be0:	00806024 	.word	0x00806024
    1be4:	000005b9 	.word	0x000005b9
    1be8:	0000197d 	.word	0x0000197d
    1bec:	00001889 	.word	0x00001889
    1bf0:	00001c05 	.word	0x00001c05
    1bf4:	00001c29 	.word	0x00001c29
    1bf8:	00001ce1 	.word	0x00001ce1
    1bfc:	00001db1 	.word	0x00001db1
    1c00:	40000400 	.word	0x40000400

00001c04 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1c04:	4a06      	ldr	r2, [pc, #24]	; (1c20 <system_gclk_init+0x1c>)
    1c06:	6993      	ldr	r3, [r2, #24]
    1c08:	2108      	movs	r1, #8
    1c0a:	430b      	orrs	r3, r1
    1c0c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1c0e:	2201      	movs	r2, #1
    1c10:	4b04      	ldr	r3, [pc, #16]	; (1c24 <system_gclk_init+0x20>)
    1c12:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1c14:	0019      	movs	r1, r3
    1c16:	780b      	ldrb	r3, [r1, #0]
    1c18:	4213      	tst	r3, r2
    1c1a:	d1fc      	bne.n	1c16 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1c1c:	4770      	bx	lr
    1c1e:	46c0      	nop			; (mov r8, r8)
    1c20:	40000400 	.word	0x40000400
    1c24:	40000c00 	.word	0x40000c00

00001c28 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1c28:	b570      	push	{r4, r5, r6, lr}
    1c2a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1c2c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1c2e:	780d      	ldrb	r5, [r1, #0]
    1c30:	022d      	lsls	r5, r5, #8
    1c32:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1c34:	784b      	ldrb	r3, [r1, #1]
    1c36:	2b00      	cmp	r3, #0
    1c38:	d002      	beq.n	1c40 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1c3a:	2380      	movs	r3, #128	; 0x80
    1c3c:	02db      	lsls	r3, r3, #11
    1c3e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1c40:	7a4b      	ldrb	r3, [r1, #9]
    1c42:	2b00      	cmp	r3, #0
    1c44:	d002      	beq.n	1c4c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1c46:	2380      	movs	r3, #128	; 0x80
    1c48:	031b      	lsls	r3, r3, #12
    1c4a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1c4c:	6848      	ldr	r0, [r1, #4]
    1c4e:	2801      	cmp	r0, #1
    1c50:	d910      	bls.n	1c74 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1c52:	1e43      	subs	r3, r0, #1
    1c54:	4218      	tst	r0, r3
    1c56:	d134      	bne.n	1cc2 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1c58:	2802      	cmp	r0, #2
    1c5a:	d930      	bls.n	1cbe <system_gclk_gen_set_config+0x96>
    1c5c:	2302      	movs	r3, #2
    1c5e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1c60:	3201      	adds	r2, #1
						mask <<= 1) {
    1c62:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1c64:	4298      	cmp	r0, r3
    1c66:	d8fb      	bhi.n	1c60 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1c68:	0212      	lsls	r2, r2, #8
    1c6a:	4332      	orrs	r2, r6
    1c6c:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1c6e:	2380      	movs	r3, #128	; 0x80
    1c70:	035b      	lsls	r3, r3, #13
    1c72:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1c74:	7a0b      	ldrb	r3, [r1, #8]
    1c76:	2b00      	cmp	r3, #0
    1c78:	d002      	beq.n	1c80 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1c7a:	2380      	movs	r3, #128	; 0x80
    1c7c:	039b      	lsls	r3, r3, #14
    1c7e:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1c80:	4a13      	ldr	r2, [pc, #76]	; (1cd0 <system_gclk_gen_set_config+0xa8>)
    1c82:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1c84:	b25b      	sxtb	r3, r3
    1c86:	2b00      	cmp	r3, #0
    1c88:	dbfb      	blt.n	1c82 <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1c8a:	4b12      	ldr	r3, [pc, #72]	; (1cd4 <system_gclk_gen_set_config+0xac>)
    1c8c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1c8e:	4b12      	ldr	r3, [pc, #72]	; (1cd8 <system_gclk_gen_set_config+0xb0>)
    1c90:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1c92:	4a0f      	ldr	r2, [pc, #60]	; (1cd0 <system_gclk_gen_set_config+0xa8>)
    1c94:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1c96:	b25b      	sxtb	r3, r3
    1c98:	2b00      	cmp	r3, #0
    1c9a:	dbfb      	blt.n	1c94 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1c9c:	4b0c      	ldr	r3, [pc, #48]	; (1cd0 <system_gclk_gen_set_config+0xa8>)
    1c9e:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ca0:	001a      	movs	r2, r3
    1ca2:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1ca4:	b25b      	sxtb	r3, r3
    1ca6:	2b00      	cmp	r3, #0
    1ca8:	dbfb      	blt.n	1ca2 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1caa:	4a09      	ldr	r2, [pc, #36]	; (1cd0 <system_gclk_gen_set_config+0xa8>)
    1cac:	6853      	ldr	r3, [r2, #4]
    1cae:	2180      	movs	r1, #128	; 0x80
    1cb0:	0249      	lsls	r1, r1, #9
    1cb2:	400b      	ands	r3, r1
    1cb4:	431d      	orrs	r5, r3
    1cb6:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1cb8:	4b08      	ldr	r3, [pc, #32]	; (1cdc <system_gclk_gen_set_config+0xb4>)
    1cba:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1cbc:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1cbe:	2200      	movs	r2, #0
    1cc0:	e7d2      	b.n	1c68 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1cc2:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1cc4:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1cc6:	2380      	movs	r3, #128	; 0x80
    1cc8:	029b      	lsls	r3, r3, #10
    1cca:	431d      	orrs	r5, r3
    1ccc:	e7d2      	b.n	1c74 <system_gclk_gen_set_config+0x4c>
    1cce:	46c0      	nop			; (mov r8, r8)
    1cd0:	40000c00 	.word	0x40000c00
    1cd4:	00001729 	.word	0x00001729
    1cd8:	40000c08 	.word	0x40000c08
    1cdc:	00001769 	.word	0x00001769

00001ce0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1ce0:	b510      	push	{r4, lr}
    1ce2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ce4:	4a0b      	ldr	r2, [pc, #44]	; (1d14 <system_gclk_gen_enable+0x34>)
    1ce6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1ce8:	b25b      	sxtb	r3, r3
    1cea:	2b00      	cmp	r3, #0
    1cec:	dbfb      	blt.n	1ce6 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1cee:	4b0a      	ldr	r3, [pc, #40]	; (1d18 <system_gclk_gen_enable+0x38>)
    1cf0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1cf2:	4b0a      	ldr	r3, [pc, #40]	; (1d1c <system_gclk_gen_enable+0x3c>)
    1cf4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1cf6:	4a07      	ldr	r2, [pc, #28]	; (1d14 <system_gclk_gen_enable+0x34>)
    1cf8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1cfa:	b25b      	sxtb	r3, r3
    1cfc:	2b00      	cmp	r3, #0
    1cfe:	dbfb      	blt.n	1cf8 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1d00:	4a04      	ldr	r2, [pc, #16]	; (1d14 <system_gclk_gen_enable+0x34>)
    1d02:	6851      	ldr	r1, [r2, #4]
    1d04:	2380      	movs	r3, #128	; 0x80
    1d06:	025b      	lsls	r3, r3, #9
    1d08:	430b      	orrs	r3, r1
    1d0a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1d0c:	4b04      	ldr	r3, [pc, #16]	; (1d20 <system_gclk_gen_enable+0x40>)
    1d0e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1d10:	bd10      	pop	{r4, pc}
    1d12:	46c0      	nop			; (mov r8, r8)
    1d14:	40000c00 	.word	0x40000c00
    1d18:	00001729 	.word	0x00001729
    1d1c:	40000c04 	.word	0x40000c04
    1d20:	00001769 	.word	0x00001769

00001d24 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1d24:	b570      	push	{r4, r5, r6, lr}
    1d26:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d28:	4a1a      	ldr	r2, [pc, #104]	; (1d94 <system_gclk_gen_get_hz+0x70>)
    1d2a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1d2c:	b25b      	sxtb	r3, r3
    1d2e:	2b00      	cmp	r3, #0
    1d30:	dbfb      	blt.n	1d2a <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1d32:	4b19      	ldr	r3, [pc, #100]	; (1d98 <system_gclk_gen_get_hz+0x74>)
    1d34:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1d36:	4b19      	ldr	r3, [pc, #100]	; (1d9c <system_gclk_gen_get_hz+0x78>)
    1d38:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d3a:	4a16      	ldr	r2, [pc, #88]	; (1d94 <system_gclk_gen_get_hz+0x70>)
    1d3c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1d3e:	b25b      	sxtb	r3, r3
    1d40:	2b00      	cmp	r3, #0
    1d42:	dbfb      	blt.n	1d3c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1d44:	4e13      	ldr	r6, [pc, #76]	; (1d94 <system_gclk_gen_get_hz+0x70>)
    1d46:	6870      	ldr	r0, [r6, #4]
    1d48:	04c0      	lsls	r0, r0, #19
    1d4a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1d4c:	4b14      	ldr	r3, [pc, #80]	; (1da0 <system_gclk_gen_get_hz+0x7c>)
    1d4e:	4798      	blx	r3
    1d50:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1d52:	4b12      	ldr	r3, [pc, #72]	; (1d9c <system_gclk_gen_get_hz+0x78>)
    1d54:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1d56:	6876      	ldr	r6, [r6, #4]
    1d58:	02f6      	lsls	r6, r6, #11
    1d5a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1d5c:	4b11      	ldr	r3, [pc, #68]	; (1da4 <system_gclk_gen_get_hz+0x80>)
    1d5e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d60:	4a0c      	ldr	r2, [pc, #48]	; (1d94 <system_gclk_gen_get_hz+0x70>)
    1d62:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1d64:	b25b      	sxtb	r3, r3
    1d66:	2b00      	cmp	r3, #0
    1d68:	dbfb      	blt.n	1d62 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1d6a:	4b0a      	ldr	r3, [pc, #40]	; (1d94 <system_gclk_gen_get_hz+0x70>)
    1d6c:	689c      	ldr	r4, [r3, #8]
    1d6e:	0224      	lsls	r4, r4, #8
    1d70:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1d72:	4b0d      	ldr	r3, [pc, #52]	; (1da8 <system_gclk_gen_get_hz+0x84>)
    1d74:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1d76:	2e00      	cmp	r6, #0
    1d78:	d107      	bne.n	1d8a <system_gclk_gen_get_hz+0x66>
    1d7a:	2c01      	cmp	r4, #1
    1d7c:	d907      	bls.n	1d8e <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1d7e:	0021      	movs	r1, r4
    1d80:	0028      	movs	r0, r5
    1d82:	4b0a      	ldr	r3, [pc, #40]	; (1dac <system_gclk_gen_get_hz+0x88>)
    1d84:	4798      	blx	r3
    1d86:	0005      	movs	r5, r0
    1d88:	e001      	b.n	1d8e <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1d8a:	3401      	adds	r4, #1
    1d8c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1d8e:	0028      	movs	r0, r5
    1d90:	bd70      	pop	{r4, r5, r6, pc}
    1d92:	46c0      	nop			; (mov r8, r8)
    1d94:	40000c00 	.word	0x40000c00
    1d98:	00001729 	.word	0x00001729
    1d9c:	40000c04 	.word	0x40000c04
    1da0:	000017f5 	.word	0x000017f5
    1da4:	40000c08 	.word	0x40000c08
    1da8:	00001769 	.word	0x00001769
    1dac:	0000213d 	.word	0x0000213d

00001db0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1db0:	b510      	push	{r4, lr}
    1db2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1db4:	4b06      	ldr	r3, [pc, #24]	; (1dd0 <system_gclk_chan_enable+0x20>)
    1db6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1db8:	4b06      	ldr	r3, [pc, #24]	; (1dd4 <system_gclk_chan_enable+0x24>)
    1dba:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1dbc:	4a06      	ldr	r2, [pc, #24]	; (1dd8 <system_gclk_chan_enable+0x28>)
    1dbe:	8853      	ldrh	r3, [r2, #2]
    1dc0:	2180      	movs	r1, #128	; 0x80
    1dc2:	01c9      	lsls	r1, r1, #7
    1dc4:	430b      	orrs	r3, r1
    1dc6:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1dc8:	4b04      	ldr	r3, [pc, #16]	; (1ddc <system_gclk_chan_enable+0x2c>)
    1dca:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1dcc:	bd10      	pop	{r4, pc}
    1dce:	46c0      	nop			; (mov r8, r8)
    1dd0:	00001729 	.word	0x00001729
    1dd4:	40000c02 	.word	0x40000c02
    1dd8:	40000c00 	.word	0x40000c00
    1ddc:	00001769 	.word	0x00001769

00001de0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1de0:	b510      	push	{r4, lr}
    1de2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1de4:	4b0f      	ldr	r3, [pc, #60]	; (1e24 <system_gclk_chan_disable+0x44>)
    1de6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1de8:	4b0f      	ldr	r3, [pc, #60]	; (1e28 <system_gclk_chan_disable+0x48>)
    1dea:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1dec:	4a0f      	ldr	r2, [pc, #60]	; (1e2c <system_gclk_chan_disable+0x4c>)
    1dee:	8853      	ldrh	r3, [r2, #2]
    1df0:	051b      	lsls	r3, r3, #20
    1df2:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1df4:	8853      	ldrh	r3, [r2, #2]
    1df6:	490e      	ldr	r1, [pc, #56]	; (1e30 <system_gclk_chan_disable+0x50>)
    1df8:	400b      	ands	r3, r1
    1dfa:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1dfc:	8853      	ldrh	r3, [r2, #2]
    1dfe:	490d      	ldr	r1, [pc, #52]	; (1e34 <system_gclk_chan_disable+0x54>)
    1e00:	400b      	ands	r3, r1
    1e02:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1e04:	0011      	movs	r1, r2
    1e06:	2280      	movs	r2, #128	; 0x80
    1e08:	01d2      	lsls	r2, r2, #7
    1e0a:	884b      	ldrh	r3, [r1, #2]
    1e0c:	4213      	tst	r3, r2
    1e0e:	d1fc      	bne.n	1e0a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1e10:	4906      	ldr	r1, [pc, #24]	; (1e2c <system_gclk_chan_disable+0x4c>)
    1e12:	884a      	ldrh	r2, [r1, #2]
    1e14:	0203      	lsls	r3, r0, #8
    1e16:	4806      	ldr	r0, [pc, #24]	; (1e30 <system_gclk_chan_disable+0x50>)
    1e18:	4002      	ands	r2, r0
    1e1a:	4313      	orrs	r3, r2
    1e1c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1e1e:	4b06      	ldr	r3, [pc, #24]	; (1e38 <system_gclk_chan_disable+0x58>)
    1e20:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1e22:	bd10      	pop	{r4, pc}
    1e24:	00001729 	.word	0x00001729
    1e28:	40000c02 	.word	0x40000c02
    1e2c:	40000c00 	.word	0x40000c00
    1e30:	fffff0ff 	.word	0xfffff0ff
    1e34:	ffffbfff 	.word	0xffffbfff
    1e38:	00001769 	.word	0x00001769

00001e3c <system_gclk_chan_set_config>:
{
    1e3c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1e3e:	780c      	ldrb	r4, [r1, #0]
    1e40:	0224      	lsls	r4, r4, #8
    1e42:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1e44:	4b02      	ldr	r3, [pc, #8]	; (1e50 <system_gclk_chan_set_config+0x14>)
    1e46:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1e48:	b2a4      	uxth	r4, r4
    1e4a:	4b02      	ldr	r3, [pc, #8]	; (1e54 <system_gclk_chan_set_config+0x18>)
    1e4c:	805c      	strh	r4, [r3, #2]
}
    1e4e:	bd10      	pop	{r4, pc}
    1e50:	00001de1 	.word	0x00001de1
    1e54:	40000c00 	.word	0x40000c00

00001e58 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1e58:	b510      	push	{r4, lr}
    1e5a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1e5c:	4b06      	ldr	r3, [pc, #24]	; (1e78 <system_gclk_chan_get_hz+0x20>)
    1e5e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1e60:	4b06      	ldr	r3, [pc, #24]	; (1e7c <system_gclk_chan_get_hz+0x24>)
    1e62:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1e64:	4b06      	ldr	r3, [pc, #24]	; (1e80 <system_gclk_chan_get_hz+0x28>)
    1e66:	885c      	ldrh	r4, [r3, #2]
    1e68:	0524      	lsls	r4, r4, #20
    1e6a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1e6c:	4b05      	ldr	r3, [pc, #20]	; (1e84 <system_gclk_chan_get_hz+0x2c>)
    1e6e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1e70:	0020      	movs	r0, r4
    1e72:	4b05      	ldr	r3, [pc, #20]	; (1e88 <system_gclk_chan_get_hz+0x30>)
    1e74:	4798      	blx	r3
}
    1e76:	bd10      	pop	{r4, pc}
    1e78:	00001729 	.word	0x00001729
    1e7c:	40000c02 	.word	0x40000c02
    1e80:	40000c00 	.word	0x40000c00
    1e84:	00001769 	.word	0x00001769
    1e88:	00001d25 	.word	0x00001d25

00001e8c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1e8c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1e8e:	78d3      	ldrb	r3, [r2, #3]
    1e90:	2b00      	cmp	r3, #0
    1e92:	d135      	bne.n	1f00 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1e94:	7813      	ldrb	r3, [r2, #0]
    1e96:	2b80      	cmp	r3, #128	; 0x80
    1e98:	d029      	beq.n	1eee <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1e9a:	061b      	lsls	r3, r3, #24
    1e9c:	2480      	movs	r4, #128	; 0x80
    1e9e:	0264      	lsls	r4, r4, #9
    1ea0:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1ea2:	7854      	ldrb	r4, [r2, #1]
    1ea4:	2502      	movs	r5, #2
    1ea6:	43ac      	bics	r4, r5
    1ea8:	d106      	bne.n	1eb8 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1eaa:	7894      	ldrb	r4, [r2, #2]
    1eac:	2c00      	cmp	r4, #0
    1eae:	d120      	bne.n	1ef2 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1eb0:	2480      	movs	r4, #128	; 0x80
    1eb2:	02a4      	lsls	r4, r4, #10
    1eb4:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1eb6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1eb8:	7854      	ldrb	r4, [r2, #1]
    1eba:	3c01      	subs	r4, #1
    1ebc:	2c01      	cmp	r4, #1
    1ebe:	d91c      	bls.n	1efa <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1ec0:	040d      	lsls	r5, r1, #16
    1ec2:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1ec4:	24a0      	movs	r4, #160	; 0xa0
    1ec6:	05e4      	lsls	r4, r4, #23
    1ec8:	432c      	orrs	r4, r5
    1eca:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1ecc:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1ece:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1ed0:	24d0      	movs	r4, #208	; 0xd0
    1ed2:	0624      	lsls	r4, r4, #24
    1ed4:	432c      	orrs	r4, r5
    1ed6:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1ed8:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1eda:	78d4      	ldrb	r4, [r2, #3]
    1edc:	2c00      	cmp	r4, #0
    1ede:	d122      	bne.n	1f26 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1ee0:	035b      	lsls	r3, r3, #13
    1ee2:	d51c      	bpl.n	1f1e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1ee4:	7893      	ldrb	r3, [r2, #2]
    1ee6:	2b01      	cmp	r3, #1
    1ee8:	d01e      	beq.n	1f28 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1eea:	6141      	str	r1, [r0, #20]
    1eec:	e017      	b.n	1f1e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1eee:	2300      	movs	r3, #0
    1ef0:	e7d7      	b.n	1ea2 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1ef2:	24c0      	movs	r4, #192	; 0xc0
    1ef4:	02e4      	lsls	r4, r4, #11
    1ef6:	4323      	orrs	r3, r4
    1ef8:	e7dd      	b.n	1eb6 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1efa:	4c0d      	ldr	r4, [pc, #52]	; (1f30 <_system_pinmux_config+0xa4>)
    1efc:	4023      	ands	r3, r4
    1efe:	e7df      	b.n	1ec0 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1f00:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1f02:	040c      	lsls	r4, r1, #16
    1f04:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1f06:	23a0      	movs	r3, #160	; 0xa0
    1f08:	05db      	lsls	r3, r3, #23
    1f0a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1f0c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1f0e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1f10:	23d0      	movs	r3, #208	; 0xd0
    1f12:	061b      	lsls	r3, r3, #24
    1f14:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1f16:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1f18:	78d3      	ldrb	r3, [r2, #3]
    1f1a:	2b00      	cmp	r3, #0
    1f1c:	d103      	bne.n	1f26 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1f1e:	7853      	ldrb	r3, [r2, #1]
    1f20:	3b01      	subs	r3, #1
    1f22:	2b01      	cmp	r3, #1
    1f24:	d902      	bls.n	1f2c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1f26:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1f28:	6181      	str	r1, [r0, #24]
    1f2a:	e7f8      	b.n	1f1e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1f2c:	6081      	str	r1, [r0, #8]
}
    1f2e:	e7fa      	b.n	1f26 <_system_pinmux_config+0x9a>
    1f30:	fffbffff 	.word	0xfffbffff

00001f34 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1f34:	b510      	push	{r4, lr}
    1f36:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1f38:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1f3a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1f3c:	2900      	cmp	r1, #0
    1f3e:	d104      	bne.n	1f4a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1f40:	0943      	lsrs	r3, r0, #5
    1f42:	01db      	lsls	r3, r3, #7
    1f44:	4905      	ldr	r1, [pc, #20]	; (1f5c <system_pinmux_pin_set_config+0x28>)
    1f46:	468c      	mov	ip, r1
    1f48:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1f4a:	241f      	movs	r4, #31
    1f4c:	4020      	ands	r0, r4
    1f4e:	2101      	movs	r1, #1
    1f50:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1f52:	0018      	movs	r0, r3
    1f54:	4b02      	ldr	r3, [pc, #8]	; (1f60 <system_pinmux_pin_set_config+0x2c>)
    1f56:	4798      	blx	r3
}
    1f58:	bd10      	pop	{r4, pc}
    1f5a:	46c0      	nop			; (mov r8, r8)
    1f5c:	41004400 	.word	0x41004400
    1f60:	00001e8d 	.word	0x00001e8d

00001f64 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1f64:	4770      	bx	lr
	...

00001f68 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1f68:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1f6a:	4b05      	ldr	r3, [pc, #20]	; (1f80 <system_init+0x18>)
    1f6c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1f6e:	4b05      	ldr	r3, [pc, #20]	; (1f84 <system_init+0x1c>)
    1f70:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1f72:	4b05      	ldr	r3, [pc, #20]	; (1f88 <system_init+0x20>)
    1f74:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1f76:	4b05      	ldr	r3, [pc, #20]	; (1f8c <system_init+0x24>)
    1f78:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1f7a:	4b05      	ldr	r3, [pc, #20]	; (1f90 <system_init+0x28>)
    1f7c:	4798      	blx	r3
}
    1f7e:	bd10      	pop	{r4, pc}
    1f80:	00001aa5 	.word	0x00001aa5
    1f84:	00001799 	.word	0x00001799
    1f88:	00001f65 	.word	0x00001f65
    1f8c:	00001f65 	.word	0x00001f65
    1f90:	00001f65 	.word	0x00001f65

00001f94 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1f94:	e7fe      	b.n	1f94 <Dummy_Handler>
	...

00001f98 <Reset_Handler>:
{
    1f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1f9a:	4a2a      	ldr	r2, [pc, #168]	; (2044 <STACK_SIZE+0x44>)
    1f9c:	4b2a      	ldr	r3, [pc, #168]	; (2048 <STACK_SIZE+0x48>)
    1f9e:	429a      	cmp	r2, r3
    1fa0:	d011      	beq.n	1fc6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1fa2:	001a      	movs	r2, r3
    1fa4:	4b29      	ldr	r3, [pc, #164]	; (204c <STACK_SIZE+0x4c>)
    1fa6:	429a      	cmp	r2, r3
    1fa8:	d20d      	bcs.n	1fc6 <Reset_Handler+0x2e>
    1faa:	4a29      	ldr	r2, [pc, #164]	; (2050 <STACK_SIZE+0x50>)
    1fac:	3303      	adds	r3, #3
    1fae:	1a9b      	subs	r3, r3, r2
    1fb0:	089b      	lsrs	r3, r3, #2
    1fb2:	3301      	adds	r3, #1
    1fb4:	009b      	lsls	r3, r3, #2
    1fb6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1fb8:	4823      	ldr	r0, [pc, #140]	; (2048 <STACK_SIZE+0x48>)
    1fba:	4922      	ldr	r1, [pc, #136]	; (2044 <STACK_SIZE+0x44>)
    1fbc:	588c      	ldr	r4, [r1, r2]
    1fbe:	5084      	str	r4, [r0, r2]
    1fc0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1fc2:	429a      	cmp	r2, r3
    1fc4:	d1fa      	bne.n	1fbc <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1fc6:	4a23      	ldr	r2, [pc, #140]	; (2054 <STACK_SIZE+0x54>)
    1fc8:	4b23      	ldr	r3, [pc, #140]	; (2058 <STACK_SIZE+0x58>)
    1fca:	429a      	cmp	r2, r3
    1fcc:	d20a      	bcs.n	1fe4 <Reset_Handler+0x4c>
    1fce:	43d3      	mvns	r3, r2
    1fd0:	4921      	ldr	r1, [pc, #132]	; (2058 <STACK_SIZE+0x58>)
    1fd2:	185b      	adds	r3, r3, r1
    1fd4:	2103      	movs	r1, #3
    1fd6:	438b      	bics	r3, r1
    1fd8:	3304      	adds	r3, #4
    1fda:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1fdc:	2100      	movs	r1, #0
    1fde:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1fe0:	4293      	cmp	r3, r2
    1fe2:	d1fc      	bne.n	1fde <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1fe4:	4a1d      	ldr	r2, [pc, #116]	; (205c <STACK_SIZE+0x5c>)
    1fe6:	21ff      	movs	r1, #255	; 0xff
    1fe8:	4b1d      	ldr	r3, [pc, #116]	; (2060 <STACK_SIZE+0x60>)
    1fea:	438b      	bics	r3, r1
    1fec:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1fee:	39fd      	subs	r1, #253	; 0xfd
    1ff0:	2390      	movs	r3, #144	; 0x90
    1ff2:	005b      	lsls	r3, r3, #1
    1ff4:	4a1b      	ldr	r2, [pc, #108]	; (2064 <STACK_SIZE+0x64>)
    1ff6:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1ff8:	4a1b      	ldr	r2, [pc, #108]	; (2068 <STACK_SIZE+0x68>)
    1ffa:	78d3      	ldrb	r3, [r2, #3]
    1ffc:	2503      	movs	r5, #3
    1ffe:	43ab      	bics	r3, r5
    2000:	2402      	movs	r4, #2
    2002:	4323      	orrs	r3, r4
    2004:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2006:	78d3      	ldrb	r3, [r2, #3]
    2008:	270c      	movs	r7, #12
    200a:	43bb      	bics	r3, r7
    200c:	2608      	movs	r6, #8
    200e:	4333      	orrs	r3, r6
    2010:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    2012:	4b16      	ldr	r3, [pc, #88]	; (206c <STACK_SIZE+0x6c>)
    2014:	7b98      	ldrb	r0, [r3, #14]
    2016:	2230      	movs	r2, #48	; 0x30
    2018:	4390      	bics	r0, r2
    201a:	2220      	movs	r2, #32
    201c:	4310      	orrs	r0, r2
    201e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2020:	7b99      	ldrb	r1, [r3, #14]
    2022:	43b9      	bics	r1, r7
    2024:	4331      	orrs	r1, r6
    2026:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2028:	7b9a      	ldrb	r2, [r3, #14]
    202a:	43aa      	bics	r2, r5
    202c:	4322      	orrs	r2, r4
    202e:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2030:	4a0f      	ldr	r2, [pc, #60]	; (2070 <STACK_SIZE+0x70>)
    2032:	6853      	ldr	r3, [r2, #4]
    2034:	2180      	movs	r1, #128	; 0x80
    2036:	430b      	orrs	r3, r1
    2038:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    203a:	4b0e      	ldr	r3, [pc, #56]	; (2074 <STACK_SIZE+0x74>)
    203c:	4798      	blx	r3
        main();
    203e:	4b0e      	ldr	r3, [pc, #56]	; (2078 <STACK_SIZE+0x78>)
    2040:	4798      	blx	r3
    2042:	e7fe      	b.n	2042 <STACK_SIZE+0x42>
    2044:	00002378 	.word	0x00002378
    2048:	20000000 	.word	0x20000000
    204c:	20000008 	.word	0x20000008
    2050:	20000004 	.word	0x20000004
    2054:	20000008 	.word	0x20000008
    2058:	2000306c 	.word	0x2000306c
    205c:	e000ed00 	.word	0xe000ed00
    2060:	00000000 	.word	0x00000000
    2064:	41007000 	.word	0x41007000
    2068:	41005000 	.word	0x41005000
    206c:	41004800 	.word	0x41004800
    2070:	41004000 	.word	0x41004000
    2074:	00002255 	.word	0x00002255
    2078:	00002115 	.word	0x00002115

0000207c <LEDTask1>:

/******************************************************************************
* Function Implementations
******************************************************************************/

void LEDTask1(void * parameter) {
    207c:	b5f0      	push	{r4, r5, r6, r7, lr}
    207e:	46c6      	mov	lr, r8
    2080:	b500      	push	{lr}
    2082:	4e07      	ldr	r6, [pc, #28]	; (20a0 <LEDTask1+0x24>)
    2084:	2780      	movs	r7, #128	; 0x80
    2086:	043f      	lsls	r7, r7, #16
    2088:	46b8      	mov	r8, r7
    208a:	4643      	mov	r3, r8
    208c:	61b3      	str	r3, [r6, #24]
	while(1) {
		port_pin_set_output_level(LED_0_PIN, true);
		vTaskDelay(500/portTICK_PERIOD_MS);
    208e:	25fa      	movs	r5, #250	; 0xfa
    2090:	006d      	lsls	r5, r5, #1
    2092:	0028      	movs	r0, r5
    2094:	4c03      	ldr	r4, [pc, #12]	; (20a4 <LEDTask1+0x28>)
    2096:	47a0      	blx	r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2098:	6177      	str	r7, [r6, #20]
		port_pin_set_output_level(LED_0_PIN, false);
		vTaskDelay(500/portTICK_PERIOD_MS);
    209a:	0028      	movs	r0, r5
    209c:	47a0      	blx	r4
    209e:	e7f4      	b.n	208a <LEDTask1+0xe>
    20a0:	41004400 	.word	0x41004400
    20a4:	0000106d 	.word	0x0000106d

000020a8 <LEDTask2>:
	}
}

void LEDTask2(void * parameter) {
    20a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    20aa:	46c6      	mov	lr, r8
    20ac:	b500      	push	{lr}
		port_base->OUTSET.reg = pin_mask;
    20ae:	4e07      	ldr	r6, [pc, #28]	; (20cc <LEDTask2+0x24>)
    20b0:	2780      	movs	r7, #128	; 0x80
    20b2:	043f      	lsls	r7, r7, #16
    20b4:	46b8      	mov	r8, r7
    20b6:	4643      	mov	r3, r8
    20b8:	61b3      	str	r3, [r6, #24]
	while(1) {
		port_pin_set_output_level(LED_0_PIN, true);
		vTaskDelay(300/portTICK_PERIOD_MS);
    20ba:	2596      	movs	r5, #150	; 0x96
    20bc:	006d      	lsls	r5, r5, #1
    20be:	0028      	movs	r0, r5
    20c0:	4c03      	ldr	r4, [pc, #12]	; (20d0 <LEDTask2+0x28>)
    20c2:	47a0      	blx	r4
		port_base->OUTCLR.reg = pin_mask;
    20c4:	6177      	str	r7, [r6, #20]
		port_pin_set_output_level(LED_0_PIN, false);
		vTaskDelay(300/portTICK_PERIOD_MS);
    20c6:	0028      	movs	r0, r5
    20c8:	47a0      	blx	r4
    20ca:	e7f4      	b.n	20b6 <LEDTask2+0xe>
    20cc:	41004400 	.word	0x41004400
    20d0:	0000106d 	.word	0x0000106d

000020d4 <CreateTasks>:
	}
}

BaseType_t CreateTasks(void) {
    20d4:	b570      	push	{r4, r5, r6, lr}
    20d6:	b082      	sub	sp, #8
	BaseType_t xReturn;
	
	xReturn = xTaskCreate(LEDTask1,
    20d8:	2600      	movs	r6, #0
    20da:	9601      	str	r6, [sp, #4]
    20dc:	2501      	movs	r5, #1
    20de:	9500      	str	r5, [sp, #0]
    20e0:	2300      	movs	r3, #0
    20e2:	2282      	movs	r2, #130	; 0x82
    20e4:	4906      	ldr	r1, [pc, #24]	; (2100 <CreateTasks+0x2c>)
    20e6:	4807      	ldr	r0, [pc, #28]	; (2104 <CreateTasks+0x30>)
    20e8:	4c07      	ldr	r4, [pc, #28]	; (2108 <CreateTasks+0x34>)
    20ea:	47a0      	blx	r4
						130,
						NULL,
						1,
						NULL);
	
	xReturn = xTaskCreate(LEDTask2,
    20ec:	9601      	str	r6, [sp, #4]
    20ee:	9500      	str	r5, [sp, #0]
    20f0:	2300      	movs	r3, #0
    20f2:	2282      	movs	r2, #130	; 0x82
    20f4:	4905      	ldr	r1, [pc, #20]	; (210c <CreateTasks+0x38>)
    20f6:	4806      	ldr	r0, [pc, #24]	; (2110 <CreateTasks+0x3c>)
    20f8:	47a0      	blx	r4
						NULL,
						1,
						NULL);
	
	return xReturn;
}
    20fa:	b002      	add	sp, #8
    20fc:	bd70      	pop	{r4, r5, r6, pc}
    20fe:	46c0      	nop			; (mov r8, r8)
    2100:	00002340 	.word	0x00002340
    2104:	0000207d 	.word	0x0000207d
    2108:	00000bd5 	.word	0x00000bd5
    210c:	0000234c 	.word	0x0000234c
    2110:	000020a9 	.word	0x000020a9

00002114 <main>:

int main (void)
{
    2114:	b510      	push	{r4, lr}
	system_init();
    2116:	4b04      	ldr	r3, [pc, #16]	; (2128 <main+0x14>)
    2118:	4798      	blx	r3

	CreateTasks();
    211a:	4b04      	ldr	r3, [pc, #16]	; (212c <main+0x18>)
    211c:	4798      	blx	r3
				
	vTaskStartScheduler();
    211e:	4b04      	ldr	r3, [pc, #16]	; (2130 <main+0x1c>)
    2120:	4798      	blx	r3
}
    2122:	2000      	movs	r0, #0
    2124:	bd10      	pop	{r4, pc}
    2126:	46c0      	nop			; (mov r8, r8)
    2128:	00001f69 	.word	0x00001f69
    212c:	000020d5 	.word	0x000020d5
    2130:	00000dc1 	.word	0x00000dc1

00002134 <vApplicationDaemonTaskStartupHook>:

void vApplicationDaemonTaskStartupHook(void)
{
}
    2134:	4770      	bx	lr

00002136 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook(void)
{
    2136:	e7fe      	b.n	2136 <vApplicationMallocFailedHook>

00002138 <vApplicationStackOverflowHook>:
	while(1);
}

void vApplicationStackOverflowHook(void)
{
    2138:	e7fe      	b.n	2138 <vApplicationStackOverflowHook>
	...

0000213c <__udivsi3>:
    213c:	2200      	movs	r2, #0
    213e:	0843      	lsrs	r3, r0, #1
    2140:	428b      	cmp	r3, r1
    2142:	d374      	bcc.n	222e <__udivsi3+0xf2>
    2144:	0903      	lsrs	r3, r0, #4
    2146:	428b      	cmp	r3, r1
    2148:	d35f      	bcc.n	220a <__udivsi3+0xce>
    214a:	0a03      	lsrs	r3, r0, #8
    214c:	428b      	cmp	r3, r1
    214e:	d344      	bcc.n	21da <__udivsi3+0x9e>
    2150:	0b03      	lsrs	r3, r0, #12
    2152:	428b      	cmp	r3, r1
    2154:	d328      	bcc.n	21a8 <__udivsi3+0x6c>
    2156:	0c03      	lsrs	r3, r0, #16
    2158:	428b      	cmp	r3, r1
    215a:	d30d      	bcc.n	2178 <__udivsi3+0x3c>
    215c:	22ff      	movs	r2, #255	; 0xff
    215e:	0209      	lsls	r1, r1, #8
    2160:	ba12      	rev	r2, r2
    2162:	0c03      	lsrs	r3, r0, #16
    2164:	428b      	cmp	r3, r1
    2166:	d302      	bcc.n	216e <__udivsi3+0x32>
    2168:	1212      	asrs	r2, r2, #8
    216a:	0209      	lsls	r1, r1, #8
    216c:	d065      	beq.n	223a <__udivsi3+0xfe>
    216e:	0b03      	lsrs	r3, r0, #12
    2170:	428b      	cmp	r3, r1
    2172:	d319      	bcc.n	21a8 <__udivsi3+0x6c>
    2174:	e000      	b.n	2178 <__udivsi3+0x3c>
    2176:	0a09      	lsrs	r1, r1, #8
    2178:	0bc3      	lsrs	r3, r0, #15
    217a:	428b      	cmp	r3, r1
    217c:	d301      	bcc.n	2182 <__udivsi3+0x46>
    217e:	03cb      	lsls	r3, r1, #15
    2180:	1ac0      	subs	r0, r0, r3
    2182:	4152      	adcs	r2, r2
    2184:	0b83      	lsrs	r3, r0, #14
    2186:	428b      	cmp	r3, r1
    2188:	d301      	bcc.n	218e <__udivsi3+0x52>
    218a:	038b      	lsls	r3, r1, #14
    218c:	1ac0      	subs	r0, r0, r3
    218e:	4152      	adcs	r2, r2
    2190:	0b43      	lsrs	r3, r0, #13
    2192:	428b      	cmp	r3, r1
    2194:	d301      	bcc.n	219a <__udivsi3+0x5e>
    2196:	034b      	lsls	r3, r1, #13
    2198:	1ac0      	subs	r0, r0, r3
    219a:	4152      	adcs	r2, r2
    219c:	0b03      	lsrs	r3, r0, #12
    219e:	428b      	cmp	r3, r1
    21a0:	d301      	bcc.n	21a6 <__udivsi3+0x6a>
    21a2:	030b      	lsls	r3, r1, #12
    21a4:	1ac0      	subs	r0, r0, r3
    21a6:	4152      	adcs	r2, r2
    21a8:	0ac3      	lsrs	r3, r0, #11
    21aa:	428b      	cmp	r3, r1
    21ac:	d301      	bcc.n	21b2 <__udivsi3+0x76>
    21ae:	02cb      	lsls	r3, r1, #11
    21b0:	1ac0      	subs	r0, r0, r3
    21b2:	4152      	adcs	r2, r2
    21b4:	0a83      	lsrs	r3, r0, #10
    21b6:	428b      	cmp	r3, r1
    21b8:	d301      	bcc.n	21be <__udivsi3+0x82>
    21ba:	028b      	lsls	r3, r1, #10
    21bc:	1ac0      	subs	r0, r0, r3
    21be:	4152      	adcs	r2, r2
    21c0:	0a43      	lsrs	r3, r0, #9
    21c2:	428b      	cmp	r3, r1
    21c4:	d301      	bcc.n	21ca <__udivsi3+0x8e>
    21c6:	024b      	lsls	r3, r1, #9
    21c8:	1ac0      	subs	r0, r0, r3
    21ca:	4152      	adcs	r2, r2
    21cc:	0a03      	lsrs	r3, r0, #8
    21ce:	428b      	cmp	r3, r1
    21d0:	d301      	bcc.n	21d6 <__udivsi3+0x9a>
    21d2:	020b      	lsls	r3, r1, #8
    21d4:	1ac0      	subs	r0, r0, r3
    21d6:	4152      	adcs	r2, r2
    21d8:	d2cd      	bcs.n	2176 <__udivsi3+0x3a>
    21da:	09c3      	lsrs	r3, r0, #7
    21dc:	428b      	cmp	r3, r1
    21de:	d301      	bcc.n	21e4 <__udivsi3+0xa8>
    21e0:	01cb      	lsls	r3, r1, #7
    21e2:	1ac0      	subs	r0, r0, r3
    21e4:	4152      	adcs	r2, r2
    21e6:	0983      	lsrs	r3, r0, #6
    21e8:	428b      	cmp	r3, r1
    21ea:	d301      	bcc.n	21f0 <__udivsi3+0xb4>
    21ec:	018b      	lsls	r3, r1, #6
    21ee:	1ac0      	subs	r0, r0, r3
    21f0:	4152      	adcs	r2, r2
    21f2:	0943      	lsrs	r3, r0, #5
    21f4:	428b      	cmp	r3, r1
    21f6:	d301      	bcc.n	21fc <__udivsi3+0xc0>
    21f8:	014b      	lsls	r3, r1, #5
    21fa:	1ac0      	subs	r0, r0, r3
    21fc:	4152      	adcs	r2, r2
    21fe:	0903      	lsrs	r3, r0, #4
    2200:	428b      	cmp	r3, r1
    2202:	d301      	bcc.n	2208 <__udivsi3+0xcc>
    2204:	010b      	lsls	r3, r1, #4
    2206:	1ac0      	subs	r0, r0, r3
    2208:	4152      	adcs	r2, r2
    220a:	08c3      	lsrs	r3, r0, #3
    220c:	428b      	cmp	r3, r1
    220e:	d301      	bcc.n	2214 <__udivsi3+0xd8>
    2210:	00cb      	lsls	r3, r1, #3
    2212:	1ac0      	subs	r0, r0, r3
    2214:	4152      	adcs	r2, r2
    2216:	0883      	lsrs	r3, r0, #2
    2218:	428b      	cmp	r3, r1
    221a:	d301      	bcc.n	2220 <__udivsi3+0xe4>
    221c:	008b      	lsls	r3, r1, #2
    221e:	1ac0      	subs	r0, r0, r3
    2220:	4152      	adcs	r2, r2
    2222:	0843      	lsrs	r3, r0, #1
    2224:	428b      	cmp	r3, r1
    2226:	d301      	bcc.n	222c <__udivsi3+0xf0>
    2228:	004b      	lsls	r3, r1, #1
    222a:	1ac0      	subs	r0, r0, r3
    222c:	4152      	adcs	r2, r2
    222e:	1a41      	subs	r1, r0, r1
    2230:	d200      	bcs.n	2234 <__udivsi3+0xf8>
    2232:	4601      	mov	r1, r0
    2234:	4152      	adcs	r2, r2
    2236:	4610      	mov	r0, r2
    2238:	4770      	bx	lr
    223a:	e7ff      	b.n	223c <__udivsi3+0x100>
    223c:	b501      	push	{r0, lr}
    223e:	2000      	movs	r0, #0
    2240:	f000 f806 	bl	2250 <__aeabi_idiv0>
    2244:	bd02      	pop	{r1, pc}
    2246:	46c0      	nop			; (mov r8, r8)

00002248 <__aeabi_uidivmod>:
    2248:	2900      	cmp	r1, #0
    224a:	d0f7      	beq.n	223c <__udivsi3+0x100>
    224c:	e776      	b.n	213c <__udivsi3>
    224e:	4770      	bx	lr

00002250 <__aeabi_idiv0>:
    2250:	4770      	bx	lr
    2252:	46c0      	nop			; (mov r8, r8)

00002254 <__libc_init_array>:
    2254:	b570      	push	{r4, r5, r6, lr}
    2256:	2600      	movs	r6, #0
    2258:	4d0c      	ldr	r5, [pc, #48]	; (228c <__libc_init_array+0x38>)
    225a:	4c0d      	ldr	r4, [pc, #52]	; (2290 <__libc_init_array+0x3c>)
    225c:	1b64      	subs	r4, r4, r5
    225e:	10a4      	asrs	r4, r4, #2
    2260:	42a6      	cmp	r6, r4
    2262:	d109      	bne.n	2278 <__libc_init_array+0x24>
    2264:	2600      	movs	r6, #0
    2266:	f000 f877 	bl	2358 <_init>
    226a:	4d0a      	ldr	r5, [pc, #40]	; (2294 <__libc_init_array+0x40>)
    226c:	4c0a      	ldr	r4, [pc, #40]	; (2298 <__libc_init_array+0x44>)
    226e:	1b64      	subs	r4, r4, r5
    2270:	10a4      	asrs	r4, r4, #2
    2272:	42a6      	cmp	r6, r4
    2274:	d105      	bne.n	2282 <__libc_init_array+0x2e>
    2276:	bd70      	pop	{r4, r5, r6, pc}
    2278:	00b3      	lsls	r3, r6, #2
    227a:	58eb      	ldr	r3, [r5, r3]
    227c:	4798      	blx	r3
    227e:	3601      	adds	r6, #1
    2280:	e7ee      	b.n	2260 <__libc_init_array+0xc>
    2282:	00b3      	lsls	r3, r6, #2
    2284:	58eb      	ldr	r3, [r5, r3]
    2286:	4798      	blx	r3
    2288:	3601      	adds	r6, #1
    228a:	e7f2      	b.n	2272 <__libc_init_array+0x1e>
    228c:	00002364 	.word	0x00002364
    2290:	00002364 	.word	0x00002364
    2294:	00002364 	.word	0x00002364
    2298:	00002368 	.word	0x00002368

0000229c <memcpy>:
    229c:	2300      	movs	r3, #0
    229e:	b510      	push	{r4, lr}
    22a0:	429a      	cmp	r2, r3
    22a2:	d100      	bne.n	22a6 <memcpy+0xa>
    22a4:	bd10      	pop	{r4, pc}
    22a6:	5ccc      	ldrb	r4, [r1, r3]
    22a8:	54c4      	strb	r4, [r0, r3]
    22aa:	3301      	adds	r3, #1
    22ac:	e7f8      	b.n	22a0 <memcpy+0x4>

000022ae <memset>:
    22ae:	0003      	movs	r3, r0
    22b0:	1882      	adds	r2, r0, r2
    22b2:	4293      	cmp	r3, r2
    22b4:	d100      	bne.n	22b8 <memset+0xa>
    22b6:	4770      	bx	lr
    22b8:	7019      	strb	r1, [r3, #0]
    22ba:	3301      	adds	r3, #1
    22bc:	e7f9      	b.n	22b2 <memset+0x4>
    22be:	0000      	movs	r0, r0
    22c0:	454c4449 	.word	0x454c4449
    22c4:	00000000 	.word	0x00000000
    22c8:	00001688 	.word	0x00001688
    22cc:	00001688 	.word	0x00001688
    22d0:	00001688 	.word	0x00001688
    22d4:	00001600 	.word	0x00001600
    22d8:	000016ca 	.word	0x000016ca
    22dc:	000016e4 	.word	0x000016e4
    22e0:	00001688 	.word	0x00001688
    22e4:	00001688 	.word	0x00001688
    22e8:	00001600 	.word	0x00001600
    22ec:	000016ca 	.word	0x000016ca
    22f0:	20726d54 	.word	0x20726d54
    22f4:	00637653 	.word	0x00637653
    22f8:	00001806 	.word	0x00001806
    22fc:	00001802 	.word	0x00001802
    2300:	00001802 	.word	0x00001802
    2304:	00001868 	.word	0x00001868
    2308:	00001868 	.word	0x00001868
    230c:	0000181a 	.word	0x0000181a
    2310:	0000180c 	.word	0x0000180c
    2314:	00001820 	.word	0x00001820
    2318:	00001856 	.word	0x00001856
    231c:	00001a28 	.word	0x00001a28
    2320:	00001a08 	.word	0x00001a08
    2324:	00001a08 	.word	0x00001a08
    2328:	00001a94 	.word	0x00001a94
    232c:	00001a1a 	.word	0x00001a1a
    2330:	00001a36 	.word	0x00001a36
    2334:	00001a0c 	.word	0x00001a0c
    2338:	00001a44 	.word	0x00001a44
    233c:	00001a84 	.word	0x00001a84
    2340:	2044454c 	.word	0x2044454c
    2344:	6b736154 	.word	0x6b736154
    2348:	00003120 	.word	0x00003120
    234c:	2044454c 	.word	0x2044454c
    2350:	6b736154 	.word	0x6b736154
    2354:	00000032 	.word	0x00000032

00002358 <_init>:
    2358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    235a:	46c0      	nop			; (mov r8, r8)
    235c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    235e:	bc08      	pop	{r3}
    2360:	469e      	mov	lr, r3
    2362:	4770      	bx	lr

00002364 <__init_array_start>:
    2364:	000000dd 	.word	0x000000dd

00002368 <_fini>:
    2368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    236a:	46c0      	nop			; (mov r8, r8)
    236c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    236e:	bc08      	pop	{r3}
    2370:	469e      	mov	lr, r3
    2372:	4770      	bx	lr

00002374 <__fini_array_start>:
    2374:	000000b5 	.word	0x000000b5
