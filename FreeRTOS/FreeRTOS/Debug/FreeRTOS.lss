
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003204  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000006c  20000000  00003204  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000034ec  2000006c  00003270  0002006c  2**2
                  ALLOC
  3 .stack        00002000  20003558  0000675c  0002006c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002afcd  00000000  00000000  000200ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000046e5  00000000  00000000  0004b0ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000093b6  00000000  00000000  0004f79f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000938  00000000  00000000  00058b55  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b58  00000000  00000000  0005948d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001c286  00000000  00000000  00059fe5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000f732  00000000  00000000  0007626b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00092b51  00000000  00000000  0008599d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000018ec  00000000  00000000  001184f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	58 55 00 20 69 2c 00 00 65 2c 00 00 65 2c 00 00     XU. i,..e,..e,..
	...
      2c:	65 0c 00 00 00 00 00 00 00 00 00 00 41 0d 00 00     e...........A...
      3c:	85 0d 00 00 65 2c 00 00 65 2c 00 00 65 2c 00 00     ....e,..e,..e,..
      4c:	65 2c 00 00 65 2c 00 00 65 2c 00 00 65 2c 00 00     e,..e,..e,..e,..
      5c:	65 2c 00 00 65 2c 00 00 81 0b 00 00 91 0b 00 00     e,..e,..........
      6c:	a1 0b 00 00 b1 0b 00 00 c1 0b 00 00 d1 0b 00 00     ................
      7c:	65 2c 00 00 65 2c 00 00 65 2c 00 00 65 2c 00 00     e,..e,..e,..e,..
      8c:	65 2c 00 00 65 2c 00 00 00 00 00 00 00 00 00 00     e,..e,..........
      9c:	65 2c 00 00 65 2c 00 00 65 2c 00 00 65 2c 00 00     e,..e,..e,..e,..
      ac:	65 2c 00 00 00 00 00 00                             e,......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000006c 	.word	0x2000006c
      d4:	00000000 	.word	0x00000000
      d8:	00003204 	.word	0x00003204

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000070 	.word	0x20000070
     108:	00003204 	.word	0x00003204
     10c:	00003204 	.word	0x00003204
     110:	00000000 	.word	0x00000000

00000114 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
     116:	46de      	mov	lr, fp
     118:	4657      	mov	r7, sl
     11a:	464e      	mov	r6, r9
     11c:	4645      	mov	r5, r8
     11e:	b5e0      	push	{r5, r6, r7, lr}
     120:	b087      	sub	sp, #28
     122:	4680      	mov	r8, r0
     124:	9104      	str	r1, [sp, #16]
     126:	0016      	movs	r6, r2
     128:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     12a:	2200      	movs	r2, #0
     12c:	2300      	movs	r3, #0
     12e:	2100      	movs	r1, #0
     130:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     132:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     134:	2001      	movs	r0, #1
     136:	0021      	movs	r1, r4
     138:	9600      	str	r6, [sp, #0]
     13a:	9701      	str	r7, [sp, #4]
     13c:	465c      	mov	r4, fp
     13e:	9403      	str	r4, [sp, #12]
     140:	4644      	mov	r4, r8
     142:	9405      	str	r4, [sp, #20]
     144:	e013      	b.n	16e <long_division+0x5a>
     146:	2420      	movs	r4, #32
     148:	1a64      	subs	r4, r4, r1
     14a:	0005      	movs	r5, r0
     14c:	40e5      	lsrs	r5, r4
     14e:	46a8      	mov	r8, r5
     150:	e014      	b.n	17c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     152:	9c00      	ldr	r4, [sp, #0]
     154:	9d01      	ldr	r5, [sp, #4]
     156:	1b12      	subs	r2, r2, r4
     158:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     15a:	465c      	mov	r4, fp
     15c:	464d      	mov	r5, r9
     15e:	432c      	orrs	r4, r5
     160:	46a3      	mov	fp, r4
     162:	9c03      	ldr	r4, [sp, #12]
     164:	4645      	mov	r5, r8
     166:	432c      	orrs	r4, r5
     168:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     16a:	3901      	subs	r1, #1
     16c:	d325      	bcc.n	1ba <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     16e:	2420      	movs	r4, #32
     170:	4264      	negs	r4, r4
     172:	190c      	adds	r4, r1, r4
     174:	d4e7      	bmi.n	146 <long_division+0x32>
     176:	0005      	movs	r5, r0
     178:	40a5      	lsls	r5, r4
     17a:	46a8      	mov	r8, r5
     17c:	0004      	movs	r4, r0
     17e:	408c      	lsls	r4, r1
     180:	46a1      	mov	r9, r4
		r = r << 1;
     182:	1892      	adds	r2, r2, r2
     184:	415b      	adcs	r3, r3
     186:	0014      	movs	r4, r2
     188:	001d      	movs	r5, r3
		if (n & bit_shift) {
     18a:	9e05      	ldr	r6, [sp, #20]
     18c:	464f      	mov	r7, r9
     18e:	403e      	ands	r6, r7
     190:	46b4      	mov	ip, r6
     192:	9e04      	ldr	r6, [sp, #16]
     194:	4647      	mov	r7, r8
     196:	403e      	ands	r6, r7
     198:	46b2      	mov	sl, r6
     19a:	4666      	mov	r6, ip
     19c:	4657      	mov	r7, sl
     19e:	433e      	orrs	r6, r7
     1a0:	d003      	beq.n	1aa <long_division+0x96>
			r |= 0x01;
     1a2:	0006      	movs	r6, r0
     1a4:	4326      	orrs	r6, r4
     1a6:	0032      	movs	r2, r6
     1a8:	002b      	movs	r3, r5
		if (r >= d) {
     1aa:	9c00      	ldr	r4, [sp, #0]
     1ac:	9d01      	ldr	r5, [sp, #4]
     1ae:	429d      	cmp	r5, r3
     1b0:	d8db      	bhi.n	16a <long_division+0x56>
     1b2:	d1ce      	bne.n	152 <long_division+0x3e>
     1b4:	4294      	cmp	r4, r2
     1b6:	d8d8      	bhi.n	16a <long_division+0x56>
     1b8:	e7cb      	b.n	152 <long_division+0x3e>
     1ba:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     1bc:	4658      	mov	r0, fp
     1be:	0019      	movs	r1, r3
     1c0:	b007      	add	sp, #28
     1c2:	bc3c      	pop	{r2, r3, r4, r5}
     1c4:	4690      	mov	r8, r2
     1c6:	4699      	mov	r9, r3
     1c8:	46a2      	mov	sl, r4
     1ca:	46ab      	mov	fp, r5
     1cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000001ce <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     1ce:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     1d0:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     1d2:	2340      	movs	r3, #64	; 0x40
     1d4:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     1d6:	4281      	cmp	r1, r0
     1d8:	d202      	bcs.n	1e0 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     1da:	0018      	movs	r0, r3
     1dc:	bd10      	pop	{r4, pc}
		baud_calculated++;
     1de:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     1e0:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     1e2:	1c63      	adds	r3, r4, #1
     1e4:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     1e6:	4288      	cmp	r0, r1
     1e8:	d9f9      	bls.n	1de <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     1ea:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     1ec:	2cff      	cmp	r4, #255	; 0xff
     1ee:	d8f4      	bhi.n	1da <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     1f0:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     1f2:	2300      	movs	r3, #0
     1f4:	e7f1      	b.n	1da <_sercom_get_sync_baud_val+0xc>
	...

000001f8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     1fa:	b083      	sub	sp, #12
     1fc:	000f      	movs	r7, r1
     1fe:	0016      	movs	r6, r2
     200:	aa08      	add	r2, sp, #32
     202:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     204:	0004      	movs	r4, r0
     206:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     208:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     20a:	42bc      	cmp	r4, r7
     20c:	d902      	bls.n	214 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     20e:	0010      	movs	r0, r2
     210:	b003      	add	sp, #12
     212:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     214:	2b00      	cmp	r3, #0
     216:	d114      	bne.n	242 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     218:	0002      	movs	r2, r0
     21a:	0008      	movs	r0, r1
     21c:	2100      	movs	r1, #0
     21e:	4c19      	ldr	r4, [pc, #100]	; (284 <_sercom_get_async_baud_val+0x8c>)
     220:	47a0      	blx	r4
     222:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     224:	003a      	movs	r2, r7
     226:	2300      	movs	r3, #0
     228:	2000      	movs	r0, #0
     22a:	4c17      	ldr	r4, [pc, #92]	; (288 <_sercom_get_async_baud_val+0x90>)
     22c:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     22e:	2200      	movs	r2, #0
     230:	2301      	movs	r3, #1
     232:	1a12      	subs	r2, r2, r0
     234:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     236:	0c12      	lsrs	r2, r2, #16
     238:	041b      	lsls	r3, r3, #16
     23a:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     23c:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     23e:	2200      	movs	r2, #0
     240:	e7e5      	b.n	20e <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     242:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     244:	2b01      	cmp	r3, #1
     246:	d1f9      	bne.n	23c <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     248:	000a      	movs	r2, r1
     24a:	2300      	movs	r3, #0
     24c:	2100      	movs	r1, #0
     24e:	4c0d      	ldr	r4, [pc, #52]	; (284 <_sercom_get_async_baud_val+0x8c>)
     250:	47a0      	blx	r4
     252:	0002      	movs	r2, r0
     254:	000b      	movs	r3, r1
     256:	9200      	str	r2, [sp, #0]
     258:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     25a:	0038      	movs	r0, r7
     25c:	2100      	movs	r1, #0
     25e:	4c0a      	ldr	r4, [pc, #40]	; (288 <_sercom_get_async_baud_val+0x90>)
     260:	47a0      	blx	r4
     262:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     264:	2380      	movs	r3, #128	; 0x80
     266:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     268:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     26a:	4298      	cmp	r0, r3
     26c:	d8cf      	bhi.n	20e <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     26e:	0f79      	lsrs	r1, r7, #29
     270:	00f8      	lsls	r0, r7, #3
     272:	9a00      	ldr	r2, [sp, #0]
     274:	9b01      	ldr	r3, [sp, #4]
     276:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     278:	00ea      	lsls	r2, r5, #3
     27a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     27c:	b2d2      	uxtb	r2, r2
     27e:	0352      	lsls	r2, r2, #13
     280:	432a      	orrs	r2, r5
     282:	e7db      	b.n	23c <_sercom_get_async_baud_val+0x44>
     284:	00002f5d 	.word	0x00002f5d
     288:	00000115 	.word	0x00000115

0000028c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     28c:	b510      	push	{r4, lr}
     28e:	b082      	sub	sp, #8
     290:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     292:	4b0e      	ldr	r3, [pc, #56]	; (2cc <sercom_set_gclk_generator+0x40>)
     294:	781b      	ldrb	r3, [r3, #0]
     296:	2b00      	cmp	r3, #0
     298:	d007      	beq.n	2aa <sercom_set_gclk_generator+0x1e>
     29a:	2900      	cmp	r1, #0
     29c:	d105      	bne.n	2aa <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     29e:	4b0b      	ldr	r3, [pc, #44]	; (2cc <sercom_set_gclk_generator+0x40>)
     2a0:	785b      	ldrb	r3, [r3, #1]
     2a2:	4283      	cmp	r3, r0
     2a4:	d010      	beq.n	2c8 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     2a6:	201d      	movs	r0, #29
     2a8:	e00c      	b.n	2c4 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     2aa:	a901      	add	r1, sp, #4
     2ac:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     2ae:	2013      	movs	r0, #19
     2b0:	4b07      	ldr	r3, [pc, #28]	; (2d0 <sercom_set_gclk_generator+0x44>)
     2b2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     2b4:	2013      	movs	r0, #19
     2b6:	4b07      	ldr	r3, [pc, #28]	; (2d4 <sercom_set_gclk_generator+0x48>)
     2b8:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     2ba:	4b04      	ldr	r3, [pc, #16]	; (2cc <sercom_set_gclk_generator+0x40>)
     2bc:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     2be:	2201      	movs	r2, #1
     2c0:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     2c2:	2000      	movs	r0, #0
}
     2c4:	b002      	add	sp, #8
     2c6:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     2c8:	2000      	movs	r0, #0
     2ca:	e7fb      	b.n	2c4 <sercom_set_gclk_generator+0x38>
     2cc:	20000088 	.word	0x20000088
     2d0:	00002b0d 	.word	0x00002b0d
     2d4:	00002a81 	.word	0x00002a81

000002d8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     2d8:	4b40      	ldr	r3, [pc, #256]	; (3dc <_sercom_get_default_pad+0x104>)
     2da:	4298      	cmp	r0, r3
     2dc:	d031      	beq.n	342 <_sercom_get_default_pad+0x6a>
     2de:	d90a      	bls.n	2f6 <_sercom_get_default_pad+0x1e>
     2e0:	4b3f      	ldr	r3, [pc, #252]	; (3e0 <_sercom_get_default_pad+0x108>)
     2e2:	4298      	cmp	r0, r3
     2e4:	d04d      	beq.n	382 <_sercom_get_default_pad+0xaa>
     2e6:	4b3f      	ldr	r3, [pc, #252]	; (3e4 <_sercom_get_default_pad+0x10c>)
     2e8:	4298      	cmp	r0, r3
     2ea:	d05a      	beq.n	3a2 <_sercom_get_default_pad+0xca>
     2ec:	4b3e      	ldr	r3, [pc, #248]	; (3e8 <_sercom_get_default_pad+0x110>)
     2ee:	4298      	cmp	r0, r3
     2f0:	d037      	beq.n	362 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     2f2:	2000      	movs	r0, #0
}
     2f4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     2f6:	4b3d      	ldr	r3, [pc, #244]	; (3ec <_sercom_get_default_pad+0x114>)
     2f8:	4298      	cmp	r0, r3
     2fa:	d00c      	beq.n	316 <_sercom_get_default_pad+0x3e>
     2fc:	4b3c      	ldr	r3, [pc, #240]	; (3f0 <_sercom_get_default_pad+0x118>)
     2fe:	4298      	cmp	r0, r3
     300:	d1f7      	bne.n	2f2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     302:	2901      	cmp	r1, #1
     304:	d017      	beq.n	336 <_sercom_get_default_pad+0x5e>
     306:	2900      	cmp	r1, #0
     308:	d05d      	beq.n	3c6 <_sercom_get_default_pad+0xee>
     30a:	2902      	cmp	r1, #2
     30c:	d015      	beq.n	33a <_sercom_get_default_pad+0x62>
     30e:	2903      	cmp	r1, #3
     310:	d015      	beq.n	33e <_sercom_get_default_pad+0x66>
	return 0;
     312:	2000      	movs	r0, #0
     314:	e7ee      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     316:	2901      	cmp	r1, #1
     318:	d007      	beq.n	32a <_sercom_get_default_pad+0x52>
     31a:	2900      	cmp	r1, #0
     31c:	d051      	beq.n	3c2 <_sercom_get_default_pad+0xea>
     31e:	2902      	cmp	r1, #2
     320:	d005      	beq.n	32e <_sercom_get_default_pad+0x56>
     322:	2903      	cmp	r1, #3
     324:	d005      	beq.n	332 <_sercom_get_default_pad+0x5a>
	return 0;
     326:	2000      	movs	r0, #0
     328:	e7e4      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     32a:	4832      	ldr	r0, [pc, #200]	; (3f4 <_sercom_get_default_pad+0x11c>)
     32c:	e7e2      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     32e:	4832      	ldr	r0, [pc, #200]	; (3f8 <_sercom_get_default_pad+0x120>)
     330:	e7e0      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     332:	4832      	ldr	r0, [pc, #200]	; (3fc <_sercom_get_default_pad+0x124>)
     334:	e7de      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     336:	4832      	ldr	r0, [pc, #200]	; (400 <_sercom_get_default_pad+0x128>)
     338:	e7dc      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     33a:	4832      	ldr	r0, [pc, #200]	; (404 <_sercom_get_default_pad+0x12c>)
     33c:	e7da      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     33e:	4832      	ldr	r0, [pc, #200]	; (408 <_sercom_get_default_pad+0x130>)
     340:	e7d8      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     342:	2901      	cmp	r1, #1
     344:	d007      	beq.n	356 <_sercom_get_default_pad+0x7e>
     346:	2900      	cmp	r1, #0
     348:	d03f      	beq.n	3ca <_sercom_get_default_pad+0xf2>
     34a:	2902      	cmp	r1, #2
     34c:	d005      	beq.n	35a <_sercom_get_default_pad+0x82>
     34e:	2903      	cmp	r1, #3
     350:	d005      	beq.n	35e <_sercom_get_default_pad+0x86>
	return 0;
     352:	2000      	movs	r0, #0
     354:	e7ce      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     356:	482d      	ldr	r0, [pc, #180]	; (40c <_sercom_get_default_pad+0x134>)
     358:	e7cc      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     35a:	482d      	ldr	r0, [pc, #180]	; (410 <_sercom_get_default_pad+0x138>)
     35c:	e7ca      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     35e:	482d      	ldr	r0, [pc, #180]	; (414 <_sercom_get_default_pad+0x13c>)
     360:	e7c8      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     362:	2901      	cmp	r1, #1
     364:	d007      	beq.n	376 <_sercom_get_default_pad+0x9e>
     366:	2900      	cmp	r1, #0
     368:	d031      	beq.n	3ce <_sercom_get_default_pad+0xf6>
     36a:	2902      	cmp	r1, #2
     36c:	d005      	beq.n	37a <_sercom_get_default_pad+0xa2>
     36e:	2903      	cmp	r1, #3
     370:	d005      	beq.n	37e <_sercom_get_default_pad+0xa6>
	return 0;
     372:	2000      	movs	r0, #0
     374:	e7be      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     376:	4828      	ldr	r0, [pc, #160]	; (418 <_sercom_get_default_pad+0x140>)
     378:	e7bc      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     37a:	4828      	ldr	r0, [pc, #160]	; (41c <_sercom_get_default_pad+0x144>)
     37c:	e7ba      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     37e:	4828      	ldr	r0, [pc, #160]	; (420 <_sercom_get_default_pad+0x148>)
     380:	e7b8      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     382:	2901      	cmp	r1, #1
     384:	d007      	beq.n	396 <_sercom_get_default_pad+0xbe>
     386:	2900      	cmp	r1, #0
     388:	d023      	beq.n	3d2 <_sercom_get_default_pad+0xfa>
     38a:	2902      	cmp	r1, #2
     38c:	d005      	beq.n	39a <_sercom_get_default_pad+0xc2>
     38e:	2903      	cmp	r1, #3
     390:	d005      	beq.n	39e <_sercom_get_default_pad+0xc6>
	return 0;
     392:	2000      	movs	r0, #0
     394:	e7ae      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     396:	4823      	ldr	r0, [pc, #140]	; (424 <_sercom_get_default_pad+0x14c>)
     398:	e7ac      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     39a:	4823      	ldr	r0, [pc, #140]	; (428 <_sercom_get_default_pad+0x150>)
     39c:	e7aa      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     39e:	4823      	ldr	r0, [pc, #140]	; (42c <_sercom_get_default_pad+0x154>)
     3a0:	e7a8      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3a2:	2901      	cmp	r1, #1
     3a4:	d007      	beq.n	3b6 <_sercom_get_default_pad+0xde>
     3a6:	2900      	cmp	r1, #0
     3a8:	d015      	beq.n	3d6 <_sercom_get_default_pad+0xfe>
     3aa:	2902      	cmp	r1, #2
     3ac:	d005      	beq.n	3ba <_sercom_get_default_pad+0xe2>
     3ae:	2903      	cmp	r1, #3
     3b0:	d005      	beq.n	3be <_sercom_get_default_pad+0xe6>
	return 0;
     3b2:	2000      	movs	r0, #0
     3b4:	e79e      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3b6:	481e      	ldr	r0, [pc, #120]	; (430 <_sercom_get_default_pad+0x158>)
     3b8:	e79c      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3ba:	481e      	ldr	r0, [pc, #120]	; (434 <_sercom_get_default_pad+0x15c>)
     3bc:	e79a      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3be:	481e      	ldr	r0, [pc, #120]	; (438 <_sercom_get_default_pad+0x160>)
     3c0:	e798      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3c2:	481e      	ldr	r0, [pc, #120]	; (43c <_sercom_get_default_pad+0x164>)
     3c4:	e796      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3c6:	2003      	movs	r0, #3
     3c8:	e794      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3ca:	481d      	ldr	r0, [pc, #116]	; (440 <_sercom_get_default_pad+0x168>)
     3cc:	e792      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3ce:	481d      	ldr	r0, [pc, #116]	; (444 <_sercom_get_default_pad+0x16c>)
     3d0:	e790      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3d2:	481d      	ldr	r0, [pc, #116]	; (448 <_sercom_get_default_pad+0x170>)
     3d4:	e78e      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3d6:	481d      	ldr	r0, [pc, #116]	; (44c <_sercom_get_default_pad+0x174>)
     3d8:	e78c      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3da:	46c0      	nop			; (mov r8, r8)
     3dc:	42001000 	.word	0x42001000
     3e0:	42001800 	.word	0x42001800
     3e4:	42001c00 	.word	0x42001c00
     3e8:	42001400 	.word	0x42001400
     3ec:	42000800 	.word	0x42000800
     3f0:	42000c00 	.word	0x42000c00
     3f4:	00050003 	.word	0x00050003
     3f8:	00060003 	.word	0x00060003
     3fc:	00070003 	.word	0x00070003
     400:	00010003 	.word	0x00010003
     404:	001e0003 	.word	0x001e0003
     408:	001f0003 	.word	0x001f0003
     40c:	00090003 	.word	0x00090003
     410:	000a0003 	.word	0x000a0003
     414:	000b0003 	.word	0x000b0003
     418:	00110003 	.word	0x00110003
     41c:	00120003 	.word	0x00120003
     420:	00130003 	.word	0x00130003
     424:	000d0003 	.word	0x000d0003
     428:	000e0003 	.word	0x000e0003
     42c:	000f0003 	.word	0x000f0003
     430:	00170003 	.word	0x00170003
     434:	00180003 	.word	0x00180003
     438:	00190003 	.word	0x00190003
     43c:	00040003 	.word	0x00040003
     440:	00080003 	.word	0x00080003
     444:	00100003 	.word	0x00100003
     448:	000c0003 	.word	0x000c0003
     44c:	00160003 	.word	0x00160003

00000450 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     450:	b530      	push	{r4, r5, lr}
     452:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     454:	4b0b      	ldr	r3, [pc, #44]	; (484 <_sercom_get_sercom_inst_index+0x34>)
     456:	466a      	mov	r2, sp
     458:	cb32      	ldmia	r3!, {r1, r4, r5}
     45a:	c232      	stmia	r2!, {r1, r4, r5}
     45c:	cb32      	ldmia	r3!, {r1, r4, r5}
     45e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     460:	9b00      	ldr	r3, [sp, #0]
     462:	4283      	cmp	r3, r0
     464:	d00b      	beq.n	47e <_sercom_get_sercom_inst_index+0x2e>
     466:	2301      	movs	r3, #1
     468:	009a      	lsls	r2, r3, #2
     46a:	4669      	mov	r1, sp
     46c:	5852      	ldr	r2, [r2, r1]
     46e:	4282      	cmp	r2, r0
     470:	d006      	beq.n	480 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     472:	3301      	adds	r3, #1
     474:	2b06      	cmp	r3, #6
     476:	d1f7      	bne.n	468 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     478:	2000      	movs	r0, #0
}
     47a:	b007      	add	sp, #28
     47c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     47e:	2300      	movs	r3, #0
			return i;
     480:	b2d8      	uxtb	r0, r3
     482:	e7fa      	b.n	47a <_sercom_get_sercom_inst_index+0x2a>
     484:	00003124 	.word	0x00003124

00000488 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
     488:	b510      	push	{r4, lr}
     48a:	0004      	movs	r4, r0
	 //assert(cbuf);

	 if(cbuf->full)
     48c:	7c03      	ldrb	r3, [r0, #16]
     48e:	2b00      	cmp	r3, #0
     490:	d005      	beq.n	49e <advance_pointer+0x16>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     492:	6883      	ldr	r3, [r0, #8]
     494:	1c58      	adds	r0, r3, #1
     496:	68e1      	ldr	r1, [r4, #12]
     498:	4b07      	ldr	r3, [pc, #28]	; (4b8 <advance_pointer+0x30>)
     49a:	4798      	blx	r3
     49c:	60a1      	str	r1, [r4, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
     49e:	6863      	ldr	r3, [r4, #4]
     4a0:	1c58      	adds	r0, r3, #1
     4a2:	68e1      	ldr	r1, [r4, #12]
     4a4:	4b04      	ldr	r3, [pc, #16]	; (4b8 <advance_pointer+0x30>)
     4a6:	4798      	blx	r3
     4a8:	6061      	str	r1, [r4, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
     4aa:	68a3      	ldr	r3, [r4, #8]
     4ac:	1a59      	subs	r1, r3, r1
     4ae:	424a      	negs	r2, r1
     4b0:	414a      	adcs	r2, r1
     4b2:	7422      	strb	r2, [r4, #16]
 }
     4b4:	bd10      	pop	{r4, pc}
     4b6:	46c0      	nop			; (mov r8, r8)
     4b8:	00002f51 	.word	0x00002f51

000004bc <circular_buf_init>:
 }

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
     4bc:	b570      	push	{r4, r5, r6, lr}
     4be:	0005      	movs	r5, r0
     4c0:	000c      	movs	r4, r1
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
     4c2:	2014      	movs	r0, #20
     4c4:	4b04      	ldr	r3, [pc, #16]	; (4d8 <circular_buf_init+0x1c>)
     4c6:	4798      	blx	r3
	 //assert(cbuf);

	 cbuf->buffer = buffer;
     4c8:	6005      	str	r5, [r0, #0]
	 cbuf->max = size;
     4ca:	60c4      	str	r4, [r0, #12]

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
	// assert(cbuf);

	 cbuf->head = 0;
     4cc:	2300      	movs	r3, #0
     4ce:	6043      	str	r3, [r0, #4]
	 cbuf->tail = 0;
     4d0:	6083      	str	r3, [r0, #8]
	 cbuf->full = false;
     4d2:	7403      	strb	r3, [r0, #16]
 }
     4d4:	bd70      	pop	{r4, r5, r6, pc}
     4d6:	46c0      	nop			; (mov r8, r8)
     4d8:	00002ff9 	.word	0x00002ff9

000004dc <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
     4dc:	b510      	push	{r4, lr}
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
     4de:	6803      	ldr	r3, [r0, #0]
     4e0:	6842      	ldr	r2, [r0, #4]
     4e2:	5499      	strb	r1, [r3, r2]

	 advance_pointer(cbuf);
     4e4:	4b01      	ldr	r3, [pc, #4]	; (4ec <circular_buf_put+0x10>)
     4e6:	4798      	blx	r3
 }
     4e8:	bd10      	pop	{r4, pc}
     4ea:	46c0      	nop			; (mov r8, r8)
     4ec:	00000489 	.word	0x00000489

000004f0 <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
     4f0:	7c02      	ldrb	r2, [r0, #16]
     4f2:	2300      	movs	r3, #0
     4f4:	2a00      	cmp	r2, #0
     4f6:	d105      	bne.n	504 <circular_buf_empty+0x14>
     4f8:	6843      	ldr	r3, [r0, #4]
     4fa:	6880      	ldr	r0, [r0, #8]
     4fc:	1a1b      	subs	r3, r3, r0
     4fe:	4258      	negs	r0, r3
     500:	4143      	adcs	r3, r0
     502:	b2db      	uxtb	r3, r3
     504:	0018      	movs	r0, r3
 }
     506:	4770      	bx	lr

00000508 <circular_buf_get>:
 {
     508:	b570      	push	{r4, r5, r6, lr}
     50a:	0004      	movs	r4, r0
     50c:	000d      	movs	r5, r1
	 if(!circular_buf_empty(cbuf))
     50e:	4b0a      	ldr	r3, [pc, #40]	; (538 <circular_buf_get+0x30>)
     510:	4798      	blx	r3
     512:	2800      	cmp	r0, #0
     514:	d10d      	bne.n	532 <circular_buf_get+0x2a>
		 *data = cbuf->buffer[cbuf->tail];
     516:	6823      	ldr	r3, [r4, #0]
     518:	68a2      	ldr	r2, [r4, #8]
     51a:	5c9b      	ldrb	r3, [r3, r2]
     51c:	702b      	strb	r3, [r5, #0]
	 cbuf->full = false;
     51e:	2300      	movs	r3, #0
     520:	7423      	strb	r3, [r4, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     522:	68a3      	ldr	r3, [r4, #8]
     524:	1c58      	adds	r0, r3, #1
     526:	68e1      	ldr	r1, [r4, #12]
     528:	4b04      	ldr	r3, [pc, #16]	; (53c <circular_buf_get+0x34>)
     52a:	4798      	blx	r3
     52c:	60a1      	str	r1, [r4, #8]
		 r = 0;
     52e:	2000      	movs	r0, #0
 }
     530:	bd70      	pop	{r4, r5, r6, pc}
	 int r = -1;
     532:	2001      	movs	r0, #1
     534:	4240      	negs	r0, r0
	 return r;
     536:	e7fb      	b.n	530 <circular_buf_get+0x28>
     538:	000004f1 	.word	0x000004f1
     53c:	00002f51 	.word	0x00002f51

00000540 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     540:	b5f0      	push	{r4, r5, r6, r7, lr}
     542:	46de      	mov	lr, fp
     544:	4657      	mov	r7, sl
     546:	464e      	mov	r6, r9
     548:	4645      	mov	r5, r8
     54a:	b5e0      	push	{r5, r6, r7, lr}
     54c:	b091      	sub	sp, #68	; 0x44
     54e:	0005      	movs	r5, r0
     550:	000c      	movs	r4, r1
     552:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     554:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     556:	0008      	movs	r0, r1
     558:	4bba      	ldr	r3, [pc, #744]	; (844 <usart_init+0x304>)
     55a:	4798      	blx	r3
     55c:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     55e:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     560:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     562:	07db      	lsls	r3, r3, #31
     564:	d506      	bpl.n	574 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     566:	b011      	add	sp, #68	; 0x44
     568:	bc3c      	pop	{r2, r3, r4, r5}
     56a:	4690      	mov	r8, r2
     56c:	4699      	mov	r9, r3
     56e:	46a2      	mov	sl, r4
     570:	46ab      	mov	fp, r5
     572:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     574:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     576:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     578:	079b      	lsls	r3, r3, #30
     57a:	d4f4      	bmi.n	566 <usart_init+0x26>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     57c:	49b2      	ldr	r1, [pc, #712]	; (848 <usart_init+0x308>)
     57e:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     580:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     582:	2301      	movs	r3, #1
     584:	40bb      	lsls	r3, r7
     586:	4303      	orrs	r3, r0
     588:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     58a:	a90f      	add	r1, sp, #60	; 0x3c
     58c:	272d      	movs	r7, #45	; 0x2d
     58e:	5df3      	ldrb	r3, [r6, r7]
     590:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     592:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     594:	b2d3      	uxtb	r3, r2
     596:	9302      	str	r3, [sp, #8]
     598:	0018      	movs	r0, r3
     59a:	4bac      	ldr	r3, [pc, #688]	; (84c <usart_init+0x30c>)
     59c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     59e:	9802      	ldr	r0, [sp, #8]
     5a0:	4bab      	ldr	r3, [pc, #684]	; (850 <usart_init+0x310>)
     5a2:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     5a4:	5df0      	ldrb	r0, [r6, r7]
     5a6:	2100      	movs	r1, #0
     5a8:	4baa      	ldr	r3, [pc, #680]	; (854 <usart_init+0x314>)
     5aa:	4798      	blx	r3
	module->character_size = config->character_size;
     5ac:	7af3      	ldrb	r3, [r6, #11]
     5ae:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     5b0:	2324      	movs	r3, #36	; 0x24
     5b2:	5cf3      	ldrb	r3, [r6, r3]
     5b4:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     5b6:	2325      	movs	r3, #37	; 0x25
     5b8:	5cf3      	ldrb	r3, [r6, r3]
     5ba:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     5bc:	7ef3      	ldrb	r3, [r6, #27]
     5be:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     5c0:	7f33      	ldrb	r3, [r6, #28]
     5c2:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     5c4:	682b      	ldr	r3, [r5, #0]
     5c6:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     5c8:	0018      	movs	r0, r3
     5ca:	4b9e      	ldr	r3, [pc, #632]	; (844 <usart_init+0x304>)
     5cc:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     5ce:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     5d0:	2200      	movs	r2, #0
     5d2:	230e      	movs	r3, #14
     5d4:	a906      	add	r1, sp, #24
     5d6:	468c      	mov	ip, r1
     5d8:	4463      	add	r3, ip
     5da:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     5dc:	8a32      	ldrh	r2, [r6, #16]
     5de:	9202      	str	r2, [sp, #8]
     5e0:	2380      	movs	r3, #128	; 0x80
     5e2:	01db      	lsls	r3, r3, #7
     5e4:	429a      	cmp	r2, r3
     5e6:	d100      	bne.n	5ea <usart_init+0xaa>
     5e8:	e09a      	b.n	720 <usart_init+0x1e0>
     5ea:	d90f      	bls.n	60c <usart_init+0xcc>
     5ec:	23c0      	movs	r3, #192	; 0xc0
     5ee:	01db      	lsls	r3, r3, #7
     5f0:	9a02      	ldr	r2, [sp, #8]
     5f2:	429a      	cmp	r2, r3
     5f4:	d100      	bne.n	5f8 <usart_init+0xb8>
     5f6:	e08e      	b.n	716 <usart_init+0x1d6>
     5f8:	2380      	movs	r3, #128	; 0x80
     5fa:	021b      	lsls	r3, r3, #8
     5fc:	429a      	cmp	r2, r3
     5fe:	d000      	beq.n	602 <usart_init+0xc2>
     600:	e11b      	b.n	83a <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     602:	2303      	movs	r3, #3
     604:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     606:	2300      	movs	r3, #0
     608:	9307      	str	r3, [sp, #28]
     60a:	e008      	b.n	61e <usart_init+0xde>
	switch (config->sample_rate) {
     60c:	2380      	movs	r3, #128	; 0x80
     60e:	019b      	lsls	r3, r3, #6
     610:	429a      	cmp	r2, r3
     612:	d000      	beq.n	616 <usart_init+0xd6>
     614:	e111      	b.n	83a <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     616:	2310      	movs	r3, #16
     618:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     61a:	3b0f      	subs	r3, #15
     61c:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     61e:	6833      	ldr	r3, [r6, #0]
     620:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     622:	68f3      	ldr	r3, [r6, #12]
     624:	469b      	mov	fp, r3
		config->sample_adjustment |
     626:	6973      	ldr	r3, [r6, #20]
     628:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     62a:	7e33      	ldrb	r3, [r6, #24]
     62c:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     62e:	2326      	movs	r3, #38	; 0x26
     630:	5cf3      	ldrb	r3, [r6, r3]
     632:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     634:	6873      	ldr	r3, [r6, #4]
     636:	4699      	mov	r9, r3
	switch (transfer_mode)
     638:	2b00      	cmp	r3, #0
     63a:	d100      	bne.n	63e <usart_init+0xfe>
     63c:	e09c      	b.n	778 <usart_init+0x238>
     63e:	2380      	movs	r3, #128	; 0x80
     640:	055b      	lsls	r3, r3, #21
     642:	4599      	cmp	r9, r3
     644:	d100      	bne.n	648 <usart_init+0x108>
     646:	e080      	b.n	74a <usart_init+0x20a>
	if(config->encoding_format_enable) {
     648:	7e73      	ldrb	r3, [r6, #25]
     64a:	2b00      	cmp	r3, #0
     64c:	d002      	beq.n	654 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     64e:	7eb3      	ldrb	r3, [r6, #26]
     650:	4642      	mov	r2, r8
     652:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
     654:	230e      	movs	r3, #14
     656:	aa06      	add	r2, sp, #24
     658:	4694      	mov	ip, r2
     65a:	4463      	add	r3, ip
     65c:	881b      	ldrh	r3, [r3, #0]
     65e:	4642      	mov	r2, r8
     660:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     662:	9b05      	ldr	r3, [sp, #20]
     664:	465a      	mov	r2, fp
     666:	4313      	orrs	r3, r2
     668:	9a03      	ldr	r2, [sp, #12]
     66a:	4313      	orrs	r3, r2
     66c:	464a      	mov	r2, r9
     66e:	4313      	orrs	r3, r2
     670:	9f02      	ldr	r7, [sp, #8]
     672:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     674:	9b04      	ldr	r3, [sp, #16]
     676:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     678:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     67a:	4653      	mov	r3, sl
     67c:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     67e:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     680:	2327      	movs	r3, #39	; 0x27
     682:	5cf3      	ldrb	r3, [r6, r3]
     684:	2b00      	cmp	r3, #0
     686:	d101      	bne.n	68c <usart_init+0x14c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     688:	3304      	adds	r3, #4
     68a:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     68c:	7e73      	ldrb	r3, [r6, #25]
     68e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     690:	7f32      	ldrb	r2, [r6, #28]
     692:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     694:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     696:	7f72      	ldrb	r2, [r6, #29]
     698:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     69a:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     69c:	2224      	movs	r2, #36	; 0x24
     69e:	5cb2      	ldrb	r2, [r6, r2]
     6a0:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     6a2:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     6a4:	2225      	movs	r2, #37	; 0x25
     6a6:	5cb2      	ldrb	r2, [r6, r2]
     6a8:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     6aa:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     6ac:	7ab1      	ldrb	r1, [r6, #10]
     6ae:	7af2      	ldrb	r2, [r6, #11]
     6b0:	4311      	orrs	r1, r2
     6b2:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     6b4:	8933      	ldrh	r3, [r6, #8]
     6b6:	2bff      	cmp	r3, #255	; 0xff
     6b8:	d100      	bne.n	6bc <usart_init+0x17c>
     6ba:	e081      	b.n	7c0 <usart_init+0x280>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     6bc:	2280      	movs	r2, #128	; 0x80
     6be:	0452      	lsls	r2, r2, #17
     6c0:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     6c2:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     6c4:	232c      	movs	r3, #44	; 0x2c
     6c6:	5cf3      	ldrb	r3, [r6, r3]
     6c8:	2b00      	cmp	r3, #0
     6ca:	d103      	bne.n	6d4 <usart_init+0x194>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     6cc:	4b62      	ldr	r3, [pc, #392]	; (858 <usart_init+0x318>)
     6ce:	789b      	ldrb	r3, [r3, #2]
     6d0:	079b      	lsls	r3, r3, #30
     6d2:	d501      	bpl.n	6d8 <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     6d4:	2380      	movs	r3, #128	; 0x80
     6d6:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     6d8:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     6da:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     6dc:	2b00      	cmp	r3, #0
     6de:	d1fc      	bne.n	6da <usart_init+0x19a>
	usart_hw->CTRLB.reg = ctrlb;
     6e0:	4643      	mov	r3, r8
     6e2:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     6e4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     6e6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     6e8:	2b00      	cmp	r3, #0
     6ea:	d1fc      	bne.n	6e6 <usart_init+0x1a6>
	usart_hw->CTRLA.reg = ctrla;
     6ec:	4643      	mov	r3, r8
     6ee:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     6f0:	ab0e      	add	r3, sp, #56	; 0x38
     6f2:	2280      	movs	r2, #128	; 0x80
     6f4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     6f6:	2200      	movs	r2, #0
     6f8:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     6fa:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     6fc:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     6fe:	6b33      	ldr	r3, [r6, #48]	; 0x30
     700:	930a      	str	r3, [sp, #40]	; 0x28
     702:	6b73      	ldr	r3, [r6, #52]	; 0x34
     704:	930b      	str	r3, [sp, #44]	; 0x2c
     706:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     708:	930c      	str	r3, [sp, #48]	; 0x30
     70a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     70c:	9302      	str	r3, [sp, #8]
     70e:	930d      	str	r3, [sp, #52]	; 0x34
     710:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     712:	ae0a      	add	r6, sp, #40	; 0x28
     714:	e063      	b.n	7de <usart_init+0x29e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     716:	2308      	movs	r3, #8
     718:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     71a:	3b07      	subs	r3, #7
     71c:	9307      	str	r3, [sp, #28]
     71e:	e77e      	b.n	61e <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     720:	6833      	ldr	r3, [r6, #0]
     722:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     724:	68f3      	ldr	r3, [r6, #12]
     726:	469b      	mov	fp, r3
		config->sample_adjustment |
     728:	6973      	ldr	r3, [r6, #20]
     72a:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     72c:	7e33      	ldrb	r3, [r6, #24]
     72e:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     730:	2326      	movs	r3, #38	; 0x26
     732:	5cf3      	ldrb	r3, [r6, r3]
     734:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     736:	6873      	ldr	r3, [r6, #4]
     738:	4699      	mov	r9, r3
	switch (transfer_mode)
     73a:	2b00      	cmp	r3, #0
     73c:	d018      	beq.n	770 <usart_init+0x230>
     73e:	2380      	movs	r3, #128	; 0x80
     740:	055b      	lsls	r3, r3, #21
     742:	4599      	cmp	r9, r3
     744:	d001      	beq.n	74a <usart_init+0x20a>
	enum status_code status_code = STATUS_OK;
     746:	2000      	movs	r0, #0
     748:	e025      	b.n	796 <usart_init+0x256>
			if (!config->use_external_clock) {
     74a:	2327      	movs	r3, #39	; 0x27
     74c:	5cf3      	ldrb	r3, [r6, r3]
     74e:	2b00      	cmp	r3, #0
     750:	d000      	beq.n	754 <usart_init+0x214>
     752:	e779      	b.n	648 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     754:	6a33      	ldr	r3, [r6, #32]
     756:	001f      	movs	r7, r3
     758:	b2c0      	uxtb	r0, r0
     75a:	4b40      	ldr	r3, [pc, #256]	; (85c <usart_init+0x31c>)
     75c:	4798      	blx	r3
     75e:	0001      	movs	r1, r0
     760:	220e      	movs	r2, #14
     762:	ab06      	add	r3, sp, #24
     764:	469c      	mov	ip, r3
     766:	4462      	add	r2, ip
     768:	0038      	movs	r0, r7
     76a:	4b3d      	ldr	r3, [pc, #244]	; (860 <usart_init+0x320>)
     76c:	4798      	blx	r3
     76e:	e012      	b.n	796 <usart_init+0x256>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     770:	2308      	movs	r3, #8
     772:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     774:	2300      	movs	r3, #0
     776:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     778:	2327      	movs	r3, #39	; 0x27
     77a:	5cf3      	ldrb	r3, [r6, r3]
     77c:	2b00      	cmp	r3, #0
     77e:	d00e      	beq.n	79e <usart_init+0x25e>
				status_code =
     780:	9b06      	ldr	r3, [sp, #24]
     782:	9300      	str	r3, [sp, #0]
     784:	9b07      	ldr	r3, [sp, #28]
     786:	220e      	movs	r2, #14
     788:	a906      	add	r1, sp, #24
     78a:	468c      	mov	ip, r1
     78c:	4462      	add	r2, ip
     78e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     790:	6a30      	ldr	r0, [r6, #32]
     792:	4f34      	ldr	r7, [pc, #208]	; (864 <usart_init+0x324>)
     794:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     796:	2800      	cmp	r0, #0
     798:	d000      	beq.n	79c <usart_init+0x25c>
     79a:	e6e4      	b.n	566 <usart_init+0x26>
     79c:	e754      	b.n	648 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
     79e:	6a33      	ldr	r3, [r6, #32]
     7a0:	001f      	movs	r7, r3
     7a2:	b2c0      	uxtb	r0, r0
     7a4:	4b2d      	ldr	r3, [pc, #180]	; (85c <usart_init+0x31c>)
     7a6:	4798      	blx	r3
     7a8:	0001      	movs	r1, r0
				status_code =
     7aa:	9b06      	ldr	r3, [sp, #24]
     7ac:	9300      	str	r3, [sp, #0]
     7ae:	9b07      	ldr	r3, [sp, #28]
     7b0:	220e      	movs	r2, #14
     7b2:	a806      	add	r0, sp, #24
     7b4:	4684      	mov	ip, r0
     7b6:	4462      	add	r2, ip
     7b8:	0038      	movs	r0, r7
     7ba:	4f2a      	ldr	r7, [pc, #168]	; (864 <usart_init+0x324>)
     7bc:	47b8      	blx	r7
     7be:	e7ea      	b.n	796 <usart_init+0x256>
		if(config->lin_slave_enable) {
     7c0:	7ef3      	ldrb	r3, [r6, #27]
     7c2:	2b00      	cmp	r3, #0
     7c4:	d100      	bne.n	7c8 <usart_init+0x288>
     7c6:	e77d      	b.n	6c4 <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     7c8:	2380      	movs	r3, #128	; 0x80
     7ca:	04db      	lsls	r3, r3, #19
     7cc:	431f      	orrs	r7, r3
     7ce:	e779      	b.n	6c4 <usart_init+0x184>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     7d0:	0020      	movs	r0, r4
     7d2:	4b25      	ldr	r3, [pc, #148]	; (868 <usart_init+0x328>)
     7d4:	4798      	blx	r3
     7d6:	e007      	b.n	7e8 <usart_init+0x2a8>
     7d8:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     7da:	2f04      	cmp	r7, #4
     7dc:	d00d      	beq.n	7fa <usart_init+0x2ba>
     7de:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     7e0:	00bb      	lsls	r3, r7, #2
     7e2:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     7e4:	2800      	cmp	r0, #0
     7e6:	d0f3      	beq.n	7d0 <usart_init+0x290>
		if (current_pinmux != PINMUX_UNUSED) {
     7e8:	1c43      	adds	r3, r0, #1
     7ea:	d0f5      	beq.n	7d8 <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     7ec:	a90e      	add	r1, sp, #56	; 0x38
     7ee:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     7f0:	0c00      	lsrs	r0, r0, #16
     7f2:	b2c0      	uxtb	r0, r0
     7f4:	4b1d      	ldr	r3, [pc, #116]	; (86c <usart_init+0x32c>)
     7f6:	4798      	blx	r3
     7f8:	e7ee      	b.n	7d8 <usart_init+0x298>
		module->callback[i]            = NULL;
     7fa:	2300      	movs	r3, #0
     7fc:	60eb      	str	r3, [r5, #12]
     7fe:	612b      	str	r3, [r5, #16]
     800:	616b      	str	r3, [r5, #20]
     802:	61ab      	str	r3, [r5, #24]
     804:	61eb      	str	r3, [r5, #28]
     806:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     808:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     80a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     80c:	2200      	movs	r2, #0
     80e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     810:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     812:	3330      	adds	r3, #48	; 0x30
     814:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     816:	3301      	adds	r3, #1
     818:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     81a:	3301      	adds	r3, #1
     81c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     81e:	3301      	adds	r3, #1
     820:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     822:	6828      	ldr	r0, [r5, #0]
     824:	4b07      	ldr	r3, [pc, #28]	; (844 <usart_init+0x304>)
     826:	4798      	blx	r3
     828:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     82a:	4911      	ldr	r1, [pc, #68]	; (870 <usart_init+0x330>)
     82c:	4b11      	ldr	r3, [pc, #68]	; (874 <usart_init+0x334>)
     82e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     830:	00a4      	lsls	r4, r4, #2
     832:	4b11      	ldr	r3, [pc, #68]	; (878 <usart_init+0x338>)
     834:	50e5      	str	r5, [r4, r3]
	return status_code;
     836:	2000      	movs	r0, #0
     838:	e695      	b.n	566 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     83a:	2310      	movs	r3, #16
     83c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     83e:	2300      	movs	r3, #0
     840:	9307      	str	r3, [sp, #28]
     842:	e6ec      	b.n	61e <usart_init+0xde>
     844:	00000451 	.word	0x00000451
     848:	40000400 	.word	0x40000400
     84c:	00002b0d 	.word	0x00002b0d
     850:	00002a81 	.word	0x00002a81
     854:	0000028d 	.word	0x0000028d
     858:	41002000 	.word	0x41002000
     85c:	00002b29 	.word	0x00002b29
     860:	000001cf 	.word	0x000001cf
     864:	000001f9 	.word	0x000001f9
     868:	000002d9 	.word	0x000002d9
     86c:	00002c05 	.word	0x00002c05
     870:	0000097d 	.word	0x0000097d
     874:	00000b15 	.word	0x00000b15
     878:	200030f8 	.word	0x200030f8

0000087c <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
     87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     87e:	0006      	movs	r6, r0
     880:	000c      	movs	r4, r1
     882:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     884:	6807      	ldr	r7, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     886:	4b0a      	ldr	r3, [pc, #40]	; (8b0 <_usart_write_buffer+0x34>)
     888:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
     88a:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
     88c:	b29b      	uxth	r3, r3
     88e:	2b00      	cmp	r3, #0
     890:	d003      	beq.n	89a <_usart_write_buffer+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     892:	4b08      	ldr	r3, [pc, #32]	; (8b4 <_usart_write_buffer+0x38>)
     894:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
     896:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
     898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
     89a:	85f5      	strh	r5, [r6, #46]	; 0x2e
     89c:	4b05      	ldr	r3, [pc, #20]	; (8b4 <_usart_write_buffer+0x38>)
     89e:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
     8a0:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
     8a2:	2205      	movs	r2, #5
     8a4:	2333      	movs	r3, #51	; 0x33
     8a6:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
     8a8:	3b32      	subs	r3, #50	; 0x32
     8aa:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
     8ac:	2000      	movs	r0, #0
     8ae:	e7f3      	b.n	898 <_usart_write_buffer+0x1c>
     8b0:	000023f9 	.word	0x000023f9
     8b4:	00002439 	.word	0x00002439

000008b8 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8ba:	0004      	movs	r4, r0
     8bc:	000d      	movs	r5, r1
     8be:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     8c0:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
     8c2:	4b0f      	ldr	r3, [pc, #60]	; (900 <_usart_read_buffer+0x48>)
     8c4:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
     8c6:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
     8c8:	b29b      	uxth	r3, r3
     8ca:	2b00      	cmp	r3, #0
     8cc:	d003      	beq.n	8d6 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
     8ce:	4b0d      	ldr	r3, [pc, #52]	; (904 <_usart_read_buffer+0x4c>)
     8d0:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
     8d2:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
     8d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
     8d6:	85a6      	strh	r6, [r4, #44]	; 0x2c
     8d8:	4b0a      	ldr	r3, [pc, #40]	; (904 <_usart_read_buffer+0x4c>)
     8da:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
     8dc:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
     8de:	2205      	movs	r2, #5
     8e0:	2332      	movs	r3, #50	; 0x32
     8e2:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
     8e4:	3b2e      	subs	r3, #46	; 0x2e
     8e6:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
     8e8:	7a23      	ldrb	r3, [r4, #8]
     8ea:	2b00      	cmp	r3, #0
     8ec:	d001      	beq.n	8f2 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
     8ee:	2320      	movs	r3, #32
     8f0:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
     8f2:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
     8f4:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
     8f6:	2b00      	cmp	r3, #0
     8f8:	d0ec      	beq.n	8d4 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
     8fa:	2308      	movs	r3, #8
     8fc:	75bb      	strb	r3, [r7, #22]
     8fe:	e7e9      	b.n	8d4 <_usart_read_buffer+0x1c>
     900:	000023f9 	.word	0x000023f9
     904:	00002439 	.word	0x00002439

00000908 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     908:	1c93      	adds	r3, r2, #2
     90a:	009b      	lsls	r3, r3, #2
     90c:	18c3      	adds	r3, r0, r3
     90e:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
     910:	2130      	movs	r1, #48	; 0x30
     912:	2301      	movs	r3, #1
     914:	4093      	lsls	r3, r2
     916:	001a      	movs	r2, r3
     918:	5c43      	ldrb	r3, [r0, r1]
     91a:	4313      	orrs	r3, r2
     91c:	5443      	strb	r3, [r0, r1]
}
     91e:	4770      	bx	lr

00000920 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
     920:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     922:	2317      	movs	r3, #23
	if (length == 0) {
     924:	2a00      	cmp	r2, #0
     926:	d101      	bne.n	92c <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
     928:	0018      	movs	r0, r3
     92a:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
     92c:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
     92e:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
     930:	2c00      	cmp	r4, #0
     932:	d0f9      	beq.n	928 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
     934:	4b01      	ldr	r3, [pc, #4]	; (93c <usart_write_buffer_job+0x1c>)
     936:	4798      	blx	r3
     938:	0003      	movs	r3, r0
     93a:	e7f5      	b.n	928 <usart_write_buffer_job+0x8>
     93c:	0000087d 	.word	0x0000087d

00000940 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     940:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     942:	2317      	movs	r3, #23
	if (length == 0) {
     944:	2a00      	cmp	r2, #0
     946:	d101      	bne.n	94c <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
     948:	0018      	movs	r0, r3
     94a:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
     94c:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
     94e:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
     950:	2c00      	cmp	r4, #0
     952:	d0f9      	beq.n	948 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
     954:	4b01      	ldr	r3, [pc, #4]	; (95c <usart_read_buffer_job+0x1c>)
     956:	4798      	blx	r3
     958:	0003      	movs	r3, r0
     95a:	e7f5      	b.n	948 <usart_read_buffer_job+0x8>
     95c:	000008b9 	.word	0x000008b9

00000960 <usart_get_job_status>:
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
     960:	2900      	cmp	r1, #0
     962:	d003      	beq.n	96c <usart_get_job_status+0xc>
     964:	2901      	cmp	r1, #1
     966:	d005      	beq.n	974 <usart_get_job_status+0x14>
	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
			break;

	default:
			status_code = STATUS_ERR_INVALID_ARG;
     968:	2017      	movs	r0, #23
     96a:	e002      	b.n	972 <usart_get_job_status+0x12>
			status_code = module->rx_status;
     96c:	2332      	movs	r3, #50	; 0x32
     96e:	5cc0      	ldrb	r0, [r0, r3]
     970:	b2c0      	uxtb	r0, r0
			break;
	}

	return status_code;
}
     972:	4770      	bx	lr
			status_code = module->tx_status;
     974:	2333      	movs	r3, #51	; 0x33
     976:	5cc0      	ldrb	r0, [r0, r3]
     978:	b2c0      	uxtb	r0, r0
			break;
     97a:	e7fa      	b.n	972 <usart_get_job_status+0x12>

0000097c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     97e:	0080      	lsls	r0, r0, #2
     980:	4b62      	ldr	r3, [pc, #392]	; (b0c <_usart_interrupt_handler+0x190>)
     982:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     984:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     986:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     988:	2b00      	cmp	r3, #0
     98a:	d1fc      	bne.n	986 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     98c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     98e:	7da6      	ldrb	r6, [r4, #22]
     990:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     992:	2330      	movs	r3, #48	; 0x30
     994:	5ceb      	ldrb	r3, [r5, r3]
     996:	2231      	movs	r2, #49	; 0x31
     998:	5caf      	ldrb	r7, [r5, r2]
     99a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     99c:	07f3      	lsls	r3, r6, #31
     99e:	d522      	bpl.n	9e6 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     9a0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     9a2:	b29b      	uxth	r3, r3
     9a4:	2b00      	cmp	r3, #0
     9a6:	d01c      	beq.n	9e2 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     9a8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     9aa:	7813      	ldrb	r3, [r2, #0]
     9ac:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     9ae:	1c51      	adds	r1, r2, #1
     9b0:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     9b2:	7969      	ldrb	r1, [r5, #5]
     9b4:	2901      	cmp	r1, #1
     9b6:	d00e      	beq.n	9d6 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     9b8:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     9ba:	05db      	lsls	r3, r3, #23
     9bc:	0ddb      	lsrs	r3, r3, #23
     9be:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     9c0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     9c2:	3b01      	subs	r3, #1
     9c4:	b29b      	uxth	r3, r3
     9c6:	85eb      	strh	r3, [r5, #46]	; 0x2e
     9c8:	2b00      	cmp	r3, #0
     9ca:	d10c      	bne.n	9e6 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     9cc:	3301      	adds	r3, #1
     9ce:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     9d0:	3301      	adds	r3, #1
     9d2:	75a3      	strb	r3, [r4, #22]
     9d4:	e007      	b.n	9e6 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     9d6:	7851      	ldrb	r1, [r2, #1]
     9d8:	0209      	lsls	r1, r1, #8
     9da:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     9dc:	3202      	adds	r2, #2
     9de:	62aa      	str	r2, [r5, #40]	; 0x28
     9e0:	e7eb      	b.n	9ba <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     9e2:	2301      	movs	r3, #1
     9e4:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     9e6:	07b3      	lsls	r3, r6, #30
     9e8:	d506      	bpl.n	9f8 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     9ea:	2302      	movs	r3, #2
     9ec:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     9ee:	2200      	movs	r2, #0
     9f0:	3331      	adds	r3, #49	; 0x31
     9f2:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     9f4:	07fb      	lsls	r3, r7, #31
     9f6:	d41a      	bmi.n	a2e <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     9f8:	0773      	lsls	r3, r6, #29
     9fa:	d565      	bpl.n	ac8 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
     9fc:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     9fe:	b29b      	uxth	r3, r3
     a00:	2b00      	cmp	r3, #0
     a02:	d05f      	beq.n	ac4 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     a04:	8b63      	ldrh	r3, [r4, #26]
     a06:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     a08:	071a      	lsls	r2, r3, #28
     a0a:	d414      	bmi.n	a36 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     a0c:	223f      	movs	r2, #63	; 0x3f
     a0e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     a10:	2b00      	cmp	r3, #0
     a12:	d034      	beq.n	a7e <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     a14:	079a      	lsls	r2, r3, #30
     a16:	d511      	bpl.n	a3c <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     a18:	221a      	movs	r2, #26
     a1a:	2332      	movs	r3, #50	; 0x32
     a1c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     a1e:	3b30      	subs	r3, #48	; 0x30
     a20:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     a22:	077b      	lsls	r3, r7, #29
     a24:	d550      	bpl.n	ac8 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     a26:	0028      	movs	r0, r5
     a28:	696b      	ldr	r3, [r5, #20]
     a2a:	4798      	blx	r3
     a2c:	e04c      	b.n	ac8 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     a2e:	0028      	movs	r0, r5
     a30:	68eb      	ldr	r3, [r5, #12]
     a32:	4798      	blx	r3
     a34:	e7e0      	b.n	9f8 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     a36:	2237      	movs	r2, #55	; 0x37
     a38:	4013      	ands	r3, r2
     a3a:	e7e9      	b.n	a10 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     a3c:	075a      	lsls	r2, r3, #29
     a3e:	d505      	bpl.n	a4c <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
     a40:	221e      	movs	r2, #30
     a42:	2332      	movs	r3, #50	; 0x32
     a44:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     a46:	3b2e      	subs	r3, #46	; 0x2e
     a48:	8363      	strh	r3, [r4, #26]
     a4a:	e7ea      	b.n	a22 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     a4c:	07da      	lsls	r2, r3, #31
     a4e:	d505      	bpl.n	a5c <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
     a50:	2213      	movs	r2, #19
     a52:	2332      	movs	r3, #50	; 0x32
     a54:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     a56:	3b31      	subs	r3, #49	; 0x31
     a58:	8363      	strh	r3, [r4, #26]
     a5a:	e7e2      	b.n	a22 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     a5c:	06da      	lsls	r2, r3, #27
     a5e:	d505      	bpl.n	a6c <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
     a60:	2242      	movs	r2, #66	; 0x42
     a62:	2332      	movs	r3, #50	; 0x32
     a64:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     a66:	3b22      	subs	r3, #34	; 0x22
     a68:	8363      	strh	r3, [r4, #26]
     a6a:	e7da      	b.n	a22 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     a6c:	2220      	movs	r2, #32
     a6e:	421a      	tst	r2, r3
     a70:	d0d7      	beq.n	a22 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     a72:	3221      	adds	r2, #33	; 0x21
     a74:	2332      	movs	r3, #50	; 0x32
     a76:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     a78:	3b12      	subs	r3, #18
     a7a:	8363      	strh	r3, [r4, #26]
     a7c:	e7d1      	b.n	a22 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     a7e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     a80:	05db      	lsls	r3, r3, #23
     a82:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     a84:	b2da      	uxtb	r2, r3
     a86:	6a69      	ldr	r1, [r5, #36]	; 0x24
     a88:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     a8a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     a8c:	1c51      	adds	r1, r2, #1
     a8e:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     a90:	7969      	ldrb	r1, [r5, #5]
     a92:	2901      	cmp	r1, #1
     a94:	d010      	beq.n	ab8 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     a96:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     a98:	3b01      	subs	r3, #1
     a9a:	b29b      	uxth	r3, r3
     a9c:	85ab      	strh	r3, [r5, #44]	; 0x2c
     a9e:	2b00      	cmp	r3, #0
     aa0:	d112      	bne.n	ac8 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     aa2:	3304      	adds	r3, #4
     aa4:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     aa6:	2200      	movs	r2, #0
     aa8:	332e      	adds	r3, #46	; 0x2e
     aaa:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     aac:	07bb      	lsls	r3, r7, #30
     aae:	d50b      	bpl.n	ac8 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     ab0:	0028      	movs	r0, r5
     ab2:	692b      	ldr	r3, [r5, #16]
     ab4:	4798      	blx	r3
     ab6:	e007      	b.n	ac8 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     ab8:	0a1b      	lsrs	r3, r3, #8
     aba:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     abc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     abe:	3301      	adds	r3, #1
     ac0:	626b      	str	r3, [r5, #36]	; 0x24
     ac2:	e7e8      	b.n	a96 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     ac4:	2304      	movs	r3, #4
     ac6:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     ac8:	06f3      	lsls	r3, r6, #27
     aca:	d504      	bpl.n	ad6 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     acc:	2310      	movs	r3, #16
     ace:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     ad0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     ad2:	06fb      	lsls	r3, r7, #27
     ad4:	d40e      	bmi.n	af4 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     ad6:	06b3      	lsls	r3, r6, #26
     ad8:	d504      	bpl.n	ae4 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     ada:	2320      	movs	r3, #32
     adc:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     ade:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     ae0:	073b      	lsls	r3, r7, #28
     ae2:	d40b      	bmi.n	afc <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     ae4:	0733      	lsls	r3, r6, #28
     ae6:	d504      	bpl.n	af2 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     ae8:	2308      	movs	r3, #8
     aea:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     aec:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     aee:	06bb      	lsls	r3, r7, #26
     af0:	d408      	bmi.n	b04 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     af4:	0028      	movs	r0, r5
     af6:	69eb      	ldr	r3, [r5, #28]
     af8:	4798      	blx	r3
     afa:	e7ec      	b.n	ad6 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     afc:	0028      	movs	r0, r5
     afe:	69ab      	ldr	r3, [r5, #24]
     b00:	4798      	blx	r3
     b02:	e7ef      	b.n	ae4 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     b04:	6a2b      	ldr	r3, [r5, #32]
     b06:	0028      	movs	r0, r5
     b08:	4798      	blx	r3
}
     b0a:	e7f2      	b.n	af2 <_usart_interrupt_handler+0x176>
     b0c:	200030f8 	.word	0x200030f8

00000b10 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     b10:	4770      	bx	lr
	...

00000b14 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     b14:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     b16:	4b0a      	ldr	r3, [pc, #40]	; (b40 <_sercom_set_handler+0x2c>)
     b18:	781b      	ldrb	r3, [r3, #0]
     b1a:	2b00      	cmp	r3, #0
     b1c:	d10c      	bne.n	b38 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     b1e:	4f09      	ldr	r7, [pc, #36]	; (b44 <_sercom_set_handler+0x30>)
     b20:	4e09      	ldr	r6, [pc, #36]	; (b48 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     b22:	4d0a      	ldr	r5, [pc, #40]	; (b4c <_sercom_set_handler+0x38>)
     b24:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     b26:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     b28:	195a      	adds	r2, r3, r5
     b2a:	6014      	str	r4, [r2, #0]
     b2c:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     b2e:	2b18      	cmp	r3, #24
     b30:	d1f9      	bne.n	b26 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     b32:	2201      	movs	r2, #1
     b34:	4b02      	ldr	r3, [pc, #8]	; (b40 <_sercom_set_handler+0x2c>)
     b36:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     b38:	0080      	lsls	r0, r0, #2
     b3a:	4b02      	ldr	r3, [pc, #8]	; (b44 <_sercom_set_handler+0x30>)
     b3c:	50c1      	str	r1, [r0, r3]
}
     b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b40:	2000008a 	.word	0x2000008a
     b44:	2000008c 	.word	0x2000008c
     b48:	00000b11 	.word	0x00000b11
     b4c:	200030f8 	.word	0x200030f8

00000b50 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     b50:	b500      	push	{lr}
     b52:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     b54:	2309      	movs	r3, #9
     b56:	466a      	mov	r2, sp
     b58:	7013      	strb	r3, [r2, #0]
     b5a:	3301      	adds	r3, #1
     b5c:	7053      	strb	r3, [r2, #1]
     b5e:	3301      	adds	r3, #1
     b60:	7093      	strb	r3, [r2, #2]
     b62:	3301      	adds	r3, #1
     b64:	70d3      	strb	r3, [r2, #3]
     b66:	3301      	adds	r3, #1
     b68:	7113      	strb	r3, [r2, #4]
     b6a:	3301      	adds	r3, #1
     b6c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     b6e:	4b03      	ldr	r3, [pc, #12]	; (b7c <_sercom_get_interrupt_vector+0x2c>)
     b70:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     b72:	466b      	mov	r3, sp
     b74:	5618      	ldrsb	r0, [r3, r0]
}
     b76:	b003      	add	sp, #12
     b78:	bd00      	pop	{pc}
     b7a:	46c0      	nop			; (mov r8, r8)
     b7c:	00000451 	.word	0x00000451

00000b80 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     b80:	b510      	push	{r4, lr}
     b82:	4b02      	ldr	r3, [pc, #8]	; (b8c <SERCOM0_Handler+0xc>)
     b84:	681b      	ldr	r3, [r3, #0]
     b86:	2000      	movs	r0, #0
     b88:	4798      	blx	r3
     b8a:	bd10      	pop	{r4, pc}
     b8c:	2000008c 	.word	0x2000008c

00000b90 <SERCOM1_Handler>:
     b90:	b510      	push	{r4, lr}
     b92:	4b02      	ldr	r3, [pc, #8]	; (b9c <SERCOM1_Handler+0xc>)
     b94:	685b      	ldr	r3, [r3, #4]
     b96:	2001      	movs	r0, #1
     b98:	4798      	blx	r3
     b9a:	bd10      	pop	{r4, pc}
     b9c:	2000008c 	.word	0x2000008c

00000ba0 <SERCOM2_Handler>:
     ba0:	b510      	push	{r4, lr}
     ba2:	4b02      	ldr	r3, [pc, #8]	; (bac <SERCOM2_Handler+0xc>)
     ba4:	689b      	ldr	r3, [r3, #8]
     ba6:	2002      	movs	r0, #2
     ba8:	4798      	blx	r3
     baa:	bd10      	pop	{r4, pc}
     bac:	2000008c 	.word	0x2000008c

00000bb0 <SERCOM3_Handler>:
     bb0:	b510      	push	{r4, lr}
     bb2:	4b02      	ldr	r3, [pc, #8]	; (bbc <SERCOM3_Handler+0xc>)
     bb4:	68db      	ldr	r3, [r3, #12]
     bb6:	2003      	movs	r0, #3
     bb8:	4798      	blx	r3
     bba:	bd10      	pop	{r4, pc}
     bbc:	2000008c 	.word	0x2000008c

00000bc0 <SERCOM4_Handler>:
     bc0:	b510      	push	{r4, lr}
     bc2:	4b02      	ldr	r3, [pc, #8]	; (bcc <SERCOM4_Handler+0xc>)
     bc4:	691b      	ldr	r3, [r3, #16]
     bc6:	2004      	movs	r0, #4
     bc8:	4798      	blx	r3
     bca:	bd10      	pop	{r4, pc}
     bcc:	2000008c 	.word	0x2000008c

00000bd0 <SERCOM5_Handler>:
     bd0:	b510      	push	{r4, lr}
     bd2:	4b02      	ldr	r3, [pc, #8]	; (bdc <SERCOM5_Handler+0xc>)
     bd4:	695b      	ldr	r3, [r3, #20]
     bd6:	2005      	movs	r0, #5
     bd8:	4798      	blx	r3
     bda:	bd10      	pop	{r4, pc}
     bdc:	2000008c 	.word	0x2000008c

00000be0 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
     be0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
     be2:	2300      	movs	r3, #0
     be4:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
     be6:	4b06      	ldr	r3, [pc, #24]	; (c00 <prvTaskExitError+0x20>)
     be8:	681b      	ldr	r3, [r3, #0]
     bea:	3301      	adds	r3, #1
     bec:	d001      	beq.n	bf2 <prvTaskExitError+0x12>
     bee:	b672      	cpsid	i
     bf0:	e7fe      	b.n	bf0 <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
     bf2:	b672      	cpsid	i
	while( ulDummy == 0 )
     bf4:	9b01      	ldr	r3, [sp, #4]
     bf6:	2b00      	cmp	r3, #0
     bf8:	d0fc      	beq.n	bf4 <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
     bfa:	b002      	add	sp, #8
     bfc:	4770      	bx	lr
     bfe:	46c0      	nop			; (mov r8, r8)
     c00:	20000000 	.word	0x20000000
	...

00000c10 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
     c10:	4a0b      	ldr	r2, [pc, #44]	; (c40 <pxCurrentTCBConst2>)
     c12:	6813      	ldr	r3, [r2, #0]
     c14:	6818      	ldr	r0, [r3, #0]
     c16:	3020      	adds	r0, #32
     c18:	f380 8809 	msr	PSP, r0
     c1c:	2002      	movs	r0, #2
     c1e:	f380 8814 	msr	CONTROL, r0
     c22:	f3bf 8f6f 	isb	sy
     c26:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
     c28:	46ae      	mov	lr, r5
     c2a:	bc08      	pop	{r3}
     c2c:	bc04      	pop	{r2}
     c2e:	b662      	cpsie	i
     c30:	4718      	bx	r3
     c32:	46c0      	nop			; (mov r8, r8)
     c34:	46c0      	nop			; (mov r8, r8)
     c36:	46c0      	nop			; (mov r8, r8)
     c38:	46c0      	nop			; (mov r8, r8)
     c3a:	46c0      	nop			; (mov r8, r8)
     c3c:	46c0      	nop			; (mov r8, r8)
     c3e:	46c0      	nop			; (mov r8, r8)

00000c40 <pxCurrentTCBConst2>:
     c40:	20002f8c 	.word	0x20002f8c

00000c44 <pxPortInitialiseStack>:
{
     c44:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
     c46:	1f03      	subs	r3, r0, #4
     c48:	2480      	movs	r4, #128	; 0x80
     c4a:	0464      	lsls	r4, r4, #17
     c4c:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
     c4e:	3b04      	subs	r3, #4
     c50:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
     c52:	3b04      	subs	r3, #4
     c54:	4902      	ldr	r1, [pc, #8]	; (c60 <pxPortInitialiseStack+0x1c>)
     c56:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
     c58:	3b14      	subs	r3, #20
     c5a:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
     c5c:	3840      	subs	r0, #64	; 0x40
}
     c5e:	bd10      	pop	{r4, pc}
     c60:	00000be1 	.word	0x00000be1

00000c64 <SVC_Handler>:
}
     c64:	4770      	bx	lr
	...

00000c68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
     c68:	b570      	push	{r4, r5, r6, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
     c6a:	4b13      	ldr	r3, [pc, #76]	; (cb8 <xPortStartScheduler+0x50>)
     c6c:	6819      	ldr	r1, [r3, #0]
     c6e:	22ff      	movs	r2, #255	; 0xff
     c70:	0412      	lsls	r2, r2, #16
     c72:	430a      	orrs	r2, r1
     c74:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
     c76:	6819      	ldr	r1, [r3, #0]
     c78:	22ff      	movs	r2, #255	; 0xff
     c7a:	0612      	lsls	r2, r2, #24
     c7c:	430a      	orrs	r2, r1
     c7e:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
     c80:	4d0e      	ldr	r5, [pc, #56]	; (cbc <xPortStartScheduler+0x54>)
     c82:	2400      	movs	r4, #0
     c84:	602c      	str	r4, [r5, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
     c86:	4b0e      	ldr	r3, [pc, #56]	; (cc0 <xPortStartScheduler+0x58>)
     c88:	601c      	str	r4, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
     c8a:	2000      	movs	r0, #0
     c8c:	4b0d      	ldr	r3, [pc, #52]	; (cc4 <xPortStartScheduler+0x5c>)
     c8e:	4798      	blx	r3
     c90:	21fa      	movs	r1, #250	; 0xfa
     c92:	0089      	lsls	r1, r1, #2
     c94:	4b0c      	ldr	r3, [pc, #48]	; (cc8 <xPortStartScheduler+0x60>)
     c96:	4798      	blx	r3
     c98:	3801      	subs	r0, #1
     c9a:	4b0c      	ldr	r3, [pc, #48]	; (ccc <xPortStartScheduler+0x64>)
     c9c:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
     c9e:	2307      	movs	r3, #7
     ca0:	602b      	str	r3, [r5, #0]
	uxCriticalNesting = 0;
     ca2:	4b0b      	ldr	r3, [pc, #44]	; (cd0 <xPortStartScheduler+0x68>)
     ca4:	601c      	str	r4, [r3, #0]
	vPortStartFirstTask();
     ca6:	4b0b      	ldr	r3, [pc, #44]	; (cd4 <xPortStartScheduler+0x6c>)
     ca8:	4798      	blx	r3
	vTaskSwitchContext();
     caa:	4b0b      	ldr	r3, [pc, #44]	; (cd8 <xPortStartScheduler+0x70>)
     cac:	4798      	blx	r3
	prvTaskExitError();
     cae:	4b0b      	ldr	r3, [pc, #44]	; (cdc <xPortStartScheduler+0x74>)
     cb0:	4798      	blx	r3
}
     cb2:	2000      	movs	r0, #0
     cb4:	bd70      	pop	{r4, r5, r6, pc}
     cb6:	46c0      	nop			; (mov r8, r8)
     cb8:	e000ed20 	.word	0xe000ed20
     cbc:	e000e010 	.word	0xe000e010
     cc0:	e000e018 	.word	0xe000e018
     cc4:	000029f5 	.word	0x000029f5
     cc8:	00002e45 	.word	0x00002e45
     ccc:	e000e014 	.word	0xe000e014
     cd0:	20000000 	.word	0x20000000
     cd4:	00000c11 	.word	0x00000c11
     cd8:	00001d7d 	.word	0x00001d7d
     cdc:	00000be1 	.word	0x00000be1

00000ce0 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
     ce0:	2280      	movs	r2, #128	; 0x80
     ce2:	0552      	lsls	r2, r2, #21
     ce4:	4b03      	ldr	r3, [pc, #12]	; (cf4 <vPortYield+0x14>)
     ce6:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
     ce8:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
     cec:	f3bf 8f6f 	isb	sy
}
     cf0:	4770      	bx	lr
     cf2:	46c0      	nop			; (mov r8, r8)
     cf4:	e000ed04 	.word	0xe000ed04

00000cf8 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
     cf8:	b672      	cpsid	i
    uxCriticalNesting++;
     cfa:	4a04      	ldr	r2, [pc, #16]	; (d0c <vPortEnterCritical+0x14>)
     cfc:	6813      	ldr	r3, [r2, #0]
     cfe:	3301      	adds	r3, #1
     d00:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
     d02:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
     d06:	f3bf 8f6f 	isb	sy
}
     d0a:	4770      	bx	lr
     d0c:	20000000 	.word	0x20000000

00000d10 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
     d10:	4b06      	ldr	r3, [pc, #24]	; (d2c <vPortExitCritical+0x1c>)
     d12:	681b      	ldr	r3, [r3, #0]
     d14:	2b00      	cmp	r3, #0
     d16:	d101      	bne.n	d1c <vPortExitCritical+0xc>
     d18:	b672      	cpsid	i
     d1a:	e7fe      	b.n	d1a <vPortExitCritical+0xa>
    uxCriticalNesting--;
     d1c:	3b01      	subs	r3, #1
     d1e:	4a03      	ldr	r2, [pc, #12]	; (d2c <vPortExitCritical+0x1c>)
     d20:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
     d22:	2b00      	cmp	r3, #0
     d24:	d100      	bne.n	d28 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
     d26:	b662      	cpsie	i
}
     d28:	4770      	bx	lr
     d2a:	46c0      	nop			; (mov r8, r8)
     d2c:	20000000 	.word	0x20000000

00000d30 <ulSetInterruptMaskFromISR>:
	__asm volatile(
     d30:	f3ef 8010 	mrs	r0, PRIMASK
     d34:	b672      	cpsid	i
     d36:	4770      	bx	lr

00000d38 <vClearInterruptMaskFromISR>:
	__asm volatile(
     d38:	f380 8810 	msr	PRIMASK, r0
     d3c:	4770      	bx	lr
	...

00000d40 <PendSV_Handler>:
	__asm volatile
     d40:	f3ef 8009 	mrs	r0, PSP
     d44:	4b0e      	ldr	r3, [pc, #56]	; (d80 <pxCurrentTCBConst>)
     d46:	681a      	ldr	r2, [r3, #0]
     d48:	3820      	subs	r0, #32
     d4a:	6010      	str	r0, [r2, #0]
     d4c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
     d4e:	4644      	mov	r4, r8
     d50:	464d      	mov	r5, r9
     d52:	4656      	mov	r6, sl
     d54:	465f      	mov	r7, fp
     d56:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
     d58:	b508      	push	{r3, lr}
     d5a:	b672      	cpsid	i
     d5c:	f001 f80e 	bl	1d7c <vTaskSwitchContext>
     d60:	b662      	cpsie	i
     d62:	bc0c      	pop	{r2, r3}
     d64:	6811      	ldr	r1, [r2, #0]
     d66:	6808      	ldr	r0, [r1, #0]
     d68:	3010      	adds	r0, #16
     d6a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     d6c:	46a0      	mov	r8, r4
     d6e:	46a9      	mov	r9, r5
     d70:	46b2      	mov	sl, r6
     d72:	46bb      	mov	fp, r7
     d74:	f380 8809 	msr	PSP, r0
     d78:	3820      	subs	r0, #32
     d7a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     d7c:	4718      	bx	r3
     d7e:	46c0      	nop			; (mov r8, r8)

00000d80 <pxCurrentTCBConst>:
     d80:	20002f8c 	.word	0x20002f8c

00000d84 <SysTick_Handler>:
{
     d84:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
     d86:	4b07      	ldr	r3, [pc, #28]	; (da4 <SysTick_Handler+0x20>)
     d88:	4798      	blx	r3
     d8a:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
     d8c:	4b06      	ldr	r3, [pc, #24]	; (da8 <SysTick_Handler+0x24>)
     d8e:	4798      	blx	r3
     d90:	2800      	cmp	r0, #0
     d92:	d003      	beq.n	d9c <SysTick_Handler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
     d94:	2280      	movs	r2, #128	; 0x80
     d96:	0552      	lsls	r2, r2, #21
     d98:	4b04      	ldr	r3, [pc, #16]	; (dac <SysTick_Handler+0x28>)
     d9a:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
     d9c:	0020      	movs	r0, r4
     d9e:	4b04      	ldr	r3, [pc, #16]	; (db0 <SysTick_Handler+0x2c>)
     da0:	4798      	blx	r3
}
     da2:	bd10      	pop	{r4, pc}
     da4:	00000d31 	.word	0x00000d31
     da8:	00001b1d 	.word	0x00001b1d
     dac:	e000ed04 	.word	0xe000ed04
     db0:	00000d39 	.word	0x00000d39

00000db4 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     db4:	b570      	push	{r4, r5, r6, lr}
     db6:	0004      	movs	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
     db8:	0743      	lsls	r3, r0, #29
     dba:	d002      	beq.n	dc2 <pvPortMalloc+0xe>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
     dbc:	2307      	movs	r3, #7
     dbe:	439c      	bics	r4, r3
     dc0:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
     dc2:	4b13      	ldr	r3, [pc, #76]	; (e10 <pvPortMalloc+0x5c>)
     dc4:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
     dc6:	4b13      	ldr	r3, [pc, #76]	; (e14 <pvPortMalloc+0x60>)
     dc8:	681b      	ldr	r3, [r3, #0]
     dca:	2b00      	cmp	r3, #0
     dcc:	d012      	beq.n	df4 <pvPortMalloc+0x40>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     dce:	4b12      	ldr	r3, [pc, #72]	; (e18 <pvPortMalloc+0x64>)
     dd0:	681b      	ldr	r3, [r3, #0]
     dd2:	18e4      	adds	r4, r4, r3
     dd4:	4a11      	ldr	r2, [pc, #68]	; (e1c <pvPortMalloc+0x68>)
     dd6:	4294      	cmp	r4, r2
     dd8:	d813      	bhi.n	e02 <pvPortMalloc+0x4e>
     dda:	42a3      	cmp	r3, r4
     ddc:	d211      	bcs.n	e02 <pvPortMalloc+0x4e>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     dde:	4a0d      	ldr	r2, [pc, #52]	; (e14 <pvPortMalloc+0x60>)
     de0:	6815      	ldr	r5, [r2, #0]
     de2:	18ed      	adds	r5, r5, r3
			xNextFreeByte += xWantedSize;
     de4:	4b0c      	ldr	r3, [pc, #48]	; (e18 <pvPortMalloc+0x64>)
     de6:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     de8:	4b0d      	ldr	r3, [pc, #52]	; (e20 <pvPortMalloc+0x6c>)
     dea:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
     dec:	2d00      	cmp	r5, #0
     dee:	d00a      	beq.n	e06 <pvPortMalloc+0x52>
		}
	}
	#endif

	return pvReturn;
}
     df0:	0028      	movs	r0, r5
     df2:	bd70      	pop	{r4, r5, r6, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
     df4:	2207      	movs	r2, #7
     df6:	4b0b      	ldr	r3, [pc, #44]	; (e24 <pvPortMalloc+0x70>)
     df8:	3308      	adds	r3, #8
     dfa:	4393      	bics	r3, r2
     dfc:	4a05      	ldr	r2, [pc, #20]	; (e14 <pvPortMalloc+0x60>)
     dfe:	6013      	str	r3, [r2, #0]
     e00:	e7e5      	b.n	dce <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
     e02:	4b07      	ldr	r3, [pc, #28]	; (e20 <pvPortMalloc+0x6c>)
     e04:	4798      	blx	r3
			vApplicationMallocFailedHook();
     e06:	4b08      	ldr	r3, [pc, #32]	; (e28 <pvPortMalloc+0x74>)
     e08:	4798      	blx	r3
     e0a:	2500      	movs	r5, #0
	return pvReturn;
     e0c:	e7f0      	b.n	df0 <pvPortMalloc+0x3c>
     e0e:	46c0      	nop			; (mov r8, r8)
     e10:	00001b01 	.word	0x00001b01
     e14:	200000a4 	.word	0x200000a4
     e18:	20002f88 	.word	0x20002f88
     e1c:	00002ed7 	.word	0x00002ed7
     e20:	00001c3d 	.word	0x00001c3d
     e24:	200000a8 	.word	0x200000a8
     e28:	00002e3f 	.word	0x00002e3f

00000e2c <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
     e2c:	2800      	cmp	r0, #0
     e2e:	d001      	beq.n	e34 <vPortFree+0x8>
     e30:	b672      	cpsid	i
     e32:	e7fe      	b.n	e32 <vPortFree+0x6>
}
     e34:	4770      	bx	lr
	...

00000e38 <dUART_WriteCallback>:
* @param[out]	N/A
* @return		N/A
* @note
*****************************************************************************/
void dUART_WriteCallback(struct usart_module *const usart_module)
{
     e38:	b510      	push	{r4, lr}
    // Only continue if there are more characters to send
	if (circular_buf_get(cbufTx, (uint8_t *)&latestTx) != -1)  
     e3a:	4b06      	ldr	r3, [pc, #24]	; (e54 <dUART_WriteCallback+0x1c>)
     e3c:	6818      	ldr	r0, [r3, #0]
     e3e:	4906      	ldr	r1, [pc, #24]	; (e58 <dUART_WriteCallback+0x20>)
     e40:	4b06      	ldr	r3, [pc, #24]	; (e5c <dUART_WriteCallback+0x24>)
     e42:	4798      	blx	r3
     e44:	1c43      	adds	r3, r0, #1
     e46:	d004      	beq.n	e52 <dUART_WriteCallback+0x1a>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
     e48:	2201      	movs	r2, #1
     e4a:	4903      	ldr	r1, [pc, #12]	; (e58 <dUART_WriteCallback+0x20>)
     e4c:	4804      	ldr	r0, [pc, #16]	; (e60 <dUART_WriteCallback+0x28>)
     e4e:	4b05      	ldr	r3, [pc, #20]	; (e64 <dUART_WriteCallback+0x2c>)
     e50:	4798      	blx	r3
    }
     e52:	bd10      	pop	{r4, pc}
     e54:	20003550 	.word	0x20003550
     e58:	2000354c 	.word	0x2000354c
     e5c:	00000509 	.word	0x00000509
     e60:	20003110 	.word	0x20003110
     e64:	00000921 	.word	0x00000921

00000e68 <dUART_ReadCallback>:
{
     e68:	b510      	push	{r4, lr}
	circular_buf_put(cbufRx, (uint8_t)latestRx);                      
     e6a:	4c06      	ldr	r4, [pc, #24]	; (e84 <dUART_ReadCallback+0x1c>)
     e6c:	7821      	ldrb	r1, [r4, #0]
     e6e:	4b06      	ldr	r3, [pc, #24]	; (e88 <dUART_ReadCallback+0x20>)
     e70:	6818      	ldr	r0, [r3, #0]
     e72:	4b06      	ldr	r3, [pc, #24]	; (e8c <dUART_ReadCallback+0x24>)
     e74:	4798      	blx	r3
	usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  
     e76:	2201      	movs	r2, #1
     e78:	0021      	movs	r1, r4
     e7a:	4805      	ldr	r0, [pc, #20]	; (e90 <dUART_ReadCallback+0x28>)
     e7c:	4b05      	ldr	r3, [pc, #20]	; (e94 <dUART_ReadCallback+0x2c>)
     e7e:	4798      	blx	r3
}
     e80:	bd10      	pop	{r4, pc}
     e82:	46c0      	nop			; (mov r8, r8)
     e84:	20003148 	.word	0x20003148
     e88:	20003144 	.word	0x20003144
     e8c:	000004dd 	.word	0x000004dd
     e90:	20003110 	.word	0x20003110
     e94:	00000941 	.word	0x00000941

00000e98 <dUART_WriteString>:
{
     e98:	b5f0      	push	{r4, r5, r6, r7, lr}
     e9a:	46c6      	mov	lr, r8
     e9c:	b500      	push	{lr}
     e9e:	0005      	movs	r5, r0
     ea0:	2400      	movs	r4, #0
    if (string != NULL) {
     ea2:	2800      	cmp	r0, #0
     ea4:	d012      	beq.n	ecc <dUART_WriteString+0x34>
        for (size_t iter = 0; iter < strlen(string); iter++) {
     ea6:	4e11      	ldr	r6, [pc, #68]	; (eec <dUART_WriteString+0x54>)
            circular_buf_put(cbufTx, string[iter]);
     ea8:	4f11      	ldr	r7, [pc, #68]	; (ef0 <dUART_WriteString+0x58>)
     eaa:	4b12      	ldr	r3, [pc, #72]	; (ef4 <dUART_WriteString+0x5c>)
     eac:	4698      	mov	r8, r3
     eae:	e003      	b.n	eb8 <dUART_WriteString+0x20>
     eb0:	5d29      	ldrb	r1, [r5, r4]
     eb2:	6838      	ldr	r0, [r7, #0]
     eb4:	47c0      	blx	r8
        for (size_t iter = 0; iter < strlen(string); iter++) {
     eb6:	3401      	adds	r4, #1
     eb8:	0028      	movs	r0, r5
     eba:	47b0      	blx	r6
     ebc:	4284      	cmp	r4, r0
     ebe:	d3f7      	bcc.n	eb0 <dUART_WriteString+0x18>
        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
     ec0:	2101      	movs	r1, #1
     ec2:	480d      	ldr	r0, [pc, #52]	; (ef8 <dUART_WriteString+0x60>)
     ec4:	4b0d      	ldr	r3, [pc, #52]	; (efc <dUART_WriteString+0x64>)
     ec6:	4798      	blx	r3
     ec8:	2800      	cmp	r0, #0
     eca:	d002      	beq.n	ed2 <dUART_WriteString+0x3a>
}
     ecc:	bc04      	pop	{r2}
     ece:	4690      	mov	r8, r2
     ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            circular_buf_get(cbufTx, (uint8_t *)&latestTx);  // Perform only if the SERCOM TX is free (not busy)
     ed2:	4c0b      	ldr	r4, [pc, #44]	; (f00 <dUART_WriteString+0x68>)
     ed4:	4b06      	ldr	r3, [pc, #24]	; (ef0 <dUART_WriteString+0x58>)
     ed6:	6818      	ldr	r0, [r3, #0]
     ed8:	0021      	movs	r1, r4
     eda:	4b0a      	ldr	r3, [pc, #40]	; (f04 <dUART_WriteString+0x6c>)
     edc:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
     ede:	2201      	movs	r2, #1
     ee0:	0021      	movs	r1, r4
     ee2:	4805      	ldr	r0, [pc, #20]	; (ef8 <dUART_WriteString+0x60>)
     ee4:	4b08      	ldr	r3, [pc, #32]	; (f08 <dUART_WriteString+0x70>)
     ee6:	4798      	blx	r3
}
     ee8:	e7f0      	b.n	ecc <dUART_WriteString+0x34>
     eea:	46c0      	nop			; (mov r8, r8)
     eec:	00003111 	.word	0x00003111
     ef0:	20003550 	.word	0x20003550
     ef4:	000004dd 	.word	0x000004dd
     ef8:	20003110 	.word	0x20003110
     efc:	00000961 	.word	0x00000961
     f00:	2000354c 	.word	0x2000354c
     f04:	00000509 	.word	0x00000509
     f08:	00000921 	.word	0x00000921

00000f0c <dUART_Initialize>:
{
     f0c:	b530      	push	{r4, r5, lr}
     f0e:	b091      	sub	sp, #68	; 0x44
    cbufRx = circular_buf_init((uint8_t *)rxCharacterBuffer, RX_BUFFER_SIZE);
     f10:	2580      	movs	r5, #128	; 0x80
     f12:	00ad      	lsls	r5, r5, #2
     f14:	0029      	movs	r1, r5
     f16:	4836      	ldr	r0, [pc, #216]	; (ff0 <dUART_Initialize+0xe4>)
     f18:	4c36      	ldr	r4, [pc, #216]	; (ff4 <dUART_Initialize+0xe8>)
     f1a:	47a0      	blx	r4
     f1c:	4b36      	ldr	r3, [pc, #216]	; (ff8 <dUART_Initialize+0xec>)
     f1e:	6018      	str	r0, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *)txCharacterBuffer, RX_BUFFER_SIZE);
     f20:	0029      	movs	r1, r5
     f22:	4836      	ldr	r0, [pc, #216]	; (ffc <dUART_Initialize+0xf0>)
     f24:	47a0      	blx	r4
     f26:	4b36      	ldr	r3, [pc, #216]	; (1000 <dUART_Initialize+0xf4>)
     f28:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     f2a:	2380      	movs	r3, #128	; 0x80
     f2c:	05db      	lsls	r3, r3, #23
     f2e:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     f30:	2300      	movs	r3, #0
     f32:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     f34:	22ff      	movs	r2, #255	; 0xff
     f36:	4669      	mov	r1, sp
     f38:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     f3a:	2200      	movs	r2, #0
     f3c:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     f3e:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     f40:	2101      	movs	r1, #1
     f42:	2024      	movs	r0, #36	; 0x24
     f44:	466c      	mov	r4, sp
     f46:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
     f48:	3001      	adds	r0, #1
     f4a:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
     f4c:	3125      	adds	r1, #37	; 0x25
     f4e:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
     f50:	3101      	adds	r1, #1
     f52:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
     f54:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     f56:	3105      	adds	r1, #5
     f58:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
     f5a:	3101      	adds	r1, #1
     f5c:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     f5e:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     f60:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     f62:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     f64:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     f66:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     f68:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
     f6a:	2313      	movs	r3, #19
     f6c:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     f6e:	7762      	strb	r2, [r4, #29]
    config_usart.baudrate = 115200;
     f70:	23e1      	movs	r3, #225	; 0xe1
     f72:	025b      	lsls	r3, r3, #9
     f74:	9308      	str	r3, [sp, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
     f76:	23c4      	movs	r3, #196	; 0xc4
     f78:	039b      	lsls	r3, r3, #14
     f7a:	9303      	str	r3, [sp, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
     f7c:	2301      	movs	r3, #1
     f7e:	425b      	negs	r3, r3
     f80:	930c      	str	r3, [sp, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
     f82:	930d      	str	r3, [sp, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
     f84:	4b1f      	ldr	r3, [pc, #124]	; (1004 <dUART_Initialize+0xf8>)
     f86:	930e      	str	r3, [sp, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
     f88:	4b1f      	ldr	r3, [pc, #124]	; (1008 <dUART_Initialize+0xfc>)
     f8a:	930f      	str	r3, [sp, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
     f8c:	4d1f      	ldr	r5, [pc, #124]	; (100c <dUART_Initialize+0x100>)
     f8e:	4c20      	ldr	r4, [pc, #128]	; (1010 <dUART_Initialize+0x104>)
     f90:	466a      	mov	r2, sp
     f92:	4920      	ldr	r1, [pc, #128]	; (1014 <dUART_Initialize+0x108>)
     f94:	0028      	movs	r0, r5
     f96:	47a0      	blx	r4
     f98:	2800      	cmp	r0, #0
     f9a:	d1f9      	bne.n	f90 <dUART_Initialize+0x84>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     f9c:	4d1b      	ldr	r5, [pc, #108]	; (100c <dUART_Initialize+0x100>)
     f9e:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     fa0:	0020      	movs	r0, r4
     fa2:	4b1d      	ldr	r3, [pc, #116]	; (1018 <dUART_Initialize+0x10c>)
     fa4:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     fa6:	231f      	movs	r3, #31
     fa8:	4018      	ands	r0, r3
     faa:	3b1e      	subs	r3, #30
     fac:	4083      	lsls	r3, r0
     fae:	4a1b      	ldr	r2, [pc, #108]	; (101c <dUART_Initialize+0x110>)
     fb0:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     fb2:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     fb4:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     fb6:	2b00      	cmp	r3, #0
     fb8:	d1fc      	bne.n	fb4 <dUART_Initialize+0xa8>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     fba:	6823      	ldr	r3, [r4, #0]
     fbc:	2202      	movs	r2, #2
     fbe:	4313      	orrs	r3, r2
     fc0:	6023      	str	r3, [r4, #0]
    usart_register_callback(&usart_instance, dUART_WriteCallback, USART_CALLBACK_BUFFER_TRANSMITTED);
     fc2:	4c12      	ldr	r4, [pc, #72]	; (100c <dUART_Initialize+0x100>)
     fc4:	2200      	movs	r2, #0
     fc6:	4916      	ldr	r1, [pc, #88]	; (1020 <dUART_Initialize+0x114>)
     fc8:	0020      	movs	r0, r4
     fca:	4d16      	ldr	r5, [pc, #88]	; (1024 <dUART_Initialize+0x118>)
     fcc:	47a8      	blx	r5
    usart_register_callback(&usart_instance, dUART_ReadCallback, USART_CALLBACK_BUFFER_RECEIVED);
     fce:	2201      	movs	r2, #1
     fd0:	4915      	ldr	r1, [pc, #84]	; (1028 <dUART_Initialize+0x11c>)
     fd2:	0020      	movs	r0, r4
     fd4:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     fd6:	2231      	movs	r2, #49	; 0x31
     fd8:	5ca3      	ldrb	r3, [r4, r2]
     fda:	2103      	movs	r1, #3
     fdc:	430b      	orrs	r3, r1
     fde:	54a3      	strb	r3, [r4, r2]
    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Kicks off constant reading of characters
     fe0:	3a30      	subs	r2, #48	; 0x30
     fe2:	4912      	ldr	r1, [pc, #72]	; (102c <dUART_Initialize+0x120>)
     fe4:	0020      	movs	r0, r4
     fe6:	4b12      	ldr	r3, [pc, #72]	; (1030 <dUART_Initialize+0x124>)
     fe8:	4798      	blx	r3
}
     fea:	b011      	add	sp, #68	; 0x44
     fec:	bd30      	pop	{r4, r5, pc}
     fee:	46c0      	nop			; (mov r8, r8)
     ff0:	2000334c 	.word	0x2000334c
     ff4:	000004bd 	.word	0x000004bd
     ff8:	20003144 	.word	0x20003144
     ffc:	2000314c 	.word	0x2000314c
    1000:	20003550 	.word	0x20003550
    1004:	002a0003 	.word	0x002a0003
    1008:	002b0003 	.word	0x002b0003
    100c:	20003110 	.word	0x20003110
    1010:	00000541 	.word	0x00000541
    1014:	42001800 	.word	0x42001800
    1018:	00000b51 	.word	0x00000b51
    101c:	e000e100 	.word	0xe000e100
    1020:	00000e39 	.word	0x00000e39
    1024:	00000909 	.word	0x00000909
    1028:	00000e69 	.word	0x00000e69
    102c:	20003148 	.word	0x20003148
    1030:	00000941 	.word	0x00000941

00001034 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1034:	0003      	movs	r3, r0
    1036:	3308      	adds	r3, #8
    1038:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    103a:	2201      	movs	r2, #1
    103c:	4252      	negs	r2, r2
    103e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1040:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1042:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1044:	2300      	movs	r3, #0
    1046:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    1048:	4770      	bx	lr

0000104a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    104a:	2300      	movs	r3, #0
    104c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    104e:	4770      	bx	lr

00001050 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
    1050:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1052:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1054:	689a      	ldr	r2, [r3, #8]
    1056:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1058:	689a      	ldr	r2, [r3, #8]
    105a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
    105c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    105e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    1060:	6803      	ldr	r3, [r0, #0]
    1062:	3301      	adds	r3, #1
    1064:	6003      	str	r3, [r0, #0]
}
    1066:	4770      	bx	lr

00001068 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1068:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    106a:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    106c:	0002      	movs	r2, r0
    106e:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
    1070:	1c63      	adds	r3, r4, #1
    1072:	d102      	bne.n	107a <vListInsert+0x12>
		pxIterator = pxList->xListEnd.pxPrevious;
    1074:	6902      	ldr	r2, [r0, #16]
    1076:	e004      	b.n	1082 <vListInsert+0x1a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1078:	001a      	movs	r2, r3
    107a:	6853      	ldr	r3, [r2, #4]
    107c:	681d      	ldr	r5, [r3, #0]
    107e:	42ac      	cmp	r4, r5
    1080:	d2fa      	bcs.n	1078 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1082:	6853      	ldr	r3, [r2, #4]
    1084:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1086:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    1088:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
    108a:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    108c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    108e:	6803      	ldr	r3, [r0, #0]
    1090:	3301      	adds	r3, #1
    1092:	6003      	str	r3, [r0, #0]
}
    1094:	bd30      	pop	{r4, r5, pc}

00001096 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    1096:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1098:	6842      	ldr	r2, [r0, #4]
    109a:	6881      	ldr	r1, [r0, #8]
    109c:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    109e:	6882      	ldr	r2, [r0, #8]
    10a0:	6841      	ldr	r1, [r0, #4]
    10a2:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    10a4:	685a      	ldr	r2, [r3, #4]
    10a6:	4290      	cmp	r0, r2
    10a8:	d006      	beq.n	10b8 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    10aa:	2200      	movs	r2, #0
    10ac:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
    10ae:	681a      	ldr	r2, [r3, #0]
    10b0:	3a01      	subs	r2, #1
    10b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    10b4:	6818      	ldr	r0, [r3, #0]
}
    10b6:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    10b8:	6882      	ldr	r2, [r0, #8]
    10ba:	605a      	str	r2, [r3, #4]
    10bc:	e7f5      	b.n	10aa <uxListRemove+0x14>
	...

000010c0 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    10c0:	b510      	push	{r4, lr}
    10c2:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
    10c4:	4b03      	ldr	r3, [pc, #12]	; (10d4 <prvIsQueueEmpty+0x14>)
    10c6:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    10c8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    10ca:	4b03      	ldr	r3, [pc, #12]	; (10d8 <prvIsQueueEmpty+0x18>)
    10cc:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    10ce:	4260      	negs	r0, r4
    10d0:	4160      	adcs	r0, r4

	return xReturn;
}
    10d2:	bd10      	pop	{r4, pc}
    10d4:	00000cf9 	.word	0x00000cf9
    10d8:	00000d11 	.word	0x00000d11

000010dc <prvCopyDataToQueue>:
{
    10dc:	b570      	push	{r4, r5, r6, lr}
    10de:	0004      	movs	r4, r0
    10e0:	0016      	movs	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    10e2:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    10e4:	6c02      	ldr	r2, [r0, #64]	; 0x40
    10e6:	2a00      	cmp	r2, #0
    10e8:	d10b      	bne.n	1102 <prvCopyDataToQueue+0x26>
BaseType_t xReturn = pdFALSE;
    10ea:	2000      	movs	r0, #0
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    10ec:	6823      	ldr	r3, [r4, #0]
    10ee:	4283      	cmp	r3, r0
    10f0:	d104      	bne.n	10fc <prvCopyDataToQueue+0x20>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    10f2:	6860      	ldr	r0, [r4, #4]
    10f4:	4b16      	ldr	r3, [pc, #88]	; (1150 <prvCopyDataToQueue+0x74>)
    10f6:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    10f8:	2300      	movs	r3, #0
    10fa:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    10fc:	3501      	adds	r5, #1
    10fe:	63a5      	str	r5, [r4, #56]	; 0x38
}
    1100:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
    1102:	2e00      	cmp	r6, #0
    1104:	d10e      	bne.n	1124 <prvCopyDataToQueue+0x48>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    1106:	6880      	ldr	r0, [r0, #8]
    1108:	4b12      	ldr	r3, [pc, #72]	; (1154 <prvCopyDataToQueue+0x78>)
    110a:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    110c:	68a3      	ldr	r3, [r4, #8]
    110e:	6c22      	ldr	r2, [r4, #64]	; 0x40
    1110:	4694      	mov	ip, r2
    1112:	4463      	add	r3, ip
    1114:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
    1116:	2000      	movs	r0, #0
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    1118:	6862      	ldr	r2, [r4, #4]
    111a:	4293      	cmp	r3, r2
    111c:	d3ee      	bcc.n	10fc <prvCopyDataToQueue+0x20>
			pxQueue->pcWriteTo = pxQueue->pcHead;
    111e:	6823      	ldr	r3, [r4, #0]
    1120:	60a3      	str	r3, [r4, #8]
    1122:	e7eb      	b.n	10fc <prvCopyDataToQueue+0x20>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1124:	68c0      	ldr	r0, [r0, #12]
    1126:	4b0b      	ldr	r3, [pc, #44]	; (1154 <prvCopyDataToQueue+0x78>)
    1128:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    112a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    112c:	425b      	negs	r3, r3
    112e:	68e2      	ldr	r2, [r4, #12]
    1130:	18d2      	adds	r2, r2, r3
    1132:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    1134:	6821      	ldr	r1, [r4, #0]
    1136:	428a      	cmp	r2, r1
    1138:	d203      	bcs.n	1142 <prvCopyDataToQueue+0x66>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    113a:	6862      	ldr	r2, [r4, #4]
    113c:	4694      	mov	ip, r2
    113e:	4463      	add	r3, ip
    1140:	60e3      	str	r3, [r4, #12]
BaseType_t xReturn = pdFALSE;
    1142:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
    1144:	2e02      	cmp	r6, #2
    1146:	d1d9      	bne.n	10fc <prvCopyDataToQueue+0x20>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    1148:	4285      	cmp	r5, r0
    114a:	d0d7      	beq.n	10fc <prvCopyDataToQueue+0x20>
				--uxMessagesWaiting;
    114c:	3d01      	subs	r5, #1
    114e:	e7d5      	b.n	10fc <prvCopyDataToQueue+0x20>
    1150:	00001fd9 	.word	0x00001fd9
    1154:	0000300d 	.word	0x0000300d

00001158 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    1158:	b570      	push	{r4, r5, r6, lr}
    115a:	b082      	sub	sp, #8
    115c:	9001      	str	r0, [sp, #4]
    115e:	000a      	movs	r2, r1
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    1160:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    1162:	2c00      	cmp	r4, #0
    1164:	d005      	beq.n	1172 <prvNotifyQueueSetContainer+0x1a>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    1166:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    1168:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    116a:	4299      	cmp	r1, r3
    116c:	d303      	bcc.n	1176 <prvNotifyQueueSetContainer+0x1e>
    116e:	b672      	cpsid	i
    1170:	e7fe      	b.n	1170 <prvNotifyQueueSetContainer+0x18>
		configASSERT( pxQueueSetContainer );
    1172:	b672      	cpsid	i
    1174:	e7fe      	b.n	1174 <prvNotifyQueueSetContainer+0x1c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    1176:	6ba1      	ldr	r1, [r4, #56]	; 0x38
	BaseType_t xReturn = pdFALSE;
    1178:	2600      	movs	r6, #0
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    117a:	428b      	cmp	r3, r1
    117c:	d802      	bhi.n	1184 <prvNotifyQueueSetContainer+0x2c>
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
    117e:	0030      	movs	r0, r6
    1180:	b002      	add	sp, #8
    1182:	bd70      	pop	{r4, r5, r6, pc}
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    1184:	2345      	movs	r3, #69	; 0x45
    1186:	5ce5      	ldrb	r5, [r4, r3]
    1188:	b26d      	sxtb	r5, r5
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    118a:	a901      	add	r1, sp, #4
    118c:	0020      	movs	r0, r4
    118e:	4b0a      	ldr	r3, [pc, #40]	; (11b8 <prvNotifyQueueSetContainer+0x60>)
    1190:	4798      	blx	r3
    1192:	0006      	movs	r6, r0
			if( cTxLock == queueUNLOCKED )
    1194:	1c6b      	adds	r3, r5, #1
    1196:	d10a      	bne.n	11ae <prvNotifyQueueSetContainer+0x56>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    1198:	6a63      	ldr	r3, [r4, #36]	; 0x24
    119a:	2b00      	cmp	r3, #0
    119c:	d0ef      	beq.n	117e <prvNotifyQueueSetContainer+0x26>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    119e:	0020      	movs	r0, r4
    11a0:	3024      	adds	r0, #36	; 0x24
    11a2:	4b06      	ldr	r3, [pc, #24]	; (11bc <prvNotifyQueueSetContainer+0x64>)
    11a4:	4798      	blx	r3
    11a6:	2800      	cmp	r0, #0
    11a8:	d0e9      	beq.n	117e <prvNotifyQueueSetContainer+0x26>
						xReturn = pdTRUE;
    11aa:	2601      	movs	r6, #1
    11ac:	e7e7      	b.n	117e <prvNotifyQueueSetContainer+0x26>
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
    11ae:	3501      	adds	r5, #1
    11b0:	b26d      	sxtb	r5, r5
    11b2:	2345      	movs	r3, #69	; 0x45
    11b4:	54e5      	strb	r5, [r4, r3]
    11b6:	e7e2      	b.n	117e <prvNotifyQueueSetContainer+0x26>
    11b8:	000010dd 	.word	0x000010dd
    11bc:	00001e9d 	.word	0x00001e9d

000011c0 <prvCopyDataFromQueue>:
{
    11c0:	b510      	push	{r4, lr}
    11c2:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    11c4:	6c02      	ldr	r2, [r0, #64]	; 0x40
    11c6:	2a00      	cmp	r2, #0
    11c8:	d00b      	beq.n	11e2 <prvCopyDataFromQueue+0x22>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    11ca:	68c3      	ldr	r3, [r0, #12]
    11cc:	189b      	adds	r3, r3, r2
    11ce:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    11d0:	6841      	ldr	r1, [r0, #4]
    11d2:	428b      	cmp	r3, r1
    11d4:	d301      	bcc.n	11da <prvCopyDataFromQueue+0x1a>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    11d6:	6803      	ldr	r3, [r0, #0]
    11d8:	60c3      	str	r3, [r0, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    11da:	68c1      	ldr	r1, [r0, #12]
    11dc:	0020      	movs	r0, r4
    11de:	4b01      	ldr	r3, [pc, #4]	; (11e4 <prvCopyDataFromQueue+0x24>)
    11e0:	4798      	blx	r3
}
    11e2:	bd10      	pop	{r4, pc}
    11e4:	0000300d 	.word	0x0000300d

000011e8 <prvUnlockQueue>:
{
    11e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11ea:	0007      	movs	r7, r0
	taskENTER_CRITICAL();
    11ec:	4b25      	ldr	r3, [pc, #148]	; (1284 <prvUnlockQueue+0x9c>)
    11ee:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
    11f0:	2345      	movs	r3, #69	; 0x45
    11f2:	5cfc      	ldrb	r4, [r7, r3]
    11f4:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
    11f6:	2c00      	cmp	r4, #0
    11f8:	dd1c      	ble.n	1234 <prvUnlockQueue+0x4c>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    11fa:	4e23      	ldr	r6, [pc, #140]	; (1288 <prvUnlockQueue+0xa0>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    11fc:	4d23      	ldr	r5, [pc, #140]	; (128c <prvUnlockQueue+0xa4>)
    11fe:	e00b      	b.n	1218 <prvUnlockQueue+0x30>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1202:	2b00      	cmp	r3, #0
    1204:	d016      	beq.n	1234 <prvUnlockQueue+0x4c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1206:	0038      	movs	r0, r7
    1208:	3024      	adds	r0, #36	; 0x24
    120a:	47a8      	blx	r5
    120c:	2800      	cmp	r0, #0
    120e:	d10e      	bne.n	122e <prvUnlockQueue+0x46>
    1210:	3c01      	subs	r4, #1
    1212:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
    1214:	2c00      	cmp	r4, #0
    1216:	d00d      	beq.n	1234 <prvUnlockQueue+0x4c>
				if( pxQueue->pxQueueSetContainer != NULL )
    1218:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    121a:	2b00      	cmp	r3, #0
    121c:	d0f0      	beq.n	1200 <prvUnlockQueue+0x18>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    121e:	2100      	movs	r1, #0
    1220:	0038      	movs	r0, r7
    1222:	47b0      	blx	r6
    1224:	2800      	cmp	r0, #0
    1226:	d0f3      	beq.n	1210 <prvUnlockQueue+0x28>
						vTaskMissedYield();
    1228:	4b19      	ldr	r3, [pc, #100]	; (1290 <prvUnlockQueue+0xa8>)
    122a:	4798      	blx	r3
    122c:	e7f0      	b.n	1210 <prvUnlockQueue+0x28>
							vTaskMissedYield();
    122e:	4b18      	ldr	r3, [pc, #96]	; (1290 <prvUnlockQueue+0xa8>)
    1230:	4798      	blx	r3
    1232:	e7ed      	b.n	1210 <prvUnlockQueue+0x28>
		pxQueue->cTxLock = queueUNLOCKED;
    1234:	22ff      	movs	r2, #255	; 0xff
    1236:	2345      	movs	r3, #69	; 0x45
    1238:	54fa      	strb	r2, [r7, r3]
	taskEXIT_CRITICAL();
    123a:	4b16      	ldr	r3, [pc, #88]	; (1294 <prvUnlockQueue+0xac>)
    123c:	4798      	blx	r3
	taskENTER_CRITICAL();
    123e:	4b11      	ldr	r3, [pc, #68]	; (1284 <prvUnlockQueue+0x9c>)
    1240:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
    1242:	2344      	movs	r3, #68	; 0x44
    1244:	5cfc      	ldrb	r4, [r7, r3]
    1246:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
    1248:	2c00      	cmp	r4, #0
    124a:	dd14      	ble.n	1276 <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    124c:	693b      	ldr	r3, [r7, #16]
    124e:	2b00      	cmp	r3, #0
    1250:	d011      	beq.n	1276 <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1252:	003d      	movs	r5, r7
    1254:	3510      	adds	r5, #16
    1256:	4e0d      	ldr	r6, [pc, #52]	; (128c <prvUnlockQueue+0xa4>)
    1258:	e006      	b.n	1268 <prvUnlockQueue+0x80>
    125a:	3c01      	subs	r4, #1
    125c:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
    125e:	2c00      	cmp	r4, #0
    1260:	d009      	beq.n	1276 <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1262:	693b      	ldr	r3, [r7, #16]
    1264:	2b00      	cmp	r3, #0
    1266:	d006      	beq.n	1276 <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1268:	0028      	movs	r0, r5
    126a:	47b0      	blx	r6
    126c:	2800      	cmp	r0, #0
    126e:	d0f4      	beq.n	125a <prvUnlockQueue+0x72>
					vTaskMissedYield();
    1270:	4b07      	ldr	r3, [pc, #28]	; (1290 <prvUnlockQueue+0xa8>)
    1272:	4798      	blx	r3
    1274:	e7f1      	b.n	125a <prvUnlockQueue+0x72>
		pxQueue->cRxLock = queueUNLOCKED;
    1276:	22ff      	movs	r2, #255	; 0xff
    1278:	2344      	movs	r3, #68	; 0x44
    127a:	54fa      	strb	r2, [r7, r3]
	taskEXIT_CRITICAL();
    127c:	4b05      	ldr	r3, [pc, #20]	; (1294 <prvUnlockQueue+0xac>)
    127e:	4798      	blx	r3
}
    1280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1282:	46c0      	nop			; (mov r8, r8)
    1284:	00000cf9 	.word	0x00000cf9
    1288:	00001159 	.word	0x00001159
    128c:	00001e9d 	.word	0x00001e9d
    1290:	00001fad 	.word	0x00001fad
    1294:	00000d11 	.word	0x00000d11

00001298 <xQueueGenericReset>:
{
    1298:	b570      	push	{r4, r5, r6, lr}
    129a:	0004      	movs	r4, r0
    129c:	000d      	movs	r5, r1
	configASSERT( pxQueue );
    129e:	2800      	cmp	r0, #0
    12a0:	d021      	beq.n	12e6 <xQueueGenericReset+0x4e>
	taskENTER_CRITICAL();
    12a2:	4b17      	ldr	r3, [pc, #92]	; (1300 <xQueueGenericReset+0x68>)
    12a4:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    12a6:	6822      	ldr	r2, [r4, #0]
    12a8:	6c21      	ldr	r1, [r4, #64]	; 0x40
    12aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    12ac:	434b      	muls	r3, r1
    12ae:	18d0      	adds	r0, r2, r3
    12b0:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    12b2:	2000      	movs	r0, #0
    12b4:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    12b6:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    12b8:	1a5b      	subs	r3, r3, r1
    12ba:	18d3      	adds	r3, r2, r3
    12bc:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    12be:	23ff      	movs	r3, #255	; 0xff
    12c0:	2244      	movs	r2, #68	; 0x44
    12c2:	54a3      	strb	r3, [r4, r2]
		pxQueue->cTxLock = queueUNLOCKED;
    12c4:	3201      	adds	r2, #1
    12c6:	54a3      	strb	r3, [r4, r2]
		if( xNewQueue == pdFALSE )
    12c8:	2d00      	cmp	r5, #0
    12ca:	d111      	bne.n	12f0 <xQueueGenericReset+0x58>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    12cc:	6923      	ldr	r3, [r4, #16]
    12ce:	2b00      	cmp	r3, #0
    12d0:	d005      	beq.n	12de <xQueueGenericReset+0x46>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    12d2:	0020      	movs	r0, r4
    12d4:	3010      	adds	r0, #16
    12d6:	4b0b      	ldr	r3, [pc, #44]	; (1304 <xQueueGenericReset+0x6c>)
    12d8:	4798      	blx	r3
    12da:	2800      	cmp	r0, #0
    12dc:	d105      	bne.n	12ea <xQueueGenericReset+0x52>
	taskEXIT_CRITICAL();
    12de:	4b0a      	ldr	r3, [pc, #40]	; (1308 <xQueueGenericReset+0x70>)
    12e0:	4798      	blx	r3
}
    12e2:	2001      	movs	r0, #1
    12e4:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
    12e6:	b672      	cpsid	i
    12e8:	e7fe      	b.n	12e8 <xQueueGenericReset+0x50>
					queueYIELD_IF_USING_PREEMPTION();
    12ea:	4b08      	ldr	r3, [pc, #32]	; (130c <xQueueGenericReset+0x74>)
    12ec:	4798      	blx	r3
    12ee:	e7f6      	b.n	12de <xQueueGenericReset+0x46>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    12f0:	0020      	movs	r0, r4
    12f2:	3010      	adds	r0, #16
    12f4:	4d06      	ldr	r5, [pc, #24]	; (1310 <xQueueGenericReset+0x78>)
    12f6:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    12f8:	0020      	movs	r0, r4
    12fa:	3024      	adds	r0, #36	; 0x24
    12fc:	47a8      	blx	r5
    12fe:	e7ee      	b.n	12de <xQueueGenericReset+0x46>
    1300:	00000cf9 	.word	0x00000cf9
    1304:	00001e9d 	.word	0x00001e9d
    1308:	00000d11 	.word	0x00000d11
    130c:	00000ce1 	.word	0x00000ce1
    1310:	00001035 	.word	0x00001035

00001314 <xQueueGenericCreate>:
	{
    1314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1316:	0006      	movs	r6, r0
    1318:	000d      	movs	r5, r1
    131a:	0017      	movs	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    131c:	2800      	cmp	r0, #0
    131e:	d101      	bne.n	1324 <xQueueGenericCreate+0x10>
    1320:	b672      	cpsid	i
    1322:	e7fe      	b.n	1322 <xQueueGenericCreate+0xe>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1324:	0008      	movs	r0, r1
    1326:	4370      	muls	r0, r6
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    1328:	3054      	adds	r0, #84	; 0x54
    132a:	4b0b      	ldr	r3, [pc, #44]	; (1358 <xQueueGenericCreate+0x44>)
    132c:	4798      	blx	r3
    132e:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    1330:	d010      	beq.n	1354 <xQueueGenericCreate+0x40>
	if( uxItemSize == ( UBaseType_t ) 0 )
    1332:	2d00      	cmp	r5, #0
    1334:	d003      	beq.n	133e <xQueueGenericCreate+0x2a>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    1336:	0003      	movs	r3, r0
    1338:	3354      	adds	r3, #84	; 0x54
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    133a:	6003      	str	r3, [r0, #0]
    133c:	e000      	b.n	1340 <xQueueGenericCreate+0x2c>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    133e:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
    1340:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    1342:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    1344:	2101      	movs	r1, #1
    1346:	0020      	movs	r0, r4
    1348:	4b04      	ldr	r3, [pc, #16]	; (135c <xQueueGenericCreate+0x48>)
    134a:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
    134c:	2350      	movs	r3, #80	; 0x50
    134e:	54e7      	strb	r7, [r4, r3]
		pxNewQueue->pxQueueSetContainer = NULL;
    1350:	2300      	movs	r3, #0
    1352:	64a3      	str	r3, [r4, #72]	; 0x48
	}
    1354:	0020      	movs	r0, r4
    1356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1358:	00000db5 	.word	0x00000db5
    135c:	00001299 	.word	0x00001299

00001360 <xQueueGenericSend>:
{
    1360:	b5f0      	push	{r4, r5, r6, r7, lr}
    1362:	46ce      	mov	lr, r9
    1364:	4647      	mov	r7, r8
    1366:	b580      	push	{r7, lr}
    1368:	b085      	sub	sp, #20
    136a:	0004      	movs	r4, r0
    136c:	000f      	movs	r7, r1
    136e:	9201      	str	r2, [sp, #4]
    1370:	001d      	movs	r5, r3
	configASSERT( pxQueue );
    1372:	2800      	cmp	r0, #0
    1374:	d00c      	beq.n	1390 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    1376:	2900      	cmp	r1, #0
    1378:	d00c      	beq.n	1394 <xQueueGenericSend+0x34>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    137a:	2d02      	cmp	r5, #2
    137c:	d00f      	beq.n	139e <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    137e:	4b4e      	ldr	r3, [pc, #312]	; (14b8 <xQueueGenericSend+0x158>)
    1380:	4798      	blx	r3
    1382:	2800      	cmp	r0, #0
    1384:	d110      	bne.n	13a8 <xQueueGenericSend+0x48>
    1386:	9b01      	ldr	r3, [sp, #4]
    1388:	2b00      	cmp	r3, #0
    138a:	d011      	beq.n	13b0 <xQueueGenericSend+0x50>
    138c:	b672      	cpsid	i
    138e:	e7fe      	b.n	138e <xQueueGenericSend+0x2e>
	configASSERT( pxQueue );
    1390:	b672      	cpsid	i
    1392:	e7fe      	b.n	1392 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    1394:	6c03      	ldr	r3, [r0, #64]	; 0x40
    1396:	2b00      	cmp	r3, #0
    1398:	d0ef      	beq.n	137a <xQueueGenericSend+0x1a>
    139a:	b672      	cpsid	i
    139c:	e7fe      	b.n	139c <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    139e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    13a0:	2b01      	cmp	r3, #1
    13a2:	d0ec      	beq.n	137e <xQueueGenericSend+0x1e>
    13a4:	b672      	cpsid	i
    13a6:	e7fe      	b.n	13a6 <xQueueGenericSend+0x46>
    13a8:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
    13aa:	4b44      	ldr	r3, [pc, #272]	; (14bc <xQueueGenericSend+0x15c>)
    13ac:	4698      	mov	r8, r3
    13ae:	e04c      	b.n	144a <xQueueGenericSend+0xea>
    13b0:	2600      	movs	r6, #0
    13b2:	e7fa      	b.n	13aa <xQueueGenericSend+0x4a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    13b4:	002a      	movs	r2, r5
    13b6:	0039      	movs	r1, r7
    13b8:	0020      	movs	r0, r4
    13ba:	4b41      	ldr	r3, [pc, #260]	; (14c0 <xQueueGenericSend+0x160>)
    13bc:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
    13be:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    13c0:	2b00      	cmp	r3, #0
    13c2:	d00f      	beq.n	13e4 <xQueueGenericSend+0x84>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    13c4:	0029      	movs	r1, r5
    13c6:	0020      	movs	r0, r4
    13c8:	4b3e      	ldr	r3, [pc, #248]	; (14c4 <xQueueGenericSend+0x164>)
    13ca:	4798      	blx	r3
    13cc:	2800      	cmp	r0, #0
    13ce:	d001      	beq.n	13d4 <xQueueGenericSend+0x74>
							queueYIELD_IF_USING_PREEMPTION();
    13d0:	4b3d      	ldr	r3, [pc, #244]	; (14c8 <xQueueGenericSend+0x168>)
    13d2:	4798      	blx	r3
				taskEXIT_CRITICAL();
    13d4:	4b3d      	ldr	r3, [pc, #244]	; (14cc <xQueueGenericSend+0x16c>)
    13d6:	4798      	blx	r3
				return pdPASS;
    13d8:	2001      	movs	r0, #1
}
    13da:	b005      	add	sp, #20
    13dc:	bc0c      	pop	{r2, r3}
    13de:	4690      	mov	r8, r2
    13e0:	4699      	mov	r9, r3
    13e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    13e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    13e6:	2b00      	cmp	r3, #0
    13e8:	d008      	beq.n	13fc <xQueueGenericSend+0x9c>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    13ea:	0020      	movs	r0, r4
    13ec:	3024      	adds	r0, #36	; 0x24
    13ee:	4b38      	ldr	r3, [pc, #224]	; (14d0 <xQueueGenericSend+0x170>)
    13f0:	4798      	blx	r3
    13f2:	2800      	cmp	r0, #0
    13f4:	d0ee      	beq.n	13d4 <xQueueGenericSend+0x74>
								queueYIELD_IF_USING_PREEMPTION();
    13f6:	4b34      	ldr	r3, [pc, #208]	; (14c8 <xQueueGenericSend+0x168>)
    13f8:	4798      	blx	r3
    13fa:	e7eb      	b.n	13d4 <xQueueGenericSend+0x74>
						else if( xYieldRequired != pdFALSE )
    13fc:	2800      	cmp	r0, #0
    13fe:	d0e9      	beq.n	13d4 <xQueueGenericSend+0x74>
							queueYIELD_IF_USING_PREEMPTION();
    1400:	4b31      	ldr	r3, [pc, #196]	; (14c8 <xQueueGenericSend+0x168>)
    1402:	4798      	blx	r3
    1404:	e7e6      	b.n	13d4 <xQueueGenericSend+0x74>
					taskEXIT_CRITICAL();
    1406:	4b31      	ldr	r3, [pc, #196]	; (14cc <xQueueGenericSend+0x16c>)
    1408:	4798      	blx	r3
					return errQUEUE_FULL;
    140a:	2000      	movs	r0, #0
    140c:	e7e5      	b.n	13da <xQueueGenericSend+0x7a>
		prvLockQueue( pxQueue );
    140e:	4b2f      	ldr	r3, [pc, #188]	; (14cc <xQueueGenericSend+0x16c>)
    1410:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1412:	a901      	add	r1, sp, #4
    1414:	a802      	add	r0, sp, #8
    1416:	4b2f      	ldr	r3, [pc, #188]	; (14d4 <xQueueGenericSend+0x174>)
    1418:	4798      	blx	r3
    141a:	2800      	cmp	r0, #0
    141c:	d144      	bne.n	14a8 <xQueueGenericSend+0x148>
	taskENTER_CRITICAL();
    141e:	4b27      	ldr	r3, [pc, #156]	; (14bc <xQueueGenericSend+0x15c>)
    1420:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    1422:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1424:	4699      	mov	r9, r3
    1426:	6be6      	ldr	r6, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
    1428:	4b28      	ldr	r3, [pc, #160]	; (14cc <xQueueGenericSend+0x16c>)
    142a:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    142c:	45b1      	cmp	r9, r6
    142e:	d135      	bne.n	149c <xQueueGenericSend+0x13c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1430:	0020      	movs	r0, r4
    1432:	3010      	adds	r0, #16
    1434:	9901      	ldr	r1, [sp, #4]
    1436:	4b28      	ldr	r3, [pc, #160]	; (14d8 <xQueueGenericSend+0x178>)
    1438:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    143a:	0020      	movs	r0, r4
    143c:	4b27      	ldr	r3, [pc, #156]	; (14dc <xQueueGenericSend+0x17c>)
    143e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    1440:	4b27      	ldr	r3, [pc, #156]	; (14e0 <xQueueGenericSend+0x180>)
    1442:	4798      	blx	r3
    1444:	2800      	cmp	r0, #0
    1446:	d026      	beq.n	1496 <xQueueGenericSend+0x136>
    1448:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
    144a:	47c0      	blx	r8
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    144c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    144e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    1450:	4293      	cmp	r3, r2
    1452:	d3af      	bcc.n	13b4 <xQueueGenericSend+0x54>
    1454:	2d02      	cmp	r5, #2
    1456:	d0ad      	beq.n	13b4 <xQueueGenericSend+0x54>
				if( xTicksToWait == ( TickType_t ) 0 )
    1458:	9b01      	ldr	r3, [sp, #4]
    145a:	2b00      	cmp	r3, #0
    145c:	d0d3      	beq.n	1406 <xQueueGenericSend+0xa6>
				else if( xEntryTimeSet == pdFALSE )
    145e:	2e00      	cmp	r6, #0
    1460:	d102      	bne.n	1468 <xQueueGenericSend+0x108>
					vTaskInternalSetTimeOutState( &xTimeOut );
    1462:	a802      	add	r0, sp, #8
    1464:	4b1f      	ldr	r3, [pc, #124]	; (14e4 <xQueueGenericSend+0x184>)
    1466:	4798      	blx	r3
		taskEXIT_CRITICAL();
    1468:	4b18      	ldr	r3, [pc, #96]	; (14cc <xQueueGenericSend+0x16c>)
    146a:	4798      	blx	r3
		vTaskSuspendAll();
    146c:	4b1e      	ldr	r3, [pc, #120]	; (14e8 <xQueueGenericSend+0x188>)
    146e:	4798      	blx	r3
		prvLockQueue( pxQueue );
    1470:	4b12      	ldr	r3, [pc, #72]	; (14bc <xQueueGenericSend+0x15c>)
    1472:	4798      	blx	r3
    1474:	2344      	movs	r3, #68	; 0x44
    1476:	5ce3      	ldrb	r3, [r4, r3]
    1478:	b25b      	sxtb	r3, r3
    147a:	3301      	adds	r3, #1
    147c:	d102      	bne.n	1484 <xQueueGenericSend+0x124>
    147e:	2200      	movs	r2, #0
    1480:	2344      	movs	r3, #68	; 0x44
    1482:	54e2      	strb	r2, [r4, r3]
    1484:	2345      	movs	r3, #69	; 0x45
    1486:	5ce3      	ldrb	r3, [r4, r3]
    1488:	b25b      	sxtb	r3, r3
    148a:	3301      	adds	r3, #1
    148c:	d1bf      	bne.n	140e <xQueueGenericSend+0xae>
    148e:	2200      	movs	r2, #0
    1490:	2345      	movs	r3, #69	; 0x45
    1492:	54e2      	strb	r2, [r4, r3]
    1494:	e7bb      	b.n	140e <xQueueGenericSend+0xae>
					portYIELD_WITHIN_API();
    1496:	4b0c      	ldr	r3, [pc, #48]	; (14c8 <xQueueGenericSend+0x168>)
    1498:	4798      	blx	r3
    149a:	e7d5      	b.n	1448 <xQueueGenericSend+0xe8>
				prvUnlockQueue( pxQueue );
    149c:	0020      	movs	r0, r4
    149e:	4b0f      	ldr	r3, [pc, #60]	; (14dc <xQueueGenericSend+0x17c>)
    14a0:	4798      	blx	r3
				( void ) xTaskResumeAll();
    14a2:	4b0f      	ldr	r3, [pc, #60]	; (14e0 <xQueueGenericSend+0x180>)
    14a4:	4798      	blx	r3
    14a6:	e7cf      	b.n	1448 <xQueueGenericSend+0xe8>
			prvUnlockQueue( pxQueue );
    14a8:	0020      	movs	r0, r4
    14aa:	4b0c      	ldr	r3, [pc, #48]	; (14dc <xQueueGenericSend+0x17c>)
    14ac:	4798      	blx	r3
			( void ) xTaskResumeAll();
    14ae:	4b0c      	ldr	r3, [pc, #48]	; (14e0 <xQueueGenericSend+0x180>)
    14b0:	4798      	blx	r3
			return errQUEUE_FULL;
    14b2:	2000      	movs	r0, #0
    14b4:	e791      	b.n	13da <xQueueGenericSend+0x7a>
    14b6:	46c0      	nop			; (mov r8, r8)
    14b8:	00001fb9 	.word	0x00001fb9
    14bc:	00000cf9 	.word	0x00000cf9
    14c0:	000010dd 	.word	0x000010dd
    14c4:	00001159 	.word	0x00001159
    14c8:	00000ce1 	.word	0x00000ce1
    14cc:	00000d11 	.word	0x00000d11
    14d0:	00001e9d 	.word	0x00001e9d
    14d4:	00001f3d 	.word	0x00001f3d
    14d8:	00001e39 	.word	0x00001e39
    14dc:	000011e9 	.word	0x000011e9
    14e0:	00001c3d 	.word	0x00001c3d
    14e4:	00001f25 	.word	0x00001f25
    14e8:	00001b01 	.word	0x00001b01

000014ec <xQueueGenericSendFromISR>:
{
    14ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    14ee:	b083      	sub	sp, #12
    14f0:	0004      	movs	r4, r0
    14f2:	9101      	str	r1, [sp, #4]
    14f4:	0016      	movs	r6, r2
    14f6:	001d      	movs	r5, r3
	configASSERT( pxQueue );
    14f8:	2800      	cmp	r0, #0
    14fa:	d012      	beq.n	1522 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    14fc:	9b01      	ldr	r3, [sp, #4]
    14fe:	2b00      	cmp	r3, #0
    1500:	d011      	beq.n	1526 <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    1502:	2d02      	cmp	r5, #2
    1504:	d014      	beq.n	1530 <xQueueGenericSendFromISR+0x44>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1506:	4b28      	ldr	r3, [pc, #160]	; (15a8 <xQueueGenericSendFromISR+0xbc>)
    1508:	4798      	blx	r3
    150a:	9000      	str	r0, [sp, #0]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    150c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    150e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    1510:	429a      	cmp	r2, r3
    1512:	d82f      	bhi.n	1574 <xQueueGenericSendFromISR+0x88>
			xReturn = errQUEUE_FULL;
    1514:	2500      	movs	r5, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    1516:	9800      	ldr	r0, [sp, #0]
    1518:	4b24      	ldr	r3, [pc, #144]	; (15ac <xQueueGenericSendFromISR+0xc0>)
    151a:	4798      	blx	r3
}
    151c:	0028      	movs	r0, r5
    151e:	b003      	add	sp, #12
    1520:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pxQueue );
    1522:	b672      	cpsid	i
    1524:	e7fe      	b.n	1524 <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    1526:	6c03      	ldr	r3, [r0, #64]	; 0x40
    1528:	2b00      	cmp	r3, #0
    152a:	d0ea      	beq.n	1502 <xQueueGenericSendFromISR+0x16>
    152c:	b672      	cpsid	i
    152e:	e7fe      	b.n	152e <xQueueGenericSendFromISR+0x42>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    1530:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1532:	2b01      	cmp	r3, #1
    1534:	d01a      	beq.n	156c <xQueueGenericSendFromISR+0x80>
    1536:	b672      	cpsid	i
    1538:	e7fe      	b.n	1538 <xQueueGenericSendFromISR+0x4c>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    153a:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
    153c:	2501      	movs	r5, #1
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    153e:	2b00      	cmp	r3, #0
    1540:	d0e9      	beq.n	1516 <xQueueGenericSendFromISR+0x2a>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1542:	0020      	movs	r0, r4
    1544:	3024      	adds	r0, #36	; 0x24
    1546:	4b1a      	ldr	r3, [pc, #104]	; (15b0 <xQueueGenericSendFromISR+0xc4>)
    1548:	4798      	blx	r3
    154a:	2800      	cmp	r0, #0
    154c:	d0e3      	beq.n	1516 <xQueueGenericSendFromISR+0x2a>
								if( pxHigherPriorityTaskWoken != NULL )
    154e:	2e00      	cmp	r6, #0
    1550:	d00a      	beq.n	1568 <xQueueGenericSendFromISR+0x7c>
									*pxHigherPriorityTaskWoken = pdTRUE;
    1552:	2301      	movs	r3, #1
    1554:	6033      	str	r3, [r6, #0]
    1556:	e7de      	b.n	1516 <xQueueGenericSendFromISR+0x2a>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    1558:	1c7b      	adds	r3, r7, #1
    155a:	b25b      	sxtb	r3, r3
    155c:	2245      	movs	r2, #69	; 0x45
    155e:	54a3      	strb	r3, [r4, r2]
			xReturn = pdPASS;
    1560:	2501      	movs	r5, #1
    1562:	e7d8      	b.n	1516 <xQueueGenericSendFromISR+0x2a>
    1564:	2501      	movs	r5, #1
    1566:	e7d6      	b.n	1516 <xQueueGenericSendFromISR+0x2a>
    1568:	2501      	movs	r5, #1
    156a:	e7d4      	b.n	1516 <xQueueGenericSendFromISR+0x2a>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    156c:	4b0e      	ldr	r3, [pc, #56]	; (15a8 <xQueueGenericSendFromISR+0xbc>)
    156e:	4798      	blx	r3
    1570:	9000      	str	r0, [sp, #0]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1572:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
    1574:	2345      	movs	r3, #69	; 0x45
    1576:	5ce7      	ldrb	r7, [r4, r3]
    1578:	b27f      	sxtb	r7, r7
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    157a:	002a      	movs	r2, r5
    157c:	9901      	ldr	r1, [sp, #4]
    157e:	0020      	movs	r0, r4
    1580:	4b0c      	ldr	r3, [pc, #48]	; (15b4 <xQueueGenericSendFromISR+0xc8>)
    1582:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
    1584:	1c7b      	adds	r3, r7, #1
    1586:	d1e7      	bne.n	1558 <xQueueGenericSendFromISR+0x6c>
					if( pxQueue->pxQueueSetContainer != NULL )
    1588:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    158a:	2b00      	cmp	r3, #0
    158c:	d0d5      	beq.n	153a <xQueueGenericSendFromISR+0x4e>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    158e:	0029      	movs	r1, r5
    1590:	0020      	movs	r0, r4
    1592:	4b09      	ldr	r3, [pc, #36]	; (15b8 <xQueueGenericSendFromISR+0xcc>)
    1594:	4798      	blx	r3
			xReturn = pdPASS;
    1596:	2501      	movs	r5, #1
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    1598:	2800      	cmp	r0, #0
    159a:	d0bc      	beq.n	1516 <xQueueGenericSendFromISR+0x2a>
							if( pxHigherPriorityTaskWoken != NULL )
    159c:	2e00      	cmp	r6, #0
    159e:	d0e1      	beq.n	1564 <xQueueGenericSendFromISR+0x78>
								*pxHigherPriorityTaskWoken = pdTRUE;
    15a0:	2301      	movs	r3, #1
    15a2:	6033      	str	r3, [r6, #0]
    15a4:	e7b7      	b.n	1516 <xQueueGenericSendFromISR+0x2a>
    15a6:	46c0      	nop			; (mov r8, r8)
    15a8:	00000d31 	.word	0x00000d31
    15ac:	00000d39 	.word	0x00000d39
    15b0:	00001e9d 	.word	0x00001e9d
    15b4:	000010dd 	.word	0x000010dd
    15b8:	00001159 	.word	0x00001159

000015bc <xQueueReceive>:
{
    15bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    15be:	46c6      	mov	lr, r8
    15c0:	b500      	push	{lr}
    15c2:	b084      	sub	sp, #16
    15c4:	0004      	movs	r4, r0
    15c6:	000f      	movs	r7, r1
    15c8:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
    15ca:	2800      	cmp	r0, #0
    15cc:	d00a      	beq.n	15e4 <xQueueReceive+0x28>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    15ce:	2900      	cmp	r1, #0
    15d0:	d00a      	beq.n	15e8 <xQueueReceive+0x2c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    15d2:	4b42      	ldr	r3, [pc, #264]	; (16dc <xQueueReceive+0x120>)
    15d4:	4798      	blx	r3
    15d6:	2800      	cmp	r0, #0
    15d8:	d10b      	bne.n	15f2 <xQueueReceive+0x36>
    15da:	9b01      	ldr	r3, [sp, #4]
    15dc:	2b00      	cmp	r3, #0
    15de:	d00c      	beq.n	15fa <xQueueReceive+0x3e>
    15e0:	b672      	cpsid	i
    15e2:	e7fe      	b.n	15e2 <xQueueReceive+0x26>
	configASSERT( ( pxQueue ) );
    15e4:	b672      	cpsid	i
    15e6:	e7fe      	b.n	15e6 <xQueueReceive+0x2a>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    15e8:	6c03      	ldr	r3, [r0, #64]	; 0x40
    15ea:	2b00      	cmp	r3, #0
    15ec:	d0f1      	beq.n	15d2 <xQueueReceive+0x16>
    15ee:	b672      	cpsid	i
    15f0:	e7fe      	b.n	15f0 <xQueueReceive+0x34>
    15f2:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
    15f4:	4b3a      	ldr	r3, [pc, #232]	; (16e0 <xQueueReceive+0x124>)
    15f6:	4698      	mov	r8, r3
    15f8:	e02f      	b.n	165a <xQueueReceive+0x9e>
    15fa:	2600      	movs	r6, #0
    15fc:	e7fa      	b.n	15f4 <xQueueReceive+0x38>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    15fe:	0039      	movs	r1, r7
    1600:	0020      	movs	r0, r4
    1602:	4b38      	ldr	r3, [pc, #224]	; (16e4 <xQueueReceive+0x128>)
    1604:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    1606:	3d01      	subs	r5, #1
    1608:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    160a:	6923      	ldr	r3, [r4, #16]
    160c:	2b00      	cmp	r3, #0
    160e:	d007      	beq.n	1620 <xQueueReceive+0x64>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1610:	0020      	movs	r0, r4
    1612:	3010      	adds	r0, #16
    1614:	4b34      	ldr	r3, [pc, #208]	; (16e8 <xQueueReceive+0x12c>)
    1616:	4798      	blx	r3
    1618:	2800      	cmp	r0, #0
    161a:	d001      	beq.n	1620 <xQueueReceive+0x64>
						queueYIELD_IF_USING_PREEMPTION();
    161c:	4b33      	ldr	r3, [pc, #204]	; (16ec <xQueueReceive+0x130>)
    161e:	4798      	blx	r3
				taskEXIT_CRITICAL();
    1620:	4b33      	ldr	r3, [pc, #204]	; (16f0 <xQueueReceive+0x134>)
    1622:	4798      	blx	r3
				return pdPASS;
    1624:	2001      	movs	r0, #1
}
    1626:	b004      	add	sp, #16
    1628:	bc04      	pop	{r2}
    162a:	4690      	mov	r8, r2
    162c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
    162e:	4b30      	ldr	r3, [pc, #192]	; (16f0 <xQueueReceive+0x134>)
    1630:	4798      	blx	r3
					return errQUEUE_EMPTY;
    1632:	2000      	movs	r0, #0
    1634:	e7f7      	b.n	1626 <xQueueReceive+0x6a>
					vTaskInternalSetTimeOutState( &xTimeOut );
    1636:	a802      	add	r0, sp, #8
    1638:	4b2e      	ldr	r3, [pc, #184]	; (16f4 <xQueueReceive+0x138>)
    163a:	4798      	blx	r3
    163c:	e016      	b.n	166c <xQueueReceive+0xb0>
		prvLockQueue( pxQueue );
    163e:	2200      	movs	r2, #0
    1640:	2344      	movs	r3, #68	; 0x44
    1642:	54e2      	strb	r2, [r4, r3]
    1644:	e01d      	b.n	1682 <xQueueReceive+0xc6>
    1646:	2200      	movs	r2, #0
    1648:	2345      	movs	r3, #69	; 0x45
    164a:	54e2      	strb	r2, [r4, r3]
    164c:	e01e      	b.n	168c <xQueueReceive+0xd0>
				prvUnlockQueue( pxQueue );
    164e:	0020      	movs	r0, r4
    1650:	4b29      	ldr	r3, [pc, #164]	; (16f8 <xQueueReceive+0x13c>)
    1652:	4798      	blx	r3
				( void ) xTaskResumeAll();
    1654:	4b29      	ldr	r3, [pc, #164]	; (16fc <xQueueReceive+0x140>)
    1656:	4798      	blx	r3
    1658:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
    165a:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    165c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    165e:	2d00      	cmp	r5, #0
    1660:	d1cd      	bne.n	15fe <xQueueReceive+0x42>
				if( xTicksToWait == ( TickType_t ) 0 )
    1662:	9b01      	ldr	r3, [sp, #4]
    1664:	2b00      	cmp	r3, #0
    1666:	d0e2      	beq.n	162e <xQueueReceive+0x72>
				else if( xEntryTimeSet == pdFALSE )
    1668:	2e00      	cmp	r6, #0
    166a:	d0e4      	beq.n	1636 <xQueueReceive+0x7a>
		taskEXIT_CRITICAL();
    166c:	4b20      	ldr	r3, [pc, #128]	; (16f0 <xQueueReceive+0x134>)
    166e:	4798      	blx	r3
		vTaskSuspendAll();
    1670:	4b23      	ldr	r3, [pc, #140]	; (1700 <xQueueReceive+0x144>)
    1672:	4798      	blx	r3
		prvLockQueue( pxQueue );
    1674:	4b1a      	ldr	r3, [pc, #104]	; (16e0 <xQueueReceive+0x124>)
    1676:	4798      	blx	r3
    1678:	2344      	movs	r3, #68	; 0x44
    167a:	5ce3      	ldrb	r3, [r4, r3]
    167c:	b25b      	sxtb	r3, r3
    167e:	3301      	adds	r3, #1
    1680:	d0dd      	beq.n	163e <xQueueReceive+0x82>
    1682:	2345      	movs	r3, #69	; 0x45
    1684:	5ce3      	ldrb	r3, [r4, r3]
    1686:	b25b      	sxtb	r3, r3
    1688:	3301      	adds	r3, #1
    168a:	d0dc      	beq.n	1646 <xQueueReceive+0x8a>
    168c:	4b18      	ldr	r3, [pc, #96]	; (16f0 <xQueueReceive+0x134>)
    168e:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1690:	a901      	add	r1, sp, #4
    1692:	a802      	add	r0, sp, #8
    1694:	4b1b      	ldr	r3, [pc, #108]	; (1704 <xQueueReceive+0x148>)
    1696:	4798      	blx	r3
    1698:	2800      	cmp	r0, #0
    169a:	d113      	bne.n	16c4 <xQueueReceive+0x108>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    169c:	0020      	movs	r0, r4
    169e:	4b1a      	ldr	r3, [pc, #104]	; (1708 <xQueueReceive+0x14c>)
    16a0:	4798      	blx	r3
    16a2:	2800      	cmp	r0, #0
    16a4:	d0d3      	beq.n	164e <xQueueReceive+0x92>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    16a6:	0020      	movs	r0, r4
    16a8:	3024      	adds	r0, #36	; 0x24
    16aa:	9901      	ldr	r1, [sp, #4]
    16ac:	4b17      	ldr	r3, [pc, #92]	; (170c <xQueueReceive+0x150>)
    16ae:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    16b0:	0020      	movs	r0, r4
    16b2:	4b11      	ldr	r3, [pc, #68]	; (16f8 <xQueueReceive+0x13c>)
    16b4:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    16b6:	4b11      	ldr	r3, [pc, #68]	; (16fc <xQueueReceive+0x140>)
    16b8:	4798      	blx	r3
    16ba:	2800      	cmp	r0, #0
    16bc:	d1cc      	bne.n	1658 <xQueueReceive+0x9c>
					portYIELD_WITHIN_API();
    16be:	4b0b      	ldr	r3, [pc, #44]	; (16ec <xQueueReceive+0x130>)
    16c0:	4798      	blx	r3
    16c2:	e7c9      	b.n	1658 <xQueueReceive+0x9c>
			prvUnlockQueue( pxQueue );
    16c4:	0020      	movs	r0, r4
    16c6:	4b0c      	ldr	r3, [pc, #48]	; (16f8 <xQueueReceive+0x13c>)
    16c8:	4798      	blx	r3
			( void ) xTaskResumeAll();
    16ca:	4b0c      	ldr	r3, [pc, #48]	; (16fc <xQueueReceive+0x140>)
    16cc:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    16ce:	0020      	movs	r0, r4
    16d0:	4b0d      	ldr	r3, [pc, #52]	; (1708 <xQueueReceive+0x14c>)
    16d2:	4798      	blx	r3
    16d4:	2800      	cmp	r0, #0
    16d6:	d0bf      	beq.n	1658 <xQueueReceive+0x9c>
				return errQUEUE_EMPTY;
    16d8:	2000      	movs	r0, #0
    16da:	e7a4      	b.n	1626 <xQueueReceive+0x6a>
    16dc:	00001fb9 	.word	0x00001fb9
    16e0:	00000cf9 	.word	0x00000cf9
    16e4:	000011c1 	.word	0x000011c1
    16e8:	00001e9d 	.word	0x00001e9d
    16ec:	00000ce1 	.word	0x00000ce1
    16f0:	00000d11 	.word	0x00000d11
    16f4:	00001f25 	.word	0x00001f25
    16f8:	000011e9 	.word	0x000011e9
    16fc:	00001c3d 	.word	0x00001c3d
    1700:	00001b01 	.word	0x00001b01
    1704:	00001f3d 	.word	0x00001f3d
    1708:	000010c1 	.word	0x000010c1
    170c:	00001e39 	.word	0x00001e39

00001710 <vQueueWaitForMessageRestricted>:
	{
    1710:	b570      	push	{r4, r5, r6, lr}
    1712:	0004      	movs	r4, r0
    1714:	000d      	movs	r5, r1
    1716:	0016      	movs	r6, r2
		prvLockQueue( pxQueue );
    1718:	4b11      	ldr	r3, [pc, #68]	; (1760 <vQueueWaitForMessageRestricted+0x50>)
    171a:	4798      	blx	r3
    171c:	2344      	movs	r3, #68	; 0x44
    171e:	5ce3      	ldrb	r3, [r4, r3]
    1720:	b25b      	sxtb	r3, r3
    1722:	3301      	adds	r3, #1
    1724:	d00d      	beq.n	1742 <vQueueWaitForMessageRestricted+0x32>
    1726:	2345      	movs	r3, #69	; 0x45
    1728:	5ce3      	ldrb	r3, [r4, r3]
    172a:	b25b      	sxtb	r3, r3
    172c:	3301      	adds	r3, #1
    172e:	d00c      	beq.n	174a <vQueueWaitForMessageRestricted+0x3a>
    1730:	4b0c      	ldr	r3, [pc, #48]	; (1764 <vQueueWaitForMessageRestricted+0x54>)
    1732:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1734:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1736:	2b00      	cmp	r3, #0
    1738:	d00b      	beq.n	1752 <vQueueWaitForMessageRestricted+0x42>
		prvUnlockQueue( pxQueue );
    173a:	0020      	movs	r0, r4
    173c:	4b0a      	ldr	r3, [pc, #40]	; (1768 <vQueueWaitForMessageRestricted+0x58>)
    173e:	4798      	blx	r3
	}
    1740:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
    1742:	2200      	movs	r2, #0
    1744:	2344      	movs	r3, #68	; 0x44
    1746:	54e2      	strb	r2, [r4, r3]
    1748:	e7ed      	b.n	1726 <vQueueWaitForMessageRestricted+0x16>
    174a:	2200      	movs	r2, #0
    174c:	2345      	movs	r3, #69	; 0x45
    174e:	54e2      	strb	r2, [r4, r3]
    1750:	e7ee      	b.n	1730 <vQueueWaitForMessageRestricted+0x20>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1752:	0020      	movs	r0, r4
    1754:	3024      	adds	r0, #36	; 0x24
    1756:	0032      	movs	r2, r6
    1758:	0029      	movs	r1, r5
    175a:	4b04      	ldr	r3, [pc, #16]	; (176c <vQueueWaitForMessageRestricted+0x5c>)
    175c:	4798      	blx	r3
    175e:	e7ec      	b.n	173a <vQueueWaitForMessageRestricted+0x2a>
    1760:	00000cf9 	.word	0x00000cf9
    1764:	00000d11 	.word	0x00000d11
    1768:	000011e9 	.word	0x000011e9
    176c:	00001e65 	.word	0x00001e65

00001770 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    1770:	4b08      	ldr	r3, [pc, #32]	; (1794 <prvResetNextTaskUnblockTime+0x24>)
    1772:	681b      	ldr	r3, [r3, #0]
    1774:	681b      	ldr	r3, [r3, #0]
    1776:	2b00      	cmp	r3, #0
    1778:	d007      	beq.n	178a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    177a:	4b06      	ldr	r3, [pc, #24]	; (1794 <prvResetNextTaskUnblockTime+0x24>)
    177c:	681b      	ldr	r3, [r3, #0]
    177e:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    1780:	68db      	ldr	r3, [r3, #12]
    1782:	685a      	ldr	r2, [r3, #4]
    1784:	4b04      	ldr	r3, [pc, #16]	; (1798 <prvResetNextTaskUnblockTime+0x28>)
    1786:	601a      	str	r2, [r3, #0]
	}
}
    1788:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
    178a:	2201      	movs	r2, #1
    178c:	4252      	negs	r2, r2
    178e:	4b02      	ldr	r3, [pc, #8]	; (1798 <prvResetNextTaskUnblockTime+0x28>)
    1790:	601a      	str	r2, [r3, #0]
    1792:	e7f9      	b.n	1788 <prvResetNextTaskUnblockTime+0x18>
    1794:	20002f90 	.word	0x20002f90
    1798:	20003040 	.word	0x20003040

0000179c <prvIdleTask>:
{
    179c:	b5f0      	push	{r4, r5, r6, r7, lr}
    179e:	46d6      	mov	lr, sl
    17a0:	464f      	mov	r7, r9
    17a2:	4646      	mov	r6, r8
    17a4:	b5c0      	push	{r6, r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    17a6:	4b14      	ldr	r3, [pc, #80]	; (17f8 <prvIdleTask+0x5c>)
    17a8:	4699      	mov	r9, r3
			taskENTER_CRITICAL();
    17aa:	4b14      	ldr	r3, [pc, #80]	; (17fc <prvIdleTask+0x60>)
    17ac:	4698      	mov	r8, r3
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    17ae:	4f14      	ldr	r7, [pc, #80]	; (1800 <prvIdleTask+0x64>)
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    17b0:	4b14      	ldr	r3, [pc, #80]	; (1804 <prvIdleTask+0x68>)
    17b2:	469a      	mov	sl, r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    17b4:	464b      	mov	r3, r9
    17b6:	681b      	ldr	r3, [r3, #0]
    17b8:	2b00      	cmp	r3, #0
    17ba:	d016      	beq.n	17ea <prvIdleTask+0x4e>
			taskENTER_CRITICAL();
    17bc:	47c0      	blx	r8
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    17be:	68fb      	ldr	r3, [r7, #12]
    17c0:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    17c2:	1d28      	adds	r0, r5, #4
    17c4:	47d0      	blx	sl
				--uxCurrentNumberOfTasks;
    17c6:	4a10      	ldr	r2, [pc, #64]	; (1808 <prvIdleTask+0x6c>)
    17c8:	6813      	ldr	r3, [r2, #0]
    17ca:	3b01      	subs	r3, #1
    17cc:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
    17ce:	4c0a      	ldr	r4, [pc, #40]	; (17f8 <prvIdleTask+0x5c>)
    17d0:	6823      	ldr	r3, [r4, #0]
    17d2:	3b01      	subs	r3, #1
    17d4:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
    17d6:	4b0d      	ldr	r3, [pc, #52]	; (180c <prvIdleTask+0x70>)
    17d8:	4798      	blx	r3
			vPortFree( pxTCB->pxStack );
    17da:	6b28      	ldr	r0, [r5, #48]	; 0x30
    17dc:	4e0c      	ldr	r6, [pc, #48]	; (1810 <prvIdleTask+0x74>)
    17de:	47b0      	blx	r6
			vPortFree( pxTCB );
    17e0:	0028      	movs	r0, r5
    17e2:	47b0      	blx	r6
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    17e4:	6823      	ldr	r3, [r4, #0]
    17e6:	2b00      	cmp	r3, #0
    17e8:	d1e8      	bne.n	17bc <prvIdleTask+0x20>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    17ea:	4b0a      	ldr	r3, [pc, #40]	; (1814 <prvIdleTask+0x78>)
    17ec:	681b      	ldr	r3, [r3, #0]
    17ee:	2b01      	cmp	r3, #1
    17f0:	d9e0      	bls.n	17b4 <prvIdleTask+0x18>
				taskYIELD();
    17f2:	4b09      	ldr	r3, [pc, #36]	; (1818 <prvIdleTask+0x7c>)
    17f4:	4798      	blx	r3
    17f6:	e7dd      	b.n	17b4 <prvIdleTask+0x18>
    17f8:	20003000 	.word	0x20003000
    17fc:	00000cf9 	.word	0x00000cf9
    1800:	20003074 	.word	0x20003074
    1804:	00001097 	.word	0x00001097
    1808:	20002ffc 	.word	0x20002ffc
    180c:	00000d11 	.word	0x00000d11
    1810:	00000e2d 	.word	0x00000e2d
    1814:	20002f98 	.word	0x20002f98
    1818:	00000ce1 	.word	0x00000ce1

0000181c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    181c:	b570      	push	{r4, r5, r6, lr}
    181e:	0004      	movs	r4, r0
    1820:	000d      	movs	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    1822:	4b17      	ldr	r3, [pc, #92]	; (1880 <prvAddCurrentTaskToDelayedList+0x64>)
    1824:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1826:	4b17      	ldr	r3, [pc, #92]	; (1884 <prvAddCurrentTaskToDelayedList+0x68>)
    1828:	6818      	ldr	r0, [r3, #0]
    182a:	3004      	adds	r0, #4
    182c:	4b16      	ldr	r3, [pc, #88]	; (1888 <prvAddCurrentTaskToDelayedList+0x6c>)
    182e:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    1830:	1c63      	adds	r3, r4, #1
    1832:	d013      	beq.n	185c <prvAddCurrentTaskToDelayedList+0x40>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    1834:	1934      	adds	r4, r6, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    1836:	4b13      	ldr	r3, [pc, #76]	; (1884 <prvAddCurrentTaskToDelayedList+0x68>)
    1838:	681b      	ldr	r3, [r3, #0]
    183a:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
    183c:	42a6      	cmp	r6, r4
    183e:	d816      	bhi.n	186e <prvAddCurrentTaskToDelayedList+0x52>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    1840:	4b12      	ldr	r3, [pc, #72]	; (188c <prvAddCurrentTaskToDelayedList+0x70>)
    1842:	6818      	ldr	r0, [r3, #0]
    1844:	4b0f      	ldr	r3, [pc, #60]	; (1884 <prvAddCurrentTaskToDelayedList+0x68>)
    1846:	6819      	ldr	r1, [r3, #0]
    1848:	3104      	adds	r1, #4
    184a:	4b11      	ldr	r3, [pc, #68]	; (1890 <prvAddCurrentTaskToDelayedList+0x74>)
    184c:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    184e:	4b11      	ldr	r3, [pc, #68]	; (1894 <prvAddCurrentTaskToDelayedList+0x78>)
    1850:	681b      	ldr	r3, [r3, #0]
    1852:	429c      	cmp	r4, r3
    1854:	d212      	bcs.n	187c <prvAddCurrentTaskToDelayedList+0x60>
				{
					xNextTaskUnblockTime = xTimeToWake;
    1856:	4b0f      	ldr	r3, [pc, #60]	; (1894 <prvAddCurrentTaskToDelayedList+0x78>)
    1858:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    185a:	e00f      	b.n	187c <prvAddCurrentTaskToDelayedList+0x60>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    185c:	2d00      	cmp	r5, #0
    185e:	d0e9      	beq.n	1834 <prvAddCurrentTaskToDelayedList+0x18>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    1860:	4b08      	ldr	r3, [pc, #32]	; (1884 <prvAddCurrentTaskToDelayedList+0x68>)
    1862:	6819      	ldr	r1, [r3, #0]
    1864:	3104      	adds	r1, #4
    1866:	480c      	ldr	r0, [pc, #48]	; (1898 <prvAddCurrentTaskToDelayedList+0x7c>)
    1868:	4b0c      	ldr	r3, [pc, #48]	; (189c <prvAddCurrentTaskToDelayedList+0x80>)
    186a:	4798      	blx	r3
    186c:	e006      	b.n	187c <prvAddCurrentTaskToDelayedList+0x60>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    186e:	4b0c      	ldr	r3, [pc, #48]	; (18a0 <prvAddCurrentTaskToDelayedList+0x84>)
    1870:	6818      	ldr	r0, [r3, #0]
    1872:	4b04      	ldr	r3, [pc, #16]	; (1884 <prvAddCurrentTaskToDelayedList+0x68>)
    1874:	6819      	ldr	r1, [r3, #0]
    1876:	3104      	adds	r1, #4
    1878:	4b05      	ldr	r3, [pc, #20]	; (1890 <prvAddCurrentTaskToDelayedList+0x74>)
    187a:	4798      	blx	r3
}
    187c:	bd70      	pop	{r4, r5, r6, pc}
    187e:	46c0      	nop			; (mov r8, r8)
    1880:	20003088 	.word	0x20003088
    1884:	20002f8c 	.word	0x20002f8c
    1888:	00001097 	.word	0x00001097
    188c:	20002f90 	.word	0x20002f90
    1890:	00001069 	.word	0x00001069
    1894:	20003040 	.word	0x20003040
    1898:	20003060 	.word	0x20003060
    189c:	00001051 	.word	0x00001051
    18a0:	20002f94 	.word	0x20002f94

000018a4 <xTaskCreate>:
	{
    18a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    18a6:	46c6      	mov	lr, r8
    18a8:	b500      	push	{lr}
    18aa:	b084      	sub	sp, #16
    18ac:	9001      	str	r0, [sp, #4]
    18ae:	000d      	movs	r5, r1
    18b0:	9302      	str	r3, [sp, #8]
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    18b2:	0097      	lsls	r7, r2, #2
    18b4:	0038      	movs	r0, r7
    18b6:	4b5f      	ldr	r3, [pc, #380]	; (1a34 <xTaskCreate+0x190>)
    18b8:	4798      	blx	r3
    18ba:	1e06      	subs	r6, r0, #0
			if( pxStack != NULL )
    18bc:	d100      	bne.n	18c0 <xTaskCreate+0x1c>
    18be:	e089      	b.n	19d4 <xTaskCreate+0x130>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    18c0:	2054      	movs	r0, #84	; 0x54
    18c2:	4b5c      	ldr	r3, [pc, #368]	; (1a34 <xTaskCreate+0x190>)
    18c4:	4798      	blx	r3
    18c6:	1e04      	subs	r4, r0, #0
				if( pxNewTCB != NULL )
    18c8:	d100      	bne.n	18cc <xTaskCreate+0x28>
    18ca:	e080      	b.n	19ce <xTaskCreate+0x12a>
					pxNewTCB->pxStack = pxStack;
    18cc:	6306      	str	r6, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    18ce:	003a      	movs	r2, r7
    18d0:	21a5      	movs	r1, #165	; 0xa5
    18d2:	0030      	movs	r0, r6
    18d4:	4b58      	ldr	r3, [pc, #352]	; (1a38 <xTaskCreate+0x194>)
    18d6:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    18d8:	1f3a      	subs	r2, r7, #4
    18da:	6b23      	ldr	r3, [r4, #48]	; 0x30
    18dc:	469c      	mov	ip, r3
    18de:	4462      	add	r2, ip
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    18e0:	2307      	movs	r3, #7
    18e2:	439a      	bics	r2, r3
    18e4:	4690      	mov	r8, r2
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    18e6:	782a      	ldrb	r2, [r5, #0]
    18e8:	332d      	adds	r3, #45	; 0x2d
    18ea:	54e2      	strb	r2, [r4, r3]
		if( pcName[ x ] == 0x00 )
    18ec:	782b      	ldrb	r3, [r5, #0]
    18ee:	2b00      	cmp	r3, #0
    18f0:	d00d      	beq.n	190e <xTaskCreate+0x6a>
    18f2:	3501      	adds	r5, #1
    18f4:	0023      	movs	r3, r4
    18f6:	3335      	adds	r3, #53	; 0x35
    18f8:	0020      	movs	r0, r4
    18fa:	303c      	adds	r0, #60	; 0x3c
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    18fc:	782a      	ldrb	r2, [r5, #0]
    18fe:	701a      	strb	r2, [r3, #0]
		if( pcName[ x ] == 0x00 )
    1900:	782a      	ldrb	r2, [r5, #0]
    1902:	2a00      	cmp	r2, #0
    1904:	d003      	beq.n	190e <xTaskCreate+0x6a>
    1906:	3501      	adds	r5, #1
    1908:	3301      	adds	r3, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    190a:	4283      	cmp	r3, r0
    190c:	d1f6      	bne.n	18fc <xTaskCreate+0x58>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    190e:	2200      	movs	r2, #0
    1910:	233b      	movs	r3, #59	; 0x3b
    1912:	54e2      	strb	r2, [r4, r3]
    1914:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    1916:	2f04      	cmp	r7, #4
    1918:	d900      	bls.n	191c <xTaskCreate+0x78>
    191a:	2704      	movs	r7, #4
	pxNewTCB->uxPriority = uxPriority;
    191c:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
    191e:	6467      	str	r7, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
    1920:	2600      	movs	r6, #0
    1922:	64a6      	str	r6, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    1924:	1d23      	adds	r3, r4, #4
    1926:	9303      	str	r3, [sp, #12]
    1928:	0018      	movs	r0, r3
    192a:	4d44      	ldr	r5, [pc, #272]	; (1a3c <xTaskCreate+0x198>)
    192c:	47a8      	blx	r5
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    192e:	0020      	movs	r0, r4
    1930:	3018      	adds	r0, #24
    1932:	47a8      	blx	r5
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    1934:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1936:	2305      	movs	r3, #5
    1938:	1bdb      	subs	r3, r3, r7
    193a:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    193c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
    193e:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    1940:	2350      	movs	r3, #80	; 0x50
    1942:	54e6      	strb	r6, [r4, r3]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    1944:	9a02      	ldr	r2, [sp, #8]
    1946:	9901      	ldr	r1, [sp, #4]
    1948:	4640      	mov	r0, r8
    194a:	4b3d      	ldr	r3, [pc, #244]	; (1a40 <xTaskCreate+0x19c>)
    194c:	4798      	blx	r3
    194e:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
    1950:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1952:	2b00      	cmp	r3, #0
    1954:	d000      	beq.n	1958 <xTaskCreate+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    1956:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
    1958:	4b3a      	ldr	r3, [pc, #232]	; (1a44 <xTaskCreate+0x1a0>)
    195a:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
    195c:	4a3a      	ldr	r2, [pc, #232]	; (1a48 <xTaskCreate+0x1a4>)
    195e:	6813      	ldr	r3, [r2, #0]
    1960:	3301      	adds	r3, #1
    1962:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
    1964:	4b39      	ldr	r3, [pc, #228]	; (1a4c <xTaskCreate+0x1a8>)
    1966:	681b      	ldr	r3, [r3, #0]
    1968:	2b00      	cmp	r3, #0
    196a:	d036      	beq.n	19da <xTaskCreate+0x136>
			if( xSchedulerRunning == pdFALSE )
    196c:	4b38      	ldr	r3, [pc, #224]	; (1a50 <xTaskCreate+0x1ac>)
    196e:	681b      	ldr	r3, [r3, #0]
    1970:	2b00      	cmp	r3, #0
    1972:	d107      	bne.n	1984 <xTaskCreate+0xe0>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    1974:	4b35      	ldr	r3, [pc, #212]	; (1a4c <xTaskCreate+0x1a8>)
    1976:	681b      	ldr	r3, [r3, #0]
    1978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    197a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    197c:	4293      	cmp	r3, r2
    197e:	d801      	bhi.n	1984 <xTaskCreate+0xe0>
					pxCurrentTCB = pxNewTCB;
    1980:	4b32      	ldr	r3, [pc, #200]	; (1a4c <xTaskCreate+0x1a8>)
    1982:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
    1984:	4a33      	ldr	r2, [pc, #204]	; (1a54 <xTaskCreate+0x1b0>)
    1986:	6813      	ldr	r3, [r2, #0]
    1988:	3301      	adds	r3, #1
    198a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    198c:	63e3      	str	r3, [r4, #60]	; 0x3c
		prvAddTaskToReadyList( pxNewTCB );
    198e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1990:	4a31      	ldr	r2, [pc, #196]	; (1a58 <xTaskCreate+0x1b4>)
    1992:	6812      	ldr	r2, [r2, #0]
    1994:	4293      	cmp	r3, r2
    1996:	d901      	bls.n	199c <xTaskCreate+0xf8>
    1998:	4a2f      	ldr	r2, [pc, #188]	; (1a58 <xTaskCreate+0x1b4>)
    199a:	6013      	str	r3, [r2, #0]
    199c:	0098      	lsls	r0, r3, #2
    199e:	18c0      	adds	r0, r0, r3
    19a0:	0080      	lsls	r0, r0, #2
    19a2:	4b2e      	ldr	r3, [pc, #184]	; (1a5c <xTaskCreate+0x1b8>)
    19a4:	1818      	adds	r0, r3, r0
    19a6:	9903      	ldr	r1, [sp, #12]
    19a8:	4b2d      	ldr	r3, [pc, #180]	; (1a60 <xTaskCreate+0x1bc>)
    19aa:	4798      	blx	r3
	taskEXIT_CRITICAL();
    19ac:	4b2d      	ldr	r3, [pc, #180]	; (1a64 <xTaskCreate+0x1c0>)
    19ae:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
    19b0:	4b27      	ldr	r3, [pc, #156]	; (1a50 <xTaskCreate+0x1ac>)
    19b2:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
    19b4:	2001      	movs	r0, #1
	if( xSchedulerRunning != pdFALSE )
    19b6:	2b00      	cmp	r3, #0
    19b8:	d005      	beq.n	19c6 <xTaskCreate+0x122>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    19ba:	4b24      	ldr	r3, [pc, #144]	; (1a4c <xTaskCreate+0x1a8>)
    19bc:	681b      	ldr	r3, [r3, #0]
    19be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    19c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    19c2:	429a      	cmp	r2, r3
    19c4:	d331      	bcc.n	1a2a <xTaskCreate+0x186>
	}
    19c6:	b004      	add	sp, #16
    19c8:	bc04      	pop	{r2}
    19ca:	4690      	mov	r8, r2
    19cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vPortFree( pxStack );
    19ce:	0030      	movs	r0, r6
    19d0:	4b25      	ldr	r3, [pc, #148]	; (1a68 <xTaskCreate+0x1c4>)
    19d2:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    19d4:	2001      	movs	r0, #1
    19d6:	4240      	negs	r0, r0
    19d8:	e7f5      	b.n	19c6 <xTaskCreate+0x122>
			pxCurrentTCB = pxNewTCB;
    19da:	4b1c      	ldr	r3, [pc, #112]	; (1a4c <xTaskCreate+0x1a8>)
    19dc:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    19de:	6813      	ldr	r3, [r2, #0]
    19e0:	2b01      	cmp	r3, #1
    19e2:	d1cf      	bne.n	1984 <xTaskCreate+0xe0>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    19e4:	4f1d      	ldr	r7, [pc, #116]	; (1a5c <xTaskCreate+0x1b8>)
    19e6:	0038      	movs	r0, r7
    19e8:	4e20      	ldr	r6, [pc, #128]	; (1a6c <xTaskCreate+0x1c8>)
    19ea:	47b0      	blx	r6
    19ec:	0038      	movs	r0, r7
    19ee:	3014      	adds	r0, #20
    19f0:	47b0      	blx	r6
    19f2:	0038      	movs	r0, r7
    19f4:	3028      	adds	r0, #40	; 0x28
    19f6:	47b0      	blx	r6
    19f8:	0038      	movs	r0, r7
    19fa:	303c      	adds	r0, #60	; 0x3c
    19fc:	47b0      	blx	r6
    19fe:	0038      	movs	r0, r7
    1a00:	3050      	adds	r0, #80	; 0x50
    1a02:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
    1a04:	4b1a      	ldr	r3, [pc, #104]	; (1a70 <xTaskCreate+0x1cc>)
    1a06:	4698      	mov	r8, r3
    1a08:	0018      	movs	r0, r3
    1a0a:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
    1a0c:	4f19      	ldr	r7, [pc, #100]	; (1a74 <xTaskCreate+0x1d0>)
    1a0e:	0038      	movs	r0, r7
    1a10:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
    1a12:	4819      	ldr	r0, [pc, #100]	; (1a78 <xTaskCreate+0x1d4>)
    1a14:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
    1a16:	4819      	ldr	r0, [pc, #100]	; (1a7c <xTaskCreate+0x1d8>)
    1a18:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
    1a1a:	4819      	ldr	r0, [pc, #100]	; (1a80 <xTaskCreate+0x1dc>)
    1a1c:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
    1a1e:	4b19      	ldr	r3, [pc, #100]	; (1a84 <xTaskCreate+0x1e0>)
    1a20:	4642      	mov	r2, r8
    1a22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    1a24:	4b18      	ldr	r3, [pc, #96]	; (1a88 <xTaskCreate+0x1e4>)
    1a26:	601f      	str	r7, [r3, #0]
    1a28:	e7ac      	b.n	1984 <xTaskCreate+0xe0>
			taskYIELD_IF_USING_PREEMPTION();
    1a2a:	4b18      	ldr	r3, [pc, #96]	; (1a8c <xTaskCreate+0x1e8>)
    1a2c:	4798      	blx	r3
			xReturn = pdPASS;
    1a2e:	2001      	movs	r0, #1
    1a30:	e7c9      	b.n	19c6 <xTaskCreate+0x122>
    1a32:	46c0      	nop			; (mov r8, r8)
    1a34:	00000db5 	.word	0x00000db5
    1a38:	0000301f 	.word	0x0000301f
    1a3c:	0000104b 	.word	0x0000104b
    1a40:	00000c45 	.word	0x00000c45
    1a44:	00000cf9 	.word	0x00000cf9
    1a48:	20002ffc 	.word	0x20002ffc
    1a4c:	20002f8c 	.word	0x20002f8c
    1a50:	2000305c 	.word	0x2000305c
    1a54:	2000300c 	.word	0x2000300c
    1a58:	20003010 	.word	0x20003010
    1a5c:	20002f98 	.word	0x20002f98
    1a60:	00001051 	.word	0x00001051
    1a64:	00000d11 	.word	0x00000d11
    1a68:	00000e2d 	.word	0x00000e2d
    1a6c:	00001035 	.word	0x00001035
    1a70:	20003014 	.word	0x20003014
    1a74:	20003028 	.word	0x20003028
    1a78:	20003048 	.word	0x20003048
    1a7c:	20003074 	.word	0x20003074
    1a80:	20003060 	.word	0x20003060
    1a84:	20002f90 	.word	0x20002f90
    1a88:	20002f94 	.word	0x20002f94
    1a8c:	00000ce1 	.word	0x00000ce1

00001a90 <vTaskStartScheduler>:
{
    1a90:	b510      	push	{r4, lr}
    1a92:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
    1a94:	4b11      	ldr	r3, [pc, #68]	; (1adc <vTaskStartScheduler+0x4c>)
    1a96:	9301      	str	r3, [sp, #4]
    1a98:	2300      	movs	r3, #0
    1a9a:	9300      	str	r3, [sp, #0]
    1a9c:	2264      	movs	r2, #100	; 0x64
    1a9e:	4910      	ldr	r1, [pc, #64]	; (1ae0 <vTaskStartScheduler+0x50>)
    1aa0:	4810      	ldr	r0, [pc, #64]	; (1ae4 <vTaskStartScheduler+0x54>)
    1aa2:	4c11      	ldr	r4, [pc, #68]	; (1ae8 <vTaskStartScheduler+0x58>)
    1aa4:	47a0      	blx	r4
		if( xReturn == pdPASS )
    1aa6:	2801      	cmp	r0, #1
    1aa8:	d003      	beq.n	1ab2 <vTaskStartScheduler+0x22>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    1aaa:	1c43      	adds	r3, r0, #1
    1aac:	d013      	beq.n	1ad6 <vTaskStartScheduler+0x46>
}
    1aae:	b002      	add	sp, #8
    1ab0:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
    1ab2:	4b0e      	ldr	r3, [pc, #56]	; (1aec <vTaskStartScheduler+0x5c>)
    1ab4:	4798      	blx	r3
	if( xReturn == pdPASS )
    1ab6:	2801      	cmp	r0, #1
    1ab8:	d1f7      	bne.n	1aaa <vTaskStartScheduler+0x1a>
		portDISABLE_INTERRUPTS();
    1aba:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
    1abc:	2201      	movs	r2, #1
    1abe:	4252      	negs	r2, r2
    1ac0:	4b0b      	ldr	r3, [pc, #44]	; (1af0 <vTaskStartScheduler+0x60>)
    1ac2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    1ac4:	3202      	adds	r2, #2
    1ac6:	4b0b      	ldr	r3, [pc, #44]	; (1af4 <vTaskStartScheduler+0x64>)
    1ac8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    1aca:	2200      	movs	r2, #0
    1acc:	4b0a      	ldr	r3, [pc, #40]	; (1af8 <vTaskStartScheduler+0x68>)
    1ace:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
    1ad0:	4b0a      	ldr	r3, [pc, #40]	; (1afc <vTaskStartScheduler+0x6c>)
    1ad2:	4798      	blx	r3
    1ad4:	e7eb      	b.n	1aae <vTaskStartScheduler+0x1e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    1ad6:	b672      	cpsid	i
    1ad8:	e7fe      	b.n	1ad8 <vTaskStartScheduler+0x48>
    1ada:	46c0      	nop			; (mov r8, r8)
    1adc:	2000303c 	.word	0x2000303c
    1ae0:	0000313c 	.word	0x0000313c
    1ae4:	0000179d 	.word	0x0000179d
    1ae8:	000018a5 	.word	0x000018a5
    1aec:	000020fd 	.word	0x000020fd
    1af0:	20003040 	.word	0x20003040
    1af4:	2000305c 	.word	0x2000305c
    1af8:	20003088 	.word	0x20003088
    1afc:	00000c69 	.word	0x00000c69

00001b00 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    1b00:	4a02      	ldr	r2, [pc, #8]	; (1b0c <vTaskSuspendAll+0xc>)
    1b02:	6813      	ldr	r3, [r2, #0]
    1b04:	3301      	adds	r3, #1
    1b06:	6013      	str	r3, [r2, #0]
}
    1b08:	4770      	bx	lr
    1b0a:	46c0      	nop			; (mov r8, r8)
    1b0c:	20003008 	.word	0x20003008

00001b10 <xTaskGetTickCount>:
		xTicks = xTickCount;
    1b10:	4b01      	ldr	r3, [pc, #4]	; (1b18 <xTaskGetTickCount+0x8>)
    1b12:	6818      	ldr	r0, [r3, #0]
}
    1b14:	4770      	bx	lr
    1b16:	46c0      	nop			; (mov r8, r8)
    1b18:	20003088 	.word	0x20003088

00001b1c <xTaskIncrementTick>:
{
    1b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b1e:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1b20:	4b38      	ldr	r3, [pc, #224]	; (1c04 <xTaskIncrementTick+0xe8>)
    1b22:	681b      	ldr	r3, [r3, #0]
    1b24:	2b00      	cmp	r3, #0
    1b26:	d160      	bne.n	1bea <xTaskIncrementTick+0xce>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    1b28:	4b37      	ldr	r3, [pc, #220]	; (1c08 <xTaskIncrementTick+0xec>)
    1b2a:	681d      	ldr	r5, [r3, #0]
    1b2c:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
    1b2e:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    1b30:	2d00      	cmp	r5, #0
    1b32:	d112      	bne.n	1b5a <xTaskIncrementTick+0x3e>
			taskSWITCH_DELAYED_LISTS();
    1b34:	4b35      	ldr	r3, [pc, #212]	; (1c0c <xTaskIncrementTick+0xf0>)
    1b36:	681b      	ldr	r3, [r3, #0]
    1b38:	681b      	ldr	r3, [r3, #0]
    1b3a:	2b00      	cmp	r3, #0
    1b3c:	d001      	beq.n	1b42 <xTaskIncrementTick+0x26>
    1b3e:	b672      	cpsid	i
    1b40:	e7fe      	b.n	1b40 <xTaskIncrementTick+0x24>
    1b42:	4a32      	ldr	r2, [pc, #200]	; (1c0c <xTaskIncrementTick+0xf0>)
    1b44:	6811      	ldr	r1, [r2, #0]
    1b46:	4b32      	ldr	r3, [pc, #200]	; (1c10 <xTaskIncrementTick+0xf4>)
    1b48:	6818      	ldr	r0, [r3, #0]
    1b4a:	6010      	str	r0, [r2, #0]
    1b4c:	6019      	str	r1, [r3, #0]
    1b4e:	4a31      	ldr	r2, [pc, #196]	; (1c14 <xTaskIncrementTick+0xf8>)
    1b50:	6813      	ldr	r3, [r2, #0]
    1b52:	3301      	adds	r3, #1
    1b54:	6013      	str	r3, [r2, #0]
    1b56:	4b30      	ldr	r3, [pc, #192]	; (1c18 <xTaskIncrementTick+0xfc>)
    1b58:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
    1b5a:	4b30      	ldr	r3, [pc, #192]	; (1c1c <xTaskIncrementTick+0x100>)
    1b5c:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
    1b5e:	2400      	movs	r4, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
    1b60:	429d      	cmp	r5, r3
    1b62:	d333      	bcc.n	1bcc <xTaskIncrementTick+0xb0>
    1b64:	2400      	movs	r4, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    1b66:	4f29      	ldr	r7, [pc, #164]	; (1c0c <xTaskIncrementTick+0xf0>)
    1b68:	683b      	ldr	r3, [r7, #0]
    1b6a:	681b      	ldr	r3, [r3, #0]
    1b6c:	2b00      	cmp	r3, #0
    1b6e:	d029      	beq.n	1bc4 <xTaskIncrementTick+0xa8>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    1b70:	4b26      	ldr	r3, [pc, #152]	; (1c0c <xTaskIncrementTick+0xf0>)
    1b72:	681b      	ldr	r3, [r3, #0]
    1b74:	68db      	ldr	r3, [r3, #12]
    1b76:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    1b78:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
    1b7a:	429d      	cmp	r5, r3
    1b7c:	d332      	bcc.n	1be4 <xTaskIncrementTick+0xc8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1b7e:	1d33      	adds	r3, r6, #4
    1b80:	9301      	str	r3, [sp, #4]
    1b82:	0018      	movs	r0, r3
    1b84:	4b26      	ldr	r3, [pc, #152]	; (1c20 <xTaskIncrementTick+0x104>)
    1b86:	4798      	blx	r3
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    1b88:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1b8a:	2b00      	cmp	r3, #0
    1b8c:	d003      	beq.n	1b96 <xTaskIncrementTick+0x7a>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1b8e:	0030      	movs	r0, r6
    1b90:	3018      	adds	r0, #24
    1b92:	4b23      	ldr	r3, [pc, #140]	; (1c20 <xTaskIncrementTick+0x104>)
    1b94:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    1b96:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    1b98:	4a22      	ldr	r2, [pc, #136]	; (1c24 <xTaskIncrementTick+0x108>)
    1b9a:	6812      	ldr	r2, [r2, #0]
    1b9c:	4293      	cmp	r3, r2
    1b9e:	d901      	bls.n	1ba4 <xTaskIncrementTick+0x88>
    1ba0:	4a20      	ldr	r2, [pc, #128]	; (1c24 <xTaskIncrementTick+0x108>)
    1ba2:	6013      	str	r3, [r2, #0]
    1ba4:	0098      	lsls	r0, r3, #2
    1ba6:	18c0      	adds	r0, r0, r3
    1ba8:	0080      	lsls	r0, r0, #2
    1baa:	4b1f      	ldr	r3, [pc, #124]	; (1c28 <xTaskIncrementTick+0x10c>)
    1bac:	1818      	adds	r0, r3, r0
    1bae:	9901      	ldr	r1, [sp, #4]
    1bb0:	4b1e      	ldr	r3, [pc, #120]	; (1c2c <xTaskIncrementTick+0x110>)
    1bb2:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1bb4:	4b1e      	ldr	r3, [pc, #120]	; (1c30 <xTaskIncrementTick+0x114>)
    1bb6:	681b      	ldr	r3, [r3, #0]
    1bb8:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    1bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1bbc:	429a      	cmp	r2, r3
    1bbe:	d3d3      	bcc.n	1b68 <xTaskIncrementTick+0x4c>
							xSwitchRequired = pdTRUE;
    1bc0:	2401      	movs	r4, #1
    1bc2:	e7d1      	b.n	1b68 <xTaskIncrementTick+0x4c>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1bc4:	2201      	movs	r2, #1
    1bc6:	4252      	negs	r2, r2
    1bc8:	4b14      	ldr	r3, [pc, #80]	; (1c1c <xTaskIncrementTick+0x100>)
    1bca:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    1bcc:	4b18      	ldr	r3, [pc, #96]	; (1c30 <xTaskIncrementTick+0x114>)
    1bce:	681b      	ldr	r3, [r3, #0]
    1bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1bd2:	0093      	lsls	r3, r2, #2
    1bd4:	189b      	adds	r3, r3, r2
    1bd6:	009b      	lsls	r3, r3, #2
    1bd8:	4a13      	ldr	r2, [pc, #76]	; (1c28 <xTaskIncrementTick+0x10c>)
    1bda:	589b      	ldr	r3, [r3, r2]
    1bdc:	2b01      	cmp	r3, #1
    1bde:	d909      	bls.n	1bf4 <xTaskIncrementTick+0xd8>
				xSwitchRequired = pdTRUE;
    1be0:	2401      	movs	r4, #1
    1be2:	e007      	b.n	1bf4 <xTaskIncrementTick+0xd8>
						xNextTaskUnblockTime = xItemValue;
    1be4:	4a0d      	ldr	r2, [pc, #52]	; (1c1c <xTaskIncrementTick+0x100>)
    1be6:	6013      	str	r3, [r2, #0]
						break;
    1be8:	e7f0      	b.n	1bcc <xTaskIncrementTick+0xb0>
		++uxPendedTicks;
    1bea:	4a12      	ldr	r2, [pc, #72]	; (1c34 <xTaskIncrementTick+0x118>)
    1bec:	6813      	ldr	r3, [r2, #0]
    1bee:	3301      	adds	r3, #1
    1bf0:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
    1bf2:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
    1bf4:	4b10      	ldr	r3, [pc, #64]	; (1c38 <xTaskIncrementTick+0x11c>)
    1bf6:	681b      	ldr	r3, [r3, #0]
    1bf8:	2b00      	cmp	r3, #0
    1bfa:	d000      	beq.n	1bfe <xTaskIncrementTick+0xe2>
			xSwitchRequired = pdTRUE;
    1bfc:	2401      	movs	r4, #1
}
    1bfe:	0020      	movs	r0, r4
    1c00:	b003      	add	sp, #12
    1c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c04:	20003008 	.word	0x20003008
    1c08:	20003088 	.word	0x20003088
    1c0c:	20002f90 	.word	0x20002f90
    1c10:	20002f94 	.word	0x20002f94
    1c14:	20003044 	.word	0x20003044
    1c18:	00001771 	.word	0x00001771
    1c1c:	20003040 	.word	0x20003040
    1c20:	00001097 	.word	0x00001097
    1c24:	20003010 	.word	0x20003010
    1c28:	20002f98 	.word	0x20002f98
    1c2c:	00001051 	.word	0x00001051
    1c30:	20002f8c 	.word	0x20002f8c
    1c34:	20003004 	.word	0x20003004
    1c38:	2000308c 	.word	0x2000308c

00001c3c <xTaskResumeAll>:
{
    1c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
    1c3e:	4b30      	ldr	r3, [pc, #192]	; (1d00 <xTaskResumeAll+0xc4>)
    1c40:	681b      	ldr	r3, [r3, #0]
    1c42:	2b00      	cmp	r3, #0
    1c44:	d101      	bne.n	1c4a <xTaskResumeAll+0xe>
    1c46:	b672      	cpsid	i
    1c48:	e7fe      	b.n	1c48 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
    1c4a:	4b2e      	ldr	r3, [pc, #184]	; (1d04 <xTaskResumeAll+0xc8>)
    1c4c:	4798      	blx	r3
		--uxSchedulerSuspended;
    1c4e:	4b2c      	ldr	r3, [pc, #176]	; (1d00 <xTaskResumeAll+0xc4>)
    1c50:	681a      	ldr	r2, [r3, #0]
    1c52:	3a01      	subs	r2, #1
    1c54:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1c56:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
    1c58:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1c5a:	2b00      	cmp	r3, #0
    1c5c:	d103      	bne.n	1c66 <xTaskResumeAll+0x2a>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    1c5e:	4b2a      	ldr	r3, [pc, #168]	; (1d08 <xTaskResumeAll+0xcc>)
    1c60:	681b      	ldr	r3, [r3, #0]
    1c62:	2b00      	cmp	r3, #0
    1c64:	d103      	bne.n	1c6e <xTaskResumeAll+0x32>
	taskEXIT_CRITICAL();
    1c66:	4b29      	ldr	r3, [pc, #164]	; (1d0c <xTaskResumeAll+0xd0>)
    1c68:	4798      	blx	r3
}
    1c6a:	0020      	movs	r0, r4
    1c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    1c6e:	4d28      	ldr	r5, [pc, #160]	; (1d10 <xTaskResumeAll+0xd4>)
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    1c70:	002f      	movs	r7, r5
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    1c72:	682b      	ldr	r3, [r5, #0]
    1c74:	2b00      	cmp	r3, #0
    1c76:	d022      	beq.n	1cbe <xTaskResumeAll+0x82>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    1c78:	68fb      	ldr	r3, [r7, #12]
    1c7a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1c7c:	0020      	movs	r0, r4
    1c7e:	3018      	adds	r0, #24
    1c80:	4b24      	ldr	r3, [pc, #144]	; (1d14 <xTaskResumeAll+0xd8>)
    1c82:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1c84:	1d26      	adds	r6, r4, #4
    1c86:	0030      	movs	r0, r6
    1c88:	4b22      	ldr	r3, [pc, #136]	; (1d14 <xTaskResumeAll+0xd8>)
    1c8a:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    1c8c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1c8e:	4a22      	ldr	r2, [pc, #136]	; (1d18 <xTaskResumeAll+0xdc>)
    1c90:	6812      	ldr	r2, [r2, #0]
    1c92:	4293      	cmp	r3, r2
    1c94:	d901      	bls.n	1c9a <xTaskResumeAll+0x5e>
    1c96:	4a20      	ldr	r2, [pc, #128]	; (1d18 <xTaskResumeAll+0xdc>)
    1c98:	6013      	str	r3, [r2, #0]
    1c9a:	0098      	lsls	r0, r3, #2
    1c9c:	18c0      	adds	r0, r0, r3
    1c9e:	0080      	lsls	r0, r0, #2
    1ca0:	4b1e      	ldr	r3, [pc, #120]	; (1d1c <xTaskResumeAll+0xe0>)
    1ca2:	1818      	adds	r0, r3, r0
    1ca4:	0031      	movs	r1, r6
    1ca6:	4b1e      	ldr	r3, [pc, #120]	; (1d20 <xTaskResumeAll+0xe4>)
    1ca8:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1caa:	4b1e      	ldr	r3, [pc, #120]	; (1d24 <xTaskResumeAll+0xe8>)
    1cac:	681b      	ldr	r3, [r3, #0]
    1cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1cb0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1cb2:	429a      	cmp	r2, r3
    1cb4:	d3dd      	bcc.n	1c72 <xTaskResumeAll+0x36>
						xYieldPending = pdTRUE;
    1cb6:	2201      	movs	r2, #1
    1cb8:	4b1b      	ldr	r3, [pc, #108]	; (1d28 <xTaskResumeAll+0xec>)
    1cba:	601a      	str	r2, [r3, #0]
    1cbc:	e7d9      	b.n	1c72 <xTaskResumeAll+0x36>
				if( pxTCB != NULL )
    1cbe:	2c00      	cmp	r4, #0
    1cc0:	d001      	beq.n	1cc6 <xTaskResumeAll+0x8a>
					prvResetNextTaskUnblockTime();
    1cc2:	4b1a      	ldr	r3, [pc, #104]	; (1d2c <xTaskResumeAll+0xf0>)
    1cc4:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    1cc6:	4b1a      	ldr	r3, [pc, #104]	; (1d30 <xTaskResumeAll+0xf4>)
    1cc8:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
    1cca:	2c00      	cmp	r4, #0
    1ccc:	d00e      	beq.n	1cec <xTaskResumeAll+0xb0>
							if( xTaskIncrementTick() != pdFALSE )
    1cce:	4f19      	ldr	r7, [pc, #100]	; (1d34 <xTaskResumeAll+0xf8>)
								xYieldPending = pdTRUE;
    1cd0:	4e15      	ldr	r6, [pc, #84]	; (1d28 <xTaskResumeAll+0xec>)
    1cd2:	2501      	movs	r5, #1
    1cd4:	e002      	b.n	1cdc <xTaskResumeAll+0xa0>
							--uxPendedCounts;
    1cd6:	3c01      	subs	r4, #1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    1cd8:	2c00      	cmp	r4, #0
    1cda:	d004      	beq.n	1ce6 <xTaskResumeAll+0xaa>
							if( xTaskIncrementTick() != pdFALSE )
    1cdc:	47b8      	blx	r7
    1cde:	2800      	cmp	r0, #0
    1ce0:	d0f9      	beq.n	1cd6 <xTaskResumeAll+0x9a>
								xYieldPending = pdTRUE;
    1ce2:	6035      	str	r5, [r6, #0]
    1ce4:	e7f7      	b.n	1cd6 <xTaskResumeAll+0x9a>
						uxPendedTicks = 0;
    1ce6:	2200      	movs	r2, #0
    1ce8:	4b11      	ldr	r3, [pc, #68]	; (1d30 <xTaskResumeAll+0xf4>)
    1cea:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
    1cec:	4b0e      	ldr	r3, [pc, #56]	; (1d28 <xTaskResumeAll+0xec>)
    1cee:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
    1cf0:	2400      	movs	r4, #0
				if( xYieldPending != pdFALSE )
    1cf2:	2b00      	cmp	r3, #0
    1cf4:	d0b7      	beq.n	1c66 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
    1cf6:	4b10      	ldr	r3, [pc, #64]	; (1d38 <xTaskResumeAll+0xfc>)
    1cf8:	4798      	blx	r3
						xAlreadyYielded = pdTRUE;
    1cfa:	3401      	adds	r4, #1
    1cfc:	e7b3      	b.n	1c66 <xTaskResumeAll+0x2a>
    1cfe:	46c0      	nop			; (mov r8, r8)
    1d00:	20003008 	.word	0x20003008
    1d04:	00000cf9 	.word	0x00000cf9
    1d08:	20002ffc 	.word	0x20002ffc
    1d0c:	00000d11 	.word	0x00000d11
    1d10:	20003048 	.word	0x20003048
    1d14:	00001097 	.word	0x00001097
    1d18:	20003010 	.word	0x20003010
    1d1c:	20002f98 	.word	0x20002f98
    1d20:	00001051 	.word	0x00001051
    1d24:	20002f8c 	.word	0x20002f8c
    1d28:	2000308c 	.word	0x2000308c
    1d2c:	00001771 	.word	0x00001771
    1d30:	20003004 	.word	0x20003004
    1d34:	00001b1d 	.word	0x00001b1d
    1d38:	00000ce1 	.word	0x00000ce1

00001d3c <vTaskDelay>:
	{
    1d3c:	b510      	push	{r4, lr}
    1d3e:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
    1d40:	d00f      	beq.n	1d62 <vTaskDelay+0x26>
			configASSERT( uxSchedulerSuspended == 0 );
    1d42:	4b09      	ldr	r3, [pc, #36]	; (1d68 <vTaskDelay+0x2c>)
    1d44:	681b      	ldr	r3, [r3, #0]
    1d46:	2b00      	cmp	r3, #0
    1d48:	d001      	beq.n	1d4e <vTaskDelay+0x12>
    1d4a:	b672      	cpsid	i
    1d4c:	e7fe      	b.n	1d4c <vTaskDelay+0x10>
			vTaskSuspendAll();
    1d4e:	4b07      	ldr	r3, [pc, #28]	; (1d6c <vTaskDelay+0x30>)
    1d50:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    1d52:	2100      	movs	r1, #0
    1d54:	0020      	movs	r0, r4
    1d56:	4b06      	ldr	r3, [pc, #24]	; (1d70 <vTaskDelay+0x34>)
    1d58:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
    1d5a:	4b06      	ldr	r3, [pc, #24]	; (1d74 <vTaskDelay+0x38>)
    1d5c:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
    1d5e:	2800      	cmp	r0, #0
    1d60:	d101      	bne.n	1d66 <vTaskDelay+0x2a>
			portYIELD_WITHIN_API();
    1d62:	4b05      	ldr	r3, [pc, #20]	; (1d78 <vTaskDelay+0x3c>)
    1d64:	4798      	blx	r3
	}
    1d66:	bd10      	pop	{r4, pc}
    1d68:	20003008 	.word	0x20003008
    1d6c:	00001b01 	.word	0x00001b01
    1d70:	0000181d 	.word	0x0000181d
    1d74:	00001c3d 	.word	0x00001c3d
    1d78:	00000ce1 	.word	0x00000ce1

00001d7c <vTaskSwitchContext>:
{
    1d7c:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    1d7e:	4b28      	ldr	r3, [pc, #160]	; (1e20 <vTaskSwitchContext+0xa4>)
    1d80:	681b      	ldr	r3, [r3, #0]
    1d82:	2b00      	cmp	r3, #0
    1d84:	d125      	bne.n	1dd2 <vTaskSwitchContext+0x56>
		xYieldPending = pdFALSE;
    1d86:	2200      	movs	r2, #0
    1d88:	4b26      	ldr	r3, [pc, #152]	; (1e24 <vTaskSwitchContext+0xa8>)
    1d8a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
    1d8c:	4b26      	ldr	r3, [pc, #152]	; (1e28 <vTaskSwitchContext+0xac>)
    1d8e:	681a      	ldr	r2, [r3, #0]
    1d90:	681b      	ldr	r3, [r3, #0]
    1d92:	6812      	ldr	r2, [r2, #0]
    1d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1d96:	429a      	cmp	r2, r3
    1d98:	d805      	bhi.n	1da6 <vTaskSwitchContext+0x2a>
    1d9a:	4b23      	ldr	r3, [pc, #140]	; (1e28 <vTaskSwitchContext+0xac>)
    1d9c:	6818      	ldr	r0, [r3, #0]
    1d9e:	6819      	ldr	r1, [r3, #0]
    1da0:	3134      	adds	r1, #52	; 0x34
    1da2:	4b22      	ldr	r3, [pc, #136]	; (1e2c <vTaskSwitchContext+0xb0>)
    1da4:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
    1da6:	4b22      	ldr	r3, [pc, #136]	; (1e30 <vTaskSwitchContext+0xb4>)
    1da8:	681b      	ldr	r3, [r3, #0]
    1daa:	009a      	lsls	r2, r3, #2
    1dac:	18d2      	adds	r2, r2, r3
    1dae:	0092      	lsls	r2, r2, #2
    1db0:	4920      	ldr	r1, [pc, #128]	; (1e34 <vTaskSwitchContext+0xb8>)
    1db2:	5852      	ldr	r2, [r2, r1]
    1db4:	2a00      	cmp	r2, #0
    1db6:	d110      	bne.n	1dda <vTaskSwitchContext+0x5e>
    1db8:	2b00      	cmp	r3, #0
    1dba:	d008      	beq.n	1dce <vTaskSwitchContext+0x52>
    1dbc:	3b01      	subs	r3, #1
    1dbe:	009a      	lsls	r2, r3, #2
    1dc0:	18d2      	adds	r2, r2, r3
    1dc2:	0092      	lsls	r2, r2, #2
    1dc4:	5852      	ldr	r2, [r2, r1]
    1dc6:	2a00      	cmp	r2, #0
    1dc8:	d107      	bne.n	1dda <vTaskSwitchContext+0x5e>
    1dca:	2b00      	cmp	r3, #0
    1dcc:	d1f6      	bne.n	1dbc <vTaskSwitchContext+0x40>
    1dce:	b672      	cpsid	i
    1dd0:	e7fe      	b.n	1dd0 <vTaskSwitchContext+0x54>
		xYieldPending = pdTRUE;
    1dd2:	2201      	movs	r2, #1
    1dd4:	4b13      	ldr	r3, [pc, #76]	; (1e24 <vTaskSwitchContext+0xa8>)
    1dd6:	601a      	str	r2, [r3, #0]
}
    1dd8:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
    1dda:	4816      	ldr	r0, [pc, #88]	; (1e34 <vTaskSwitchContext+0xb8>)
    1ddc:	009a      	lsls	r2, r3, #2
    1dde:	18d1      	adds	r1, r2, r3
    1de0:	0089      	lsls	r1, r1, #2
    1de2:	1841      	adds	r1, r0, r1
    1de4:	684c      	ldr	r4, [r1, #4]
    1de6:	6864      	ldr	r4, [r4, #4]
    1de8:	604c      	str	r4, [r1, #4]
    1dea:	18d2      	adds	r2, r2, r3
    1dec:	0092      	lsls	r2, r2, #2
    1dee:	3208      	adds	r2, #8
    1df0:	1882      	adds	r2, r0, r2
    1df2:	4294      	cmp	r4, r2
    1df4:	d00b      	beq.n	1e0e <vTaskSwitchContext+0x92>
    1df6:	009a      	lsls	r2, r3, #2
    1df8:	18d2      	adds	r2, r2, r3
    1dfa:	0092      	lsls	r2, r2, #2
    1dfc:	490d      	ldr	r1, [pc, #52]	; (1e34 <vTaskSwitchContext+0xb8>)
    1dfe:	188a      	adds	r2, r1, r2
    1e00:	6852      	ldr	r2, [r2, #4]
    1e02:	68d1      	ldr	r1, [r2, #12]
    1e04:	4a08      	ldr	r2, [pc, #32]	; (1e28 <vTaskSwitchContext+0xac>)
    1e06:	6011      	str	r1, [r2, #0]
    1e08:	4a09      	ldr	r2, [pc, #36]	; (1e30 <vTaskSwitchContext+0xb4>)
    1e0a:	6013      	str	r3, [r2, #0]
}
    1e0c:	e7e4      	b.n	1dd8 <vTaskSwitchContext+0x5c>
		taskSELECT_HIGHEST_PRIORITY_TASK();
    1e0e:	6860      	ldr	r0, [r4, #4]
    1e10:	009a      	lsls	r2, r3, #2
    1e12:	18d2      	adds	r2, r2, r3
    1e14:	0092      	lsls	r2, r2, #2
    1e16:	4907      	ldr	r1, [pc, #28]	; (1e34 <vTaskSwitchContext+0xb8>)
    1e18:	188a      	adds	r2, r1, r2
    1e1a:	6050      	str	r0, [r2, #4]
    1e1c:	e7eb      	b.n	1df6 <vTaskSwitchContext+0x7a>
    1e1e:	46c0      	nop			; (mov r8, r8)
    1e20:	20003008 	.word	0x20003008
    1e24:	2000308c 	.word	0x2000308c
    1e28:	20002f8c 	.word	0x20002f8c
    1e2c:	00002e41 	.word	0x00002e41
    1e30:	20003010 	.word	0x20003010
    1e34:	20002f98 	.word	0x20002f98

00001e38 <vTaskPlaceOnEventList>:
{
    1e38:	b510      	push	{r4, lr}
    1e3a:	000c      	movs	r4, r1
	configASSERT( pxEventList );
    1e3c:	2800      	cmp	r0, #0
    1e3e:	d101      	bne.n	1e44 <vTaskPlaceOnEventList+0xc>
    1e40:	b672      	cpsid	i
    1e42:	e7fe      	b.n	1e42 <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1e44:	4b04      	ldr	r3, [pc, #16]	; (1e58 <vTaskPlaceOnEventList+0x20>)
    1e46:	6819      	ldr	r1, [r3, #0]
    1e48:	3118      	adds	r1, #24
    1e4a:	4b04      	ldr	r3, [pc, #16]	; (1e5c <vTaskPlaceOnEventList+0x24>)
    1e4c:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    1e4e:	2101      	movs	r1, #1
    1e50:	0020      	movs	r0, r4
    1e52:	4b03      	ldr	r3, [pc, #12]	; (1e60 <vTaskPlaceOnEventList+0x28>)
    1e54:	4798      	blx	r3
}
    1e56:	bd10      	pop	{r4, pc}
    1e58:	20002f8c 	.word	0x20002f8c
    1e5c:	00001069 	.word	0x00001069
    1e60:	0000181d 	.word	0x0000181d

00001e64 <vTaskPlaceOnEventListRestricted>:
	{
    1e64:	b570      	push	{r4, r5, r6, lr}
    1e66:	000c      	movs	r4, r1
    1e68:	0015      	movs	r5, r2
		configASSERT( pxEventList );
    1e6a:	2800      	cmp	r0, #0
    1e6c:	d00d      	beq.n	1e8a <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1e6e:	4b08      	ldr	r3, [pc, #32]	; (1e90 <vTaskPlaceOnEventListRestricted+0x2c>)
    1e70:	6819      	ldr	r1, [r3, #0]
    1e72:	3118      	adds	r1, #24
    1e74:	4b07      	ldr	r3, [pc, #28]	; (1e94 <vTaskPlaceOnEventListRestricted+0x30>)
    1e76:	4798      	blx	r3
		if( xWaitIndefinitely != pdFALSE )
    1e78:	2d00      	cmp	r5, #0
    1e7a:	d001      	beq.n	1e80 <vTaskPlaceOnEventListRestricted+0x1c>
			xTicksToWait = portMAX_DELAY;
    1e7c:	2401      	movs	r4, #1
    1e7e:	4264      	negs	r4, r4
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    1e80:	0029      	movs	r1, r5
    1e82:	0020      	movs	r0, r4
    1e84:	4b04      	ldr	r3, [pc, #16]	; (1e98 <vTaskPlaceOnEventListRestricted+0x34>)
    1e86:	4798      	blx	r3
	}
    1e88:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxEventList );
    1e8a:	b672      	cpsid	i
    1e8c:	e7fe      	b.n	1e8c <vTaskPlaceOnEventListRestricted+0x28>
    1e8e:	46c0      	nop			; (mov r8, r8)
    1e90:	20002f8c 	.word	0x20002f8c
    1e94:	00001051 	.word	0x00001051
    1e98:	0000181d 	.word	0x0000181d

00001e9c <xTaskRemoveFromEventList>:
{
    1e9c:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    1e9e:	68c3      	ldr	r3, [r0, #12]
    1ea0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
    1ea2:	2c00      	cmp	r4, #0
    1ea4:	d027      	beq.n	1ef6 <xTaskRemoveFromEventList+0x5a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    1ea6:	0025      	movs	r5, r4
    1ea8:	3518      	adds	r5, #24
    1eaa:	0028      	movs	r0, r5
    1eac:	4b15      	ldr	r3, [pc, #84]	; (1f04 <xTaskRemoveFromEventList+0x68>)
    1eae:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1eb0:	4b15      	ldr	r3, [pc, #84]	; (1f08 <xTaskRemoveFromEventList+0x6c>)
    1eb2:	681b      	ldr	r3, [r3, #0]
    1eb4:	2b00      	cmp	r3, #0
    1eb6:	d120      	bne.n	1efa <xTaskRemoveFromEventList+0x5e>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    1eb8:	1d25      	adds	r5, r4, #4
    1eba:	0028      	movs	r0, r5
    1ebc:	4b11      	ldr	r3, [pc, #68]	; (1f04 <xTaskRemoveFromEventList+0x68>)
    1ebe:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    1ec0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1ec2:	4a12      	ldr	r2, [pc, #72]	; (1f0c <xTaskRemoveFromEventList+0x70>)
    1ec4:	6812      	ldr	r2, [r2, #0]
    1ec6:	4293      	cmp	r3, r2
    1ec8:	d901      	bls.n	1ece <xTaskRemoveFromEventList+0x32>
    1eca:	4a10      	ldr	r2, [pc, #64]	; (1f0c <xTaskRemoveFromEventList+0x70>)
    1ecc:	6013      	str	r3, [r2, #0]
    1ece:	0098      	lsls	r0, r3, #2
    1ed0:	18c0      	adds	r0, r0, r3
    1ed2:	0080      	lsls	r0, r0, #2
    1ed4:	4b0e      	ldr	r3, [pc, #56]	; (1f10 <xTaskRemoveFromEventList+0x74>)
    1ed6:	1818      	adds	r0, r3, r0
    1ed8:	0029      	movs	r1, r5
    1eda:	4b0e      	ldr	r3, [pc, #56]	; (1f14 <xTaskRemoveFromEventList+0x78>)
    1edc:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    1ede:	4b0e      	ldr	r3, [pc, #56]	; (1f18 <xTaskRemoveFromEventList+0x7c>)
    1ee0:	681b      	ldr	r3, [r3, #0]
    1ee2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
    1ee6:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    1ee8:	429a      	cmp	r2, r3
    1eea:	d903      	bls.n	1ef4 <xTaskRemoveFromEventList+0x58>
		xYieldPending = pdTRUE;
    1eec:	2201      	movs	r2, #1
    1eee:	4b0b      	ldr	r3, [pc, #44]	; (1f1c <xTaskRemoveFromEventList+0x80>)
    1ef0:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
    1ef2:	3001      	adds	r0, #1
}
    1ef4:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxUnblockedTCB );
    1ef6:	b672      	cpsid	i
    1ef8:	e7fe      	b.n	1ef8 <xTaskRemoveFromEventList+0x5c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    1efa:	0029      	movs	r1, r5
    1efc:	4808      	ldr	r0, [pc, #32]	; (1f20 <xTaskRemoveFromEventList+0x84>)
    1efe:	4b05      	ldr	r3, [pc, #20]	; (1f14 <xTaskRemoveFromEventList+0x78>)
    1f00:	4798      	blx	r3
    1f02:	e7ec      	b.n	1ede <xTaskRemoveFromEventList+0x42>
    1f04:	00001097 	.word	0x00001097
    1f08:	20003008 	.word	0x20003008
    1f0c:	20003010 	.word	0x20003010
    1f10:	20002f98 	.word	0x20002f98
    1f14:	00001051 	.word	0x00001051
    1f18:	20002f8c 	.word	0x20002f8c
    1f1c:	2000308c 	.word	0x2000308c
    1f20:	20003048 	.word	0x20003048

00001f24 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    1f24:	4b03      	ldr	r3, [pc, #12]	; (1f34 <vTaskInternalSetTimeOutState+0x10>)
    1f26:	681b      	ldr	r3, [r3, #0]
    1f28:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    1f2a:	4b03      	ldr	r3, [pc, #12]	; (1f38 <vTaskInternalSetTimeOutState+0x14>)
    1f2c:	681b      	ldr	r3, [r3, #0]
    1f2e:	6043      	str	r3, [r0, #4]
}
    1f30:	4770      	bx	lr
    1f32:	46c0      	nop			; (mov r8, r8)
    1f34:	20003044 	.word	0x20003044
    1f38:	20003088 	.word	0x20003088

00001f3c <xTaskCheckForTimeOut>:
{
    1f3c:	b570      	push	{r4, r5, r6, lr}
    1f3e:	0006      	movs	r6, r0
    1f40:	000d      	movs	r5, r1
	configASSERT( pxTimeOut );
    1f42:	2800      	cmp	r0, #0
    1f44:	d01b      	beq.n	1f7e <xTaskCheckForTimeOut+0x42>
	configASSERT( pxTicksToWait );
    1f46:	2900      	cmp	r1, #0
    1f48:	d01b      	beq.n	1f82 <xTaskCheckForTimeOut+0x46>
	taskENTER_CRITICAL();
    1f4a:	4b13      	ldr	r3, [pc, #76]	; (1f98 <xTaskCheckForTimeOut+0x5c>)
    1f4c:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    1f4e:	4b13      	ldr	r3, [pc, #76]	; (1f9c <xTaskCheckForTimeOut+0x60>)
    1f50:	681a      	ldr	r2, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    1f52:	6871      	ldr	r1, [r6, #4]
			if( *pxTicksToWait == portMAX_DELAY )
    1f54:	682b      	ldr	r3, [r5, #0]
    1f56:	1c58      	adds	r0, r3, #1
    1f58:	d01c      	beq.n	1f94 <xTaskCheckForTimeOut+0x58>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    1f5a:	4811      	ldr	r0, [pc, #68]	; (1fa0 <xTaskCheckForTimeOut+0x64>)
    1f5c:	6800      	ldr	r0, [r0, #0]
    1f5e:	6834      	ldr	r4, [r6, #0]
    1f60:	4284      	cmp	r4, r0
    1f62:	d002      	beq.n	1f6a <xTaskCheckForTimeOut+0x2e>
			xReturn = pdTRUE;
    1f64:	2401      	movs	r4, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    1f66:	428a      	cmp	r2, r1
    1f68:	d205      	bcs.n	1f76 <xTaskCheckForTimeOut+0x3a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    1f6a:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    1f6c:	429a      	cmp	r2, r3
    1f6e:	d30a      	bcc.n	1f86 <xTaskCheckForTimeOut+0x4a>
			*pxTicksToWait = 0;
    1f70:	2300      	movs	r3, #0
    1f72:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
    1f74:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
    1f76:	4b0b      	ldr	r3, [pc, #44]	; (1fa4 <xTaskCheckForTimeOut+0x68>)
    1f78:	4798      	blx	r3
}
    1f7a:	0020      	movs	r0, r4
    1f7c:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxTimeOut );
    1f7e:	b672      	cpsid	i
    1f80:	e7fe      	b.n	1f80 <xTaskCheckForTimeOut+0x44>
	configASSERT( pxTicksToWait );
    1f82:	b672      	cpsid	i
    1f84:	e7fe      	b.n	1f84 <xTaskCheckForTimeOut+0x48>
			*pxTicksToWait -= xElapsedTime;
    1f86:	1a9b      	subs	r3, r3, r2
    1f88:	602b      	str	r3, [r5, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
    1f8a:	0030      	movs	r0, r6
    1f8c:	4b06      	ldr	r3, [pc, #24]	; (1fa8 <xTaskCheckForTimeOut+0x6c>)
    1f8e:	4798      	blx	r3
			xReturn = pdFALSE;
    1f90:	2400      	movs	r4, #0
    1f92:	e7f0      	b.n	1f76 <xTaskCheckForTimeOut+0x3a>
				xReturn = pdFALSE;
    1f94:	2400      	movs	r4, #0
    1f96:	e7ee      	b.n	1f76 <xTaskCheckForTimeOut+0x3a>
    1f98:	00000cf9 	.word	0x00000cf9
    1f9c:	20003088 	.word	0x20003088
    1fa0:	20003044 	.word	0x20003044
    1fa4:	00000d11 	.word	0x00000d11
    1fa8:	00001f25 	.word	0x00001f25

00001fac <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    1fac:	2201      	movs	r2, #1
    1fae:	4b01      	ldr	r3, [pc, #4]	; (1fb4 <vTaskMissedYield+0x8>)
    1fb0:	601a      	str	r2, [r3, #0]
}
    1fb2:	4770      	bx	lr
    1fb4:	2000308c 	.word	0x2000308c

00001fb8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
    1fb8:	4b05      	ldr	r3, [pc, #20]	; (1fd0 <xTaskGetSchedulerState+0x18>)
    1fba:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
    1fbc:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
    1fbe:	2b00      	cmp	r3, #0
    1fc0:	d004      	beq.n	1fcc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1fc2:	4b04      	ldr	r3, [pc, #16]	; (1fd4 <xTaskGetSchedulerState+0x1c>)
    1fc4:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
    1fc6:	4243      	negs	r3, r0
    1fc8:	4158      	adcs	r0, r3
    1fca:	0040      	lsls	r0, r0, #1
	}
    1fcc:	4770      	bx	lr
    1fce:	46c0      	nop			; (mov r8, r8)
    1fd0:	2000305c 	.word	0x2000305c
    1fd4:	20003008 	.word	0x20003008

00001fd8 <xTaskPriorityDisinherit>:
	{
    1fd8:	b570      	push	{r4, r5, r6, lr}
    1fda:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
    1fdc:	d02c      	beq.n	2038 <STACK_SIZE+0x38>
			configASSERT( pxTCB == pxCurrentTCB );
    1fde:	4b18      	ldr	r3, [pc, #96]	; (2040 <STACK_SIZE+0x40>)
    1fe0:	681b      	ldr	r3, [r3, #0]
    1fe2:	4298      	cmp	r0, r3
    1fe4:	d001      	beq.n	1fea <xTaskPriorityDisinherit+0x12>
    1fe6:	b672      	cpsid	i
    1fe8:	e7fe      	b.n	1fe8 <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
    1fea:	6c83      	ldr	r3, [r0, #72]	; 0x48
    1fec:	2b00      	cmp	r3, #0
    1fee:	d101      	bne.n	1ff4 <xTaskPriorityDisinherit+0x1c>
    1ff0:	b672      	cpsid	i
    1ff2:	e7fe      	b.n	1ff2 <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
    1ff4:	3b01      	subs	r3, #1
    1ff6:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    1ff8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    1ffa:	6c41      	ldr	r1, [r0, #68]	; 0x44
    1ffc:	428a      	cmp	r2, r1
    1ffe:	d01d      	beq.n	203c <STACK_SIZE+0x3c>
	BaseType_t xReturn = pdFALSE;
    2000:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    2002:	2b00      	cmp	r3, #0
    2004:	d117      	bne.n	2036 <STACK_SIZE+0x36>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2006:	1d25      	adds	r5, r4, #4
    2008:	0028      	movs	r0, r5
    200a:	4b0e      	ldr	r3, [pc, #56]	; (2044 <STACK_SIZE+0x44>)
    200c:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    200e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    2010:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2012:	2205      	movs	r2, #5
    2014:	1ad2      	subs	r2, r2, r3
    2016:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
    2018:	4a0b      	ldr	r2, [pc, #44]	; (2048 <STACK_SIZE+0x48>)
    201a:	6812      	ldr	r2, [r2, #0]
    201c:	4293      	cmp	r3, r2
    201e:	d901      	bls.n	2024 <STACK_SIZE+0x24>
    2020:	4a09      	ldr	r2, [pc, #36]	; (2048 <STACK_SIZE+0x48>)
    2022:	6013      	str	r3, [r2, #0]
    2024:	009a      	lsls	r2, r3, #2
    2026:	18d3      	adds	r3, r2, r3
    2028:	009b      	lsls	r3, r3, #2
    202a:	4808      	ldr	r0, [pc, #32]	; (204c <STACK_SIZE+0x4c>)
    202c:	18c0      	adds	r0, r0, r3
    202e:	0029      	movs	r1, r5
    2030:	4b07      	ldr	r3, [pc, #28]	; (2050 <STACK_SIZE+0x50>)
    2032:	4798      	blx	r3
					xReturn = pdTRUE;
    2034:	2001      	movs	r0, #1
	}
    2036:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
    2038:	2000      	movs	r0, #0
    203a:	e7fc      	b.n	2036 <STACK_SIZE+0x36>
    203c:	2000      	movs	r0, #0
    203e:	e7fa      	b.n	2036 <STACK_SIZE+0x36>
    2040:	20002f8c 	.word	0x20002f8c
    2044:	00001097 	.word	0x00001097
    2048:	20003010 	.word	0x20003010
    204c:	20002f98 	.word	0x20002f98
    2050:	00001051 	.word	0x00001051

00002054 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    2054:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    2056:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2058:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
    205a:	4291      	cmp	r1, r2
    205c:	d80b      	bhi.n	2076 <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    205e:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    2060:	2401      	movs	r4, #1
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2062:	6983      	ldr	r3, [r0, #24]
    2064:	429a      	cmp	r2, r3
    2066:	d211      	bcs.n	208c <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    2068:	1d01      	adds	r1, r0, #4
    206a:	4b09      	ldr	r3, [pc, #36]	; (2090 <prvInsertTimerInActiveList+0x3c>)
    206c:	6818      	ldr	r0, [r3, #0]
    206e:	4b09      	ldr	r3, [pc, #36]	; (2094 <prvInsertTimerInActiveList+0x40>)
    2070:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
    2072:	2400      	movs	r4, #0
    2074:	e00a      	b.n	208c <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    2076:	429a      	cmp	r2, r3
    2078:	d202      	bcs.n	2080 <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    207a:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    207c:	4299      	cmp	r1, r3
    207e:	d205      	bcs.n	208c <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2080:	1d01      	adds	r1, r0, #4
    2082:	4b05      	ldr	r3, [pc, #20]	; (2098 <prvInsertTimerInActiveList+0x44>)
    2084:	6818      	ldr	r0, [r3, #0]
    2086:	4b03      	ldr	r3, [pc, #12]	; (2094 <prvInsertTimerInActiveList+0x40>)
    2088:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
    208a:	2400      	movs	r4, #0
		}
	}

	return xProcessTimerNow;
}
    208c:	0020      	movs	r0, r4
    208e:	bd10      	pop	{r4, pc}
    2090:	20003094 	.word	0x20003094
    2094:	00001069 	.word	0x00001069
    2098:	20003090 	.word	0x20003090

0000209c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    209c:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    209e:	4b0e      	ldr	r3, [pc, #56]	; (20d8 <prvCheckForValidListAndQueue+0x3c>)
    20a0:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    20a2:	4b0e      	ldr	r3, [pc, #56]	; (20dc <prvCheckForValidListAndQueue+0x40>)
    20a4:	681b      	ldr	r3, [r3, #0]
    20a6:	2b00      	cmp	r3, #0
    20a8:	d002      	beq.n	20b0 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    20aa:	4b0d      	ldr	r3, [pc, #52]	; (20e0 <prvCheckForValidListAndQueue+0x44>)
    20ac:	4798      	blx	r3
}
    20ae:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
    20b0:	4d0c      	ldr	r5, [pc, #48]	; (20e4 <prvCheckForValidListAndQueue+0x48>)
    20b2:	0028      	movs	r0, r5
    20b4:	4e0c      	ldr	r6, [pc, #48]	; (20e8 <prvCheckForValidListAndQueue+0x4c>)
    20b6:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
    20b8:	4c0c      	ldr	r4, [pc, #48]	; (20ec <prvCheckForValidListAndQueue+0x50>)
    20ba:	0020      	movs	r0, r4
    20bc:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
    20be:	4b0c      	ldr	r3, [pc, #48]	; (20f0 <prvCheckForValidListAndQueue+0x54>)
    20c0:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    20c2:	4b0c      	ldr	r3, [pc, #48]	; (20f4 <prvCheckForValidListAndQueue+0x58>)
    20c4:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    20c6:	2200      	movs	r2, #0
    20c8:	210c      	movs	r1, #12
    20ca:	2005      	movs	r0, #5
    20cc:	4b0a      	ldr	r3, [pc, #40]	; (20f8 <prvCheckForValidListAndQueue+0x5c>)
    20ce:	4798      	blx	r3
    20d0:	4b02      	ldr	r3, [pc, #8]	; (20dc <prvCheckForValidListAndQueue+0x40>)
    20d2:	6018      	str	r0, [r3, #0]
    20d4:	e7e9      	b.n	20aa <prvCheckForValidListAndQueue+0xe>
    20d6:	46c0      	nop			; (mov r8, r8)
    20d8:	00000cf9 	.word	0x00000cf9
    20dc:	200030c4 	.word	0x200030c4
    20e0:	00000d11 	.word	0x00000d11
    20e4:	20003098 	.word	0x20003098
    20e8:	00001035 	.word	0x00001035
    20ec:	200030ac 	.word	0x200030ac
    20f0:	20003090 	.word	0x20003090
    20f4:	20003094 	.word	0x20003094
    20f8:	00001315 	.word	0x00001315

000020fc <xTimerCreateTimerTask>:
{
    20fc:	b510      	push	{r4, lr}
    20fe:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
    2100:	4b0a      	ldr	r3, [pc, #40]	; (212c <xTimerCreateTimerTask+0x30>)
    2102:	4798      	blx	r3
	if( xTimerQueue != NULL )
    2104:	4b0a      	ldr	r3, [pc, #40]	; (2130 <xTimerCreateTimerTask+0x34>)
    2106:	681b      	ldr	r3, [r3, #0]
    2108:	2b00      	cmp	r3, #0
    210a:	d00d      	beq.n	2128 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate(	prvTimerTask,
    210c:	4b09      	ldr	r3, [pc, #36]	; (2134 <xTimerCreateTimerTask+0x38>)
    210e:	9301      	str	r3, [sp, #4]
    2110:	2302      	movs	r3, #2
    2112:	9300      	str	r3, [sp, #0]
    2114:	2300      	movs	r3, #0
    2116:	2280      	movs	r2, #128	; 0x80
    2118:	4907      	ldr	r1, [pc, #28]	; (2138 <xTimerCreateTimerTask+0x3c>)
    211a:	4808      	ldr	r0, [pc, #32]	; (213c <xTimerCreateTimerTask+0x40>)
    211c:	4c08      	ldr	r4, [pc, #32]	; (2140 <xTimerCreateTimerTask+0x44>)
    211e:	47a0      	blx	r4
	configASSERT( xReturn );
    2120:	2800      	cmp	r0, #0
    2122:	d001      	beq.n	2128 <xTimerCreateTimerTask+0x2c>
}
    2124:	b002      	add	sp, #8
    2126:	bd10      	pop	{r4, pc}
	configASSERT( xReturn );
    2128:	b672      	cpsid	i
    212a:	e7fe      	b.n	212a <xTimerCreateTimerTask+0x2e>
    212c:	0000209d 	.word	0x0000209d
    2130:	200030c4 	.word	0x200030c4
    2134:	200030c8 	.word	0x200030c8
    2138:	0000316c 	.word	0x0000316c
    213c:	00002269 	.word	0x00002269
    2140:	000018a5 	.word	0x000018a5

00002144 <xTimerGenericCommand>:
{
    2144:	b530      	push	{r4, r5, lr}
    2146:	b085      	sub	sp, #20
    2148:	0004      	movs	r4, r0
    214a:	001d      	movs	r5, r3
	configASSERT( xTimer );
    214c:	2800      	cmp	r0, #0
    214e:	d014      	beq.n	217a <xTimerGenericCommand+0x36>
	if( xTimerQueue != NULL )
    2150:	4b13      	ldr	r3, [pc, #76]	; (21a0 <xTimerGenericCommand+0x5c>)
    2152:	6818      	ldr	r0, [r3, #0]
    2154:	2800      	cmp	r0, #0
    2156:	d021      	beq.n	219c <xTimerGenericCommand+0x58>
		xMessage.xMessageID = xCommandID;
    2158:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    215a:	9202      	str	r2, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    215c:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    215e:	2905      	cmp	r1, #5
    2160:	dc15      	bgt.n	218e <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2162:	4b10      	ldr	r3, [pc, #64]	; (21a4 <xTimerGenericCommand+0x60>)
    2164:	4798      	blx	r3
    2166:	2802      	cmp	r0, #2
    2168:	d009      	beq.n	217e <xTimerGenericCommand+0x3a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    216a:	4b0d      	ldr	r3, [pc, #52]	; (21a0 <xTimerGenericCommand+0x5c>)
    216c:	6818      	ldr	r0, [r3, #0]
    216e:	2300      	movs	r3, #0
    2170:	2200      	movs	r2, #0
    2172:	a901      	add	r1, sp, #4
    2174:	4c0c      	ldr	r4, [pc, #48]	; (21a8 <xTimerGenericCommand+0x64>)
    2176:	47a0      	blx	r4
    2178:	e00e      	b.n	2198 <xTimerGenericCommand+0x54>
	configASSERT( xTimer );
    217a:	b672      	cpsid	i
    217c:	e7fe      	b.n	217c <xTimerGenericCommand+0x38>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    217e:	4b08      	ldr	r3, [pc, #32]	; (21a0 <xTimerGenericCommand+0x5c>)
    2180:	6818      	ldr	r0, [r3, #0]
    2182:	2300      	movs	r3, #0
    2184:	9a08      	ldr	r2, [sp, #32]
    2186:	a901      	add	r1, sp, #4
    2188:	4c07      	ldr	r4, [pc, #28]	; (21a8 <xTimerGenericCommand+0x64>)
    218a:	47a0      	blx	r4
    218c:	e004      	b.n	2198 <xTimerGenericCommand+0x54>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    218e:	2300      	movs	r3, #0
    2190:	002a      	movs	r2, r5
    2192:	a901      	add	r1, sp, #4
    2194:	4c05      	ldr	r4, [pc, #20]	; (21ac <xTimerGenericCommand+0x68>)
    2196:	47a0      	blx	r4
}
    2198:	b005      	add	sp, #20
    219a:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
    219c:	2000      	movs	r0, #0
	return xReturn;
    219e:	e7fb      	b.n	2198 <xTimerGenericCommand+0x54>
    21a0:	200030c4 	.word	0x200030c4
    21a4:	00001fb9 	.word	0x00001fb9
    21a8:	00001361 	.word	0x00001361
    21ac:	000014ed 	.word	0x000014ed

000021b0 <prvSampleTimeNow>:
{
    21b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    21b2:	46d6      	mov	lr, sl
    21b4:	464f      	mov	r7, r9
    21b6:	4646      	mov	r6, r8
    21b8:	b5c0      	push	{r6, r7, lr}
    21ba:	b082      	sub	sp, #8
    21bc:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
    21be:	4b23      	ldr	r3, [pc, #140]	; (224c <prvSampleTimeNow+0x9c>)
    21c0:	4798      	blx	r3
    21c2:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
    21c4:	4b22      	ldr	r3, [pc, #136]	; (2250 <prvSampleTimeNow+0xa0>)
    21c6:	681b      	ldr	r3, [r3, #0]
    21c8:	4298      	cmp	r0, r3
    21ca:	d317      	bcc.n	21fc <prvSampleTimeNow+0x4c>
		*pxTimerListsWereSwitched = pdFALSE;
    21cc:	2300      	movs	r3, #0
    21ce:	4642      	mov	r2, r8
    21d0:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
    21d2:	4b1f      	ldr	r3, [pc, #124]	; (2250 <prvSampleTimeNow+0xa0>)
    21d4:	4652      	mov	r2, sl
    21d6:	601a      	str	r2, [r3, #0]
}
    21d8:	4650      	mov	r0, sl
    21da:	b002      	add	sp, #8
    21dc:	bc1c      	pop	{r2, r3, r4}
    21de:	4690      	mov	r8, r2
    21e0:	4699      	mov	r9, r3
    21e2:	46a2      	mov	sl, r4
    21e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    21e6:	2300      	movs	r3, #0
    21e8:	9300      	str	r3, [sp, #0]
    21ea:	003a      	movs	r2, r7
    21ec:	2100      	movs	r1, #0
    21ee:	0020      	movs	r0, r4
    21f0:	4c18      	ldr	r4, [pc, #96]	; (2254 <prvSampleTimeNow+0xa4>)
    21f2:	47a0      	blx	r4
				configASSERT( xResult );
    21f4:	2800      	cmp	r0, #0
    21f6:	d104      	bne.n	2202 <prvSampleTimeNow+0x52>
    21f8:	b672      	cpsid	i
    21fa:	e7fe      	b.n	21fa <prvSampleTimeNow+0x4a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    21fc:	4d16      	ldr	r5, [pc, #88]	; (2258 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    21fe:	4b17      	ldr	r3, [pc, #92]	; (225c <prvSampleTimeNow+0xac>)
    2200:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2202:	682b      	ldr	r3, [r5, #0]
    2204:	681a      	ldr	r2, [r3, #0]
    2206:	2a00      	cmp	r2, #0
    2208:	d017      	beq.n	223a <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    220a:	68db      	ldr	r3, [r3, #12]
    220c:	681f      	ldr	r7, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    220e:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2210:	1d26      	adds	r6, r4, #4
    2212:	0030      	movs	r0, r6
    2214:	47c8      	blx	r9
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2216:	0020      	movs	r0, r4
    2218:	6a63      	ldr	r3, [r4, #36]	; 0x24
    221a:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    221c:	69e3      	ldr	r3, [r4, #28]
    221e:	2b01      	cmp	r3, #1
    2220:	d1ef      	bne.n	2202 <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2222:	69a3      	ldr	r3, [r4, #24]
    2224:	18fb      	adds	r3, r7, r3
			if( xReloadTime > xNextExpireTime )
    2226:	429f      	cmp	r7, r3
    2228:	d2dd      	bcs.n	21e6 <prvSampleTimeNow+0x36>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    222a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    222c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    222e:	4b0a      	ldr	r3, [pc, #40]	; (2258 <prvSampleTimeNow+0xa8>)
    2230:	6818      	ldr	r0, [r3, #0]
    2232:	0031      	movs	r1, r6
    2234:	4b0a      	ldr	r3, [pc, #40]	; (2260 <prvSampleTimeNow+0xb0>)
    2236:	4798      	blx	r3
    2238:	e7e3      	b.n	2202 <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
    223a:	4a0a      	ldr	r2, [pc, #40]	; (2264 <prvSampleTimeNow+0xb4>)
    223c:	4906      	ldr	r1, [pc, #24]	; (2258 <prvSampleTimeNow+0xa8>)
    223e:	6810      	ldr	r0, [r2, #0]
    2240:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
    2242:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
    2244:	2301      	movs	r3, #1
    2246:	4642      	mov	r2, r8
    2248:	6013      	str	r3, [r2, #0]
    224a:	e7c2      	b.n	21d2 <prvSampleTimeNow+0x22>
    224c:	00001b11 	.word	0x00001b11
    2250:	200030c0 	.word	0x200030c0
    2254:	00002145 	.word	0x00002145
    2258:	20003090 	.word	0x20003090
    225c:	00001097 	.word	0x00001097
    2260:	00001069 	.word	0x00001069
    2264:	20003094 	.word	0x20003094

00002268 <prvTimerTask>:
{
    2268:	b5f0      	push	{r4, r5, r6, r7, lr}
    226a:	b089      	sub	sp, #36	; 0x24
		vApplicationDaemonTaskStartupHook();
    226c:	4b53      	ldr	r3, [pc, #332]	; (23bc <prvTimerTask+0x154>)
    226e:	4798      	blx	r3
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2270:	4f53      	ldr	r7, [pc, #332]	; (23c0 <prvTimerTask+0x158>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    2272:	4b54      	ldr	r3, [pc, #336]	; (23c4 <prvTimerTask+0x15c>)
    2274:	681b      	ldr	r3, [r3, #0]
    2276:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    2278:	2a00      	cmp	r2, #0
    227a:	d00e      	beq.n	229a <prvTimerTask+0x32>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    227c:	68db      	ldr	r3, [r3, #12]
    227e:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
    2280:	4b51      	ldr	r3, [pc, #324]	; (23c8 <prvTimerTask+0x160>)
    2282:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2284:	a805      	add	r0, sp, #20
    2286:	4b51      	ldr	r3, [pc, #324]	; (23cc <prvTimerTask+0x164>)
    2288:	4798      	blx	r3
    228a:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
    228c:	9b05      	ldr	r3, [sp, #20]
    228e:	2b00      	cmp	r3, #0
    2290:	d15f      	bne.n	2352 <prvTimerTask+0xea>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2292:	4284      	cmp	r4, r0
    2294:	d936      	bls.n	2304 <prvTimerTask+0x9c>
    2296:	2200      	movs	r2, #0
    2298:	e00f      	b.n	22ba <prvTimerTask+0x52>
	vTaskSuspendAll();
    229a:	4b4b      	ldr	r3, [pc, #300]	; (23c8 <prvTimerTask+0x160>)
    229c:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    229e:	a805      	add	r0, sp, #20
    22a0:	4b4a      	ldr	r3, [pc, #296]	; (23cc <prvTimerTask+0x164>)
    22a2:	4798      	blx	r3
    22a4:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
    22a6:	9b05      	ldr	r3, [sp, #20]
    22a8:	2b00      	cmp	r3, #0
    22aa:	d152      	bne.n	2352 <prvTimerTask+0xea>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    22ac:	4b48      	ldr	r3, [pc, #288]	; (23d0 <prvTimerTask+0x168>)
    22ae:	681b      	ldr	r3, [r3, #0]
    22b0:	681b      	ldr	r3, [r3, #0]
    22b2:	425a      	negs	r2, r3
    22b4:	415a      	adcs	r2, r3
    22b6:	b2d2      	uxtb	r2, r2
    22b8:	2400      	movs	r4, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    22ba:	1b61      	subs	r1, r4, r5
    22bc:	4b45      	ldr	r3, [pc, #276]	; (23d4 <prvTimerTask+0x16c>)
    22be:	6818      	ldr	r0, [r3, #0]
    22c0:	4b45      	ldr	r3, [pc, #276]	; (23d8 <prvTimerTask+0x170>)
    22c2:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    22c4:	4b45      	ldr	r3, [pc, #276]	; (23dc <prvTimerTask+0x174>)
    22c6:	4798      	blx	r3
    22c8:	2800      	cmp	r0, #0
    22ca:	d03f      	beq.n	234c <prvTimerTask+0xe4>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    22cc:	4d41      	ldr	r5, [pc, #260]	; (23d4 <prvTimerTask+0x16c>)
    22ce:	4c44      	ldr	r4, [pc, #272]	; (23e0 <prvTimerTask+0x178>)
    22d0:	2200      	movs	r2, #0
    22d2:	a905      	add	r1, sp, #20
    22d4:	6828      	ldr	r0, [r5, #0]
    22d6:	47a0      	blx	r4
    22d8:	2800      	cmp	r0, #0
    22da:	d0ca      	beq.n	2272 <prvTimerTask+0xa>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    22dc:	9b05      	ldr	r3, [sp, #20]
    22de:	9303      	str	r3, [sp, #12]
    22e0:	2b00      	cmp	r3, #0
    22e2:	dbf5      	blt.n	22d0 <prvTimerTask+0x68>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    22e4:	9e07      	ldr	r6, [sp, #28]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    22e6:	6973      	ldr	r3, [r6, #20]
    22e8:	2b00      	cmp	r3, #0
    22ea:	d001      	beq.n	22f0 <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    22ec:	1d30      	adds	r0, r6, #4
    22ee:	47b8      	blx	r7
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    22f0:	a804      	add	r0, sp, #16
    22f2:	4b36      	ldr	r3, [pc, #216]	; (23cc <prvTimerTask+0x164>)
    22f4:	4798      	blx	r3
			switch( xMessage.xMessageID )
    22f6:	9b05      	ldr	r3, [sp, #20]
    22f8:	2b09      	cmp	r3, #9
    22fa:	d8e9      	bhi.n	22d0 <prvTimerTask+0x68>
    22fc:	009b      	lsls	r3, r3, #2
    22fe:	4a39      	ldr	r2, [pc, #228]	; (23e4 <prvTimerTask+0x17c>)
    2300:	58d3      	ldr	r3, [r2, r3]
    2302:	469f      	mov	pc, r3
				( void ) xTaskResumeAll();
    2304:	4b35      	ldr	r3, [pc, #212]	; (23dc <prvTimerTask+0x174>)
    2306:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    2308:	4b2e      	ldr	r3, [pc, #184]	; (23c4 <prvTimerTask+0x15c>)
    230a:	681b      	ldr	r3, [r3, #0]
    230c:	68db      	ldr	r3, [r3, #12]
    230e:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2310:	1d30      	adds	r0, r6, #4
    2312:	4b2b      	ldr	r3, [pc, #172]	; (23c0 <prvTimerTask+0x158>)
    2314:	4798      	blx	r3
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    2316:	69f3      	ldr	r3, [r6, #28]
    2318:	2b01      	cmp	r3, #1
    231a:	d003      	beq.n	2324 <prvTimerTask+0xbc>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    231c:	6a73      	ldr	r3, [r6, #36]	; 0x24
    231e:	0030      	movs	r0, r6
    2320:	4798      	blx	r3
    2322:	e7d3      	b.n	22cc <prvTimerTask+0x64>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2324:	69b3      	ldr	r3, [r6, #24]
    2326:	18e1      	adds	r1, r4, r3
    2328:	0023      	movs	r3, r4
    232a:	002a      	movs	r2, r5
    232c:	0030      	movs	r0, r6
    232e:	4d2e      	ldr	r5, [pc, #184]	; (23e8 <prvTimerTask+0x180>)
    2330:	47a8      	blx	r5
    2332:	2800      	cmp	r0, #0
    2334:	d0f2      	beq.n	231c <prvTimerTask+0xb4>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2336:	2300      	movs	r3, #0
    2338:	9300      	str	r3, [sp, #0]
    233a:	0022      	movs	r2, r4
    233c:	2100      	movs	r1, #0
    233e:	0030      	movs	r0, r6
    2340:	4c2a      	ldr	r4, [pc, #168]	; (23ec <prvTimerTask+0x184>)
    2342:	47a0      	blx	r4
			configASSERT( xResult );
    2344:	2800      	cmp	r0, #0
    2346:	d1e9      	bne.n	231c <prvTimerTask+0xb4>
    2348:	b672      	cpsid	i
    234a:	e7fe      	b.n	234a <prvTimerTask+0xe2>
					portYIELD_WITHIN_API();
    234c:	4b28      	ldr	r3, [pc, #160]	; (23f0 <prvTimerTask+0x188>)
    234e:	4798      	blx	r3
    2350:	e7bc      	b.n	22cc <prvTimerTask+0x64>
			( void ) xTaskResumeAll();
    2352:	4b22      	ldr	r3, [pc, #136]	; (23dc <prvTimerTask+0x174>)
    2354:	4798      	blx	r3
    2356:	e7b9      	b.n	22cc <prvTimerTask+0x64>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    2358:	9b06      	ldr	r3, [sp, #24]
    235a:	69b2      	ldr	r2, [r6, #24]
    235c:	4694      	mov	ip, r2
    235e:	4463      	add	r3, ip
    2360:	0019      	movs	r1, r3
    2362:	9b06      	ldr	r3, [sp, #24]
    2364:	0002      	movs	r2, r0
    2366:	0030      	movs	r0, r6
    2368:	4c1f      	ldr	r4, [pc, #124]	; (23e8 <prvTimerTask+0x180>)
    236a:	47a0      	blx	r4
    236c:	2800      	cmp	r0, #0
    236e:	d0ae      	beq.n	22ce <prvTimerTask+0x66>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2370:	0030      	movs	r0, r6
    2372:	6a73      	ldr	r3, [r6, #36]	; 0x24
    2374:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    2376:	69f3      	ldr	r3, [r6, #28]
    2378:	2b01      	cmp	r3, #1
    237a:	d1a8      	bne.n	22ce <prvTimerTask+0x66>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    237c:	9b06      	ldr	r3, [sp, #24]
    237e:	69b1      	ldr	r1, [r6, #24]
    2380:	468c      	mov	ip, r1
    2382:	4463      	add	r3, ip
    2384:	001a      	movs	r2, r3
    2386:	2300      	movs	r3, #0
    2388:	9300      	str	r3, [sp, #0]
    238a:	2100      	movs	r1, #0
    238c:	0030      	movs	r0, r6
    238e:	4c17      	ldr	r4, [pc, #92]	; (23ec <prvTimerTask+0x184>)
    2390:	47a0      	blx	r4
							configASSERT( xResult );
    2392:	2800      	cmp	r0, #0
    2394:	d19b      	bne.n	22ce <prvTimerTask+0x66>
    2396:	b672      	cpsid	i
    2398:	e7fe      	b.n	2398 <prvTimerTask+0x130>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    239a:	9906      	ldr	r1, [sp, #24]
    239c:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    239e:	2900      	cmp	r1, #0
    23a0:	d006      	beq.n	23b0 <prvTimerTask+0x148>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    23a2:	1841      	adds	r1, r0, r1
    23a4:	0003      	movs	r3, r0
    23a6:	0002      	movs	r2, r0
    23a8:	0030      	movs	r0, r6
    23aa:	4c0f      	ldr	r4, [pc, #60]	; (23e8 <prvTimerTask+0x180>)
    23ac:	47a0      	blx	r4
    23ae:	e78e      	b.n	22ce <prvTimerTask+0x66>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    23b0:	b672      	cpsid	i
    23b2:	e7fe      	b.n	23b2 <prvTimerTask+0x14a>
						vPortFree( pxTimer );
    23b4:	0030      	movs	r0, r6
    23b6:	4b0f      	ldr	r3, [pc, #60]	; (23f4 <prvTimerTask+0x18c>)
    23b8:	4798      	blx	r3
    23ba:	e788      	b.n	22ce <prvTimerTask+0x66>
    23bc:	00002e3d 	.word	0x00002e3d
    23c0:	00001097 	.word	0x00001097
    23c4:	20003090 	.word	0x20003090
    23c8:	00001b01 	.word	0x00001b01
    23cc:	000021b1 	.word	0x000021b1
    23d0:	20003094 	.word	0x20003094
    23d4:	200030c4 	.word	0x200030c4
    23d8:	00001711 	.word	0x00001711
    23dc:	00001c3d 	.word	0x00001c3d
    23e0:	000015bd 	.word	0x000015bd
    23e4:	00003144 	.word	0x00003144
    23e8:	00002055 	.word	0x00002055
    23ec:	00002145 	.word	0x00002145
    23f0:	00000ce1 	.word	0x00000ce1
    23f4:	00000e2d 	.word	0x00000e2d

000023f8 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    23f8:	4b0c      	ldr	r3, [pc, #48]	; (242c <cpu_irq_enter_critical+0x34>)
    23fa:	681b      	ldr	r3, [r3, #0]
    23fc:	2b00      	cmp	r3, #0
    23fe:	d106      	bne.n	240e <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2400:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    2404:	2b00      	cmp	r3, #0
    2406:	d007      	beq.n	2418 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    2408:	2200      	movs	r2, #0
    240a:	4b09      	ldr	r3, [pc, #36]	; (2430 <cpu_irq_enter_critical+0x38>)
    240c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    240e:	4a07      	ldr	r2, [pc, #28]	; (242c <cpu_irq_enter_critical+0x34>)
    2410:	6813      	ldr	r3, [r2, #0]
    2412:	3301      	adds	r3, #1
    2414:	6013      	str	r3, [r2, #0]
}
    2416:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    2418:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    241a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    241e:	2200      	movs	r2, #0
    2420:	4b04      	ldr	r3, [pc, #16]	; (2434 <cpu_irq_enter_critical+0x3c>)
    2422:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    2424:	3201      	adds	r2, #1
    2426:	4b02      	ldr	r3, [pc, #8]	; (2430 <cpu_irq_enter_critical+0x38>)
    2428:	701a      	strb	r2, [r3, #0]
    242a:	e7f0      	b.n	240e <cpu_irq_enter_critical+0x16>
    242c:	200030cc 	.word	0x200030cc
    2430:	200030d0 	.word	0x200030d0
    2434:	20000004 	.word	0x20000004

00002438 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2438:	4b08      	ldr	r3, [pc, #32]	; (245c <cpu_irq_leave_critical+0x24>)
    243a:	681a      	ldr	r2, [r3, #0]
    243c:	3a01      	subs	r2, #1
    243e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2440:	681b      	ldr	r3, [r3, #0]
    2442:	2b00      	cmp	r3, #0
    2444:	d109      	bne.n	245a <cpu_irq_leave_critical+0x22>
    2446:	4b06      	ldr	r3, [pc, #24]	; (2460 <cpu_irq_leave_critical+0x28>)
    2448:	781b      	ldrb	r3, [r3, #0]
    244a:	2b00      	cmp	r3, #0
    244c:	d005      	beq.n	245a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    244e:	2201      	movs	r2, #1
    2450:	4b04      	ldr	r3, [pc, #16]	; (2464 <cpu_irq_leave_critical+0x2c>)
    2452:	701a      	strb	r2, [r3, #0]
    2454:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2458:	b662      	cpsie	i
	}
}
    245a:	4770      	bx	lr
    245c:	200030cc 	.word	0x200030cc
    2460:	200030d0 	.word	0x200030d0
    2464:	20000004 	.word	0x20000004

00002468 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    2468:	b5f0      	push	{r4, r5, r6, r7, lr}
    246a:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    246c:	ac01      	add	r4, sp, #4
    246e:	2501      	movs	r5, #1
    2470:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    2472:	2700      	movs	r7, #0
    2474:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    2476:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    2478:	0021      	movs	r1, r4
    247a:	2017      	movs	r0, #23
    247c:	4e06      	ldr	r6, [pc, #24]	; (2498 <system_board_init+0x30>)
    247e:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2480:	2280      	movs	r2, #128	; 0x80
    2482:	0412      	lsls	r2, r2, #16
    2484:	4b05      	ldr	r3, [pc, #20]	; (249c <system_board_init+0x34>)
    2486:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    2488:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    248a:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    248c:	0021      	movs	r1, r4
    248e:	2037      	movs	r0, #55	; 0x37
    2490:	47b0      	blx	r6
}
    2492:	b003      	add	sp, #12
    2494:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2496:	46c0      	nop			; (mov r8, r8)
    2498:	000024a1 	.word	0x000024a1
    249c:	41004400 	.word	0x41004400

000024a0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    24a0:	b500      	push	{lr}
    24a2:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    24a4:	ab01      	add	r3, sp, #4
    24a6:	2280      	movs	r2, #128	; 0x80
    24a8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    24aa:	780a      	ldrb	r2, [r1, #0]
    24ac:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    24ae:	784a      	ldrb	r2, [r1, #1]
    24b0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    24b2:	788a      	ldrb	r2, [r1, #2]
    24b4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    24b6:	0019      	movs	r1, r3
    24b8:	4b01      	ldr	r3, [pc, #4]	; (24c0 <port_pin_set_config+0x20>)
    24ba:	4798      	blx	r3
}
    24bc:	b003      	add	sp, #12
    24be:	bd00      	pop	{pc}
    24c0:	00002c05 	.word	0x00002c05

000024c4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    24c4:	b510      	push	{r4, lr}
	switch (clock_source) {
    24c6:	2808      	cmp	r0, #8
    24c8:	d803      	bhi.n	24d2 <system_clock_source_get_hz+0xe>
    24ca:	0080      	lsls	r0, r0, #2
    24cc:	4b1c      	ldr	r3, [pc, #112]	; (2540 <system_clock_source_get_hz+0x7c>)
    24ce:	581b      	ldr	r3, [r3, r0]
    24d0:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    24d2:	2000      	movs	r0, #0
    24d4:	e032      	b.n	253c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    24d6:	4b1b      	ldr	r3, [pc, #108]	; (2544 <system_clock_source_get_hz+0x80>)
    24d8:	6918      	ldr	r0, [r3, #16]
    24da:	e02f      	b.n	253c <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    24dc:	4b1a      	ldr	r3, [pc, #104]	; (2548 <system_clock_source_get_hz+0x84>)
    24de:	6a1b      	ldr	r3, [r3, #32]
    24e0:	059b      	lsls	r3, r3, #22
    24e2:	0f9b      	lsrs	r3, r3, #30
    24e4:	4819      	ldr	r0, [pc, #100]	; (254c <system_clock_source_get_hz+0x88>)
    24e6:	40d8      	lsrs	r0, r3
    24e8:	e028      	b.n	253c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    24ea:	4b16      	ldr	r3, [pc, #88]	; (2544 <system_clock_source_get_hz+0x80>)
    24ec:	6958      	ldr	r0, [r3, #20]
    24ee:	e025      	b.n	253c <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    24f0:	4b14      	ldr	r3, [pc, #80]	; (2544 <system_clock_source_get_hz+0x80>)
    24f2:	681b      	ldr	r3, [r3, #0]
			return 0;
    24f4:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    24f6:	079b      	lsls	r3, r3, #30
    24f8:	d520      	bpl.n	253c <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    24fa:	4913      	ldr	r1, [pc, #76]	; (2548 <system_clock_source_get_hz+0x84>)
    24fc:	2210      	movs	r2, #16
    24fe:	68cb      	ldr	r3, [r1, #12]
    2500:	421a      	tst	r2, r3
    2502:	d0fc      	beq.n	24fe <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    2504:	4b0f      	ldr	r3, [pc, #60]	; (2544 <system_clock_source_get_hz+0x80>)
    2506:	681a      	ldr	r2, [r3, #0]
    2508:	2324      	movs	r3, #36	; 0x24
    250a:	4013      	ands	r3, r2
    250c:	2b04      	cmp	r3, #4
    250e:	d001      	beq.n	2514 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    2510:	480f      	ldr	r0, [pc, #60]	; (2550 <system_clock_source_get_hz+0x8c>)
    2512:	e013      	b.n	253c <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2514:	2000      	movs	r0, #0
    2516:	4b0f      	ldr	r3, [pc, #60]	; (2554 <system_clock_source_get_hz+0x90>)
    2518:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    251a:	4b0a      	ldr	r3, [pc, #40]	; (2544 <system_clock_source_get_hz+0x80>)
    251c:	689b      	ldr	r3, [r3, #8]
    251e:	041b      	lsls	r3, r3, #16
    2520:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2522:	4358      	muls	r0, r3
    2524:	e00a      	b.n	253c <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2526:	2350      	movs	r3, #80	; 0x50
    2528:	4a07      	ldr	r2, [pc, #28]	; (2548 <system_clock_source_get_hz+0x84>)
    252a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    252c:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    252e:	075b      	lsls	r3, r3, #29
    2530:	d504      	bpl.n	253c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    2532:	4b04      	ldr	r3, [pc, #16]	; (2544 <system_clock_source_get_hz+0x80>)
    2534:	68d8      	ldr	r0, [r3, #12]
    2536:	e001      	b.n	253c <system_clock_source_get_hz+0x78>
		return 32768UL;
    2538:	2080      	movs	r0, #128	; 0x80
    253a:	0200      	lsls	r0, r0, #8
	}
}
    253c:	bd10      	pop	{r4, pc}
    253e:	46c0      	nop			; (mov r8, r8)
    2540:	00003174 	.word	0x00003174
    2544:	200030d4 	.word	0x200030d4
    2548:	40000800 	.word	0x40000800
    254c:	007a1200 	.word	0x007a1200
    2550:	02dc6c00 	.word	0x02dc6c00
    2554:	00002b29 	.word	0x00002b29

00002558 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2558:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    255a:	490c      	ldr	r1, [pc, #48]	; (258c <system_clock_source_osc8m_set_config+0x34>)
    255c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    255e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2560:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    2562:	7840      	ldrb	r0, [r0, #1]
    2564:	2201      	movs	r2, #1
    2566:	4010      	ands	r0, r2
    2568:	0180      	lsls	r0, r0, #6
    256a:	2640      	movs	r6, #64	; 0x40
    256c:	43b3      	bics	r3, r6
    256e:	4303      	orrs	r3, r0
    2570:	402a      	ands	r2, r5
    2572:	01d2      	lsls	r2, r2, #7
    2574:	2080      	movs	r0, #128	; 0x80
    2576:	4383      	bics	r3, r0
    2578:	4313      	orrs	r3, r2
    257a:	2203      	movs	r2, #3
    257c:	4022      	ands	r2, r4
    257e:	0212      	lsls	r2, r2, #8
    2580:	4803      	ldr	r0, [pc, #12]	; (2590 <system_clock_source_osc8m_set_config+0x38>)
    2582:	4003      	ands	r3, r0
    2584:	4313      	orrs	r3, r2
    2586:	620b      	str	r3, [r1, #32]
}
    2588:	bd70      	pop	{r4, r5, r6, pc}
    258a:	46c0      	nop			; (mov r8, r8)
    258c:	40000800 	.word	0x40000800
    2590:	fffffcff 	.word	0xfffffcff

00002594 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    2594:	b5f0      	push	{r4, r5, r6, r7, lr}
    2596:	46de      	mov	lr, fp
    2598:	4657      	mov	r7, sl
    259a:	464e      	mov	r6, r9
    259c:	4645      	mov	r5, r8
    259e:	b5e0      	push	{r5, r6, r7, lr}
    25a0:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    25a2:	4b26      	ldr	r3, [pc, #152]	; (263c <system_clock_source_xosc32k_set_config+0xa8>)
    25a4:	469b      	mov	fp, r3
    25a6:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    25a8:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    25aa:	7800      	ldrb	r0, [r0, #0]
    25ac:	4242      	negs	r2, r0
    25ae:	4142      	adcs	r2, r0
    25b0:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    25b2:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    25b4:	78ca      	ldrb	r2, [r1, #3]
    25b6:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    25b8:	790a      	ldrb	r2, [r1, #4]
    25ba:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    25bc:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    25be:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    25c0:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    25c2:	688a      	ldr	r2, [r1, #8]
    25c4:	491e      	ldr	r1, [pc, #120]	; (2640 <system_clock_source_xosc32k_set_config+0xac>)
    25c6:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    25c8:	2101      	movs	r1, #1
    25ca:	464a      	mov	r2, r9
    25cc:	0092      	lsls	r2, r2, #2
    25ce:	4691      	mov	r9, r2
    25d0:	2204      	movs	r2, #4
    25d2:	4393      	bics	r3, r2
    25d4:	464a      	mov	r2, r9
    25d6:	4313      	orrs	r3, r2
    25d8:	4642      	mov	r2, r8
    25da:	400a      	ands	r2, r1
    25dc:	00d2      	lsls	r2, r2, #3
    25de:	4690      	mov	r8, r2
    25e0:	2208      	movs	r2, #8
    25e2:	4393      	bics	r3, r2
    25e4:	4642      	mov	r2, r8
    25e6:	4313      	orrs	r3, r2
    25e8:	4662      	mov	r2, ip
    25ea:	400a      	ands	r2, r1
    25ec:	0112      	lsls	r2, r2, #4
    25ee:	4694      	mov	ip, r2
    25f0:	2210      	movs	r2, #16
    25f2:	4393      	bics	r3, r2
    25f4:	4662      	mov	r2, ip
    25f6:	4313      	orrs	r3, r2
    25f8:	4008      	ands	r0, r1
    25fa:	0140      	lsls	r0, r0, #5
    25fc:	2220      	movs	r2, #32
    25fe:	4393      	bics	r3, r2
    2600:	4303      	orrs	r3, r0
    2602:	400f      	ands	r7, r1
    2604:	01bf      	lsls	r7, r7, #6
    2606:	2040      	movs	r0, #64	; 0x40
    2608:	4383      	bics	r3, r0
    260a:	433b      	orrs	r3, r7
    260c:	400e      	ands	r6, r1
    260e:	01f6      	lsls	r6, r6, #7
    2610:	3040      	adds	r0, #64	; 0x40
    2612:	4383      	bics	r3, r0
    2614:	4333      	orrs	r3, r6
    2616:	3879      	subs	r0, #121	; 0x79
    2618:	4005      	ands	r5, r0
    261a:	022d      	lsls	r5, r5, #8
    261c:	4809      	ldr	r0, [pc, #36]	; (2644 <system_clock_source_xosc32k_set_config+0xb0>)
    261e:	4003      	ands	r3, r0
    2620:	432b      	orrs	r3, r5
    2622:	4021      	ands	r1, r4
    2624:	0309      	lsls	r1, r1, #12
    2626:	4808      	ldr	r0, [pc, #32]	; (2648 <system_clock_source_xosc32k_set_config+0xb4>)
    2628:	4003      	ands	r3, r0
    262a:	430b      	orrs	r3, r1
    262c:	465a      	mov	r2, fp
    262e:	8293      	strh	r3, [r2, #20]
}
    2630:	bc3c      	pop	{r2, r3, r4, r5}
    2632:	4690      	mov	r8, r2
    2634:	4699      	mov	r9, r3
    2636:	46a2      	mov	sl, r4
    2638:	46ab      	mov	fp, r5
    263a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    263c:	40000800 	.word	0x40000800
    2640:	200030d4 	.word	0x200030d4
    2644:	fffff8ff 	.word	0xfffff8ff
    2648:	ffffefff 	.word	0xffffefff

0000264c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    264c:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    264e:	7a03      	ldrb	r3, [r0, #8]
    2650:	069b      	lsls	r3, r3, #26
    2652:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    2654:	8942      	ldrh	r2, [r0, #10]
    2656:	0592      	lsls	r2, r2, #22
    2658:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    265a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    265c:	4918      	ldr	r1, [pc, #96]	; (26c0 <system_clock_source_dfll_set_config+0x74>)
    265e:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2660:	7983      	ldrb	r3, [r0, #6]
    2662:	79c2      	ldrb	r2, [r0, #7]
    2664:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    2666:	8842      	ldrh	r2, [r0, #2]
    2668:	8884      	ldrh	r4, [r0, #4]
    266a:	4322      	orrs	r2, r4
    266c:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    266e:	7842      	ldrb	r2, [r0, #1]
    2670:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    2672:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    2674:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    2676:	7803      	ldrb	r3, [r0, #0]
    2678:	2b04      	cmp	r3, #4
    267a:	d011      	beq.n	26a0 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    267c:	2b20      	cmp	r3, #32
    267e:	d10e      	bne.n	269e <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2680:	7b03      	ldrb	r3, [r0, #12]
    2682:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2684:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2686:	4313      	orrs	r3, r2
    2688:	89c2      	ldrh	r2, [r0, #14]
    268a:	0412      	lsls	r2, r2, #16
    268c:	490d      	ldr	r1, [pc, #52]	; (26c4 <system_clock_source_dfll_set_config+0x78>)
    268e:	400a      	ands	r2, r1
    2690:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2692:	4a0b      	ldr	r2, [pc, #44]	; (26c0 <system_clock_source_dfll_set_config+0x74>)
    2694:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    2696:	6811      	ldr	r1, [r2, #0]
    2698:	4b0b      	ldr	r3, [pc, #44]	; (26c8 <system_clock_source_dfll_set_config+0x7c>)
    269a:	430b      	orrs	r3, r1
    269c:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    269e:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    26a0:	7b03      	ldrb	r3, [r0, #12]
    26a2:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    26a4:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    26a6:	4313      	orrs	r3, r2
    26a8:	89c2      	ldrh	r2, [r0, #14]
    26aa:	0412      	lsls	r2, r2, #16
    26ac:	4905      	ldr	r1, [pc, #20]	; (26c4 <system_clock_source_dfll_set_config+0x78>)
    26ae:	400a      	ands	r2, r1
    26b0:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    26b2:	4a03      	ldr	r2, [pc, #12]	; (26c0 <system_clock_source_dfll_set_config+0x74>)
    26b4:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    26b6:	6813      	ldr	r3, [r2, #0]
    26b8:	2104      	movs	r1, #4
    26ba:	430b      	orrs	r3, r1
    26bc:	6013      	str	r3, [r2, #0]
    26be:	e7ee      	b.n	269e <system_clock_source_dfll_set_config+0x52>
    26c0:	200030d4 	.word	0x200030d4
    26c4:	03ff0000 	.word	0x03ff0000
    26c8:	00000424 	.word	0x00000424

000026cc <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    26cc:	2808      	cmp	r0, #8
    26ce:	d803      	bhi.n	26d8 <system_clock_source_enable+0xc>
    26d0:	0080      	lsls	r0, r0, #2
    26d2:	4b25      	ldr	r3, [pc, #148]	; (2768 <system_clock_source_enable+0x9c>)
    26d4:	581b      	ldr	r3, [r3, r0]
    26d6:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    26d8:	2017      	movs	r0, #23
    26da:	e044      	b.n	2766 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    26dc:	4a23      	ldr	r2, [pc, #140]	; (276c <system_clock_source_enable+0xa0>)
    26de:	6a13      	ldr	r3, [r2, #32]
    26e0:	2102      	movs	r1, #2
    26e2:	430b      	orrs	r3, r1
    26e4:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    26e6:	2000      	movs	r0, #0
    26e8:	e03d      	b.n	2766 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    26ea:	4a20      	ldr	r2, [pc, #128]	; (276c <system_clock_source_enable+0xa0>)
    26ec:	6993      	ldr	r3, [r2, #24]
    26ee:	2102      	movs	r1, #2
    26f0:	430b      	orrs	r3, r1
    26f2:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    26f4:	2000      	movs	r0, #0
		break;
    26f6:	e036      	b.n	2766 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    26f8:	4a1c      	ldr	r2, [pc, #112]	; (276c <system_clock_source_enable+0xa0>)
    26fa:	8a13      	ldrh	r3, [r2, #16]
    26fc:	2102      	movs	r1, #2
    26fe:	430b      	orrs	r3, r1
    2700:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2702:	2000      	movs	r0, #0
		break;
    2704:	e02f      	b.n	2766 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    2706:	4a19      	ldr	r2, [pc, #100]	; (276c <system_clock_source_enable+0xa0>)
    2708:	8a93      	ldrh	r3, [r2, #20]
    270a:	2102      	movs	r1, #2
    270c:	430b      	orrs	r3, r1
    270e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2710:	2000      	movs	r0, #0
		break;
    2712:	e028      	b.n	2766 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2714:	4916      	ldr	r1, [pc, #88]	; (2770 <system_clock_source_enable+0xa4>)
    2716:	680b      	ldr	r3, [r1, #0]
    2718:	2202      	movs	r2, #2
    271a:	4313      	orrs	r3, r2
    271c:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    271e:	4b13      	ldr	r3, [pc, #76]	; (276c <system_clock_source_enable+0xa0>)
    2720:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2722:	0019      	movs	r1, r3
    2724:	320e      	adds	r2, #14
    2726:	68cb      	ldr	r3, [r1, #12]
    2728:	421a      	tst	r2, r3
    272a:	d0fc      	beq.n	2726 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    272c:	4a10      	ldr	r2, [pc, #64]	; (2770 <system_clock_source_enable+0xa4>)
    272e:	6891      	ldr	r1, [r2, #8]
    2730:	4b0e      	ldr	r3, [pc, #56]	; (276c <system_clock_source_enable+0xa0>)
    2732:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2734:	6852      	ldr	r2, [r2, #4]
    2736:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    2738:	2200      	movs	r2, #0
    273a:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    273c:	0019      	movs	r1, r3
    273e:	3210      	adds	r2, #16
    2740:	68cb      	ldr	r3, [r1, #12]
    2742:	421a      	tst	r2, r3
    2744:	d0fc      	beq.n	2740 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2746:	4b0a      	ldr	r3, [pc, #40]	; (2770 <system_clock_source_enable+0xa4>)
    2748:	681b      	ldr	r3, [r3, #0]
    274a:	b29b      	uxth	r3, r3
    274c:	4a07      	ldr	r2, [pc, #28]	; (276c <system_clock_source_enable+0xa0>)
    274e:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    2750:	2000      	movs	r0, #0
    2752:	e008      	b.n	2766 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2754:	4905      	ldr	r1, [pc, #20]	; (276c <system_clock_source_enable+0xa0>)
    2756:	2244      	movs	r2, #68	; 0x44
    2758:	5c8b      	ldrb	r3, [r1, r2]
    275a:	2002      	movs	r0, #2
    275c:	4303      	orrs	r3, r0
    275e:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2760:	2000      	movs	r0, #0
		break;
    2762:	e000      	b.n	2766 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    2764:	2000      	movs	r0, #0
}
    2766:	4770      	bx	lr
    2768:	00003198 	.word	0x00003198
    276c:	40000800 	.word	0x40000800
    2770:	200030d4 	.word	0x200030d4

00002774 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2774:	b5f0      	push	{r4, r5, r6, r7, lr}
    2776:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2778:	22c2      	movs	r2, #194	; 0xc2
    277a:	00d2      	lsls	r2, r2, #3
    277c:	4b47      	ldr	r3, [pc, #284]	; (289c <system_clock_init+0x128>)
    277e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2780:	4a47      	ldr	r2, [pc, #284]	; (28a0 <system_clock_init+0x12c>)
    2782:	6853      	ldr	r3, [r2, #4]
    2784:	211e      	movs	r1, #30
    2786:	438b      	bics	r3, r1
    2788:	391a      	subs	r1, #26
    278a:	430b      	orrs	r3, r1
    278c:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    278e:	2202      	movs	r2, #2
    2790:	ab01      	add	r3, sp, #4
    2792:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2794:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2796:	4d43      	ldr	r5, [pc, #268]	; (28a4 <system_clock_init+0x130>)
    2798:	b2e0      	uxtb	r0, r4
    279a:	a901      	add	r1, sp, #4
    279c:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    279e:	3401      	adds	r4, #1
    27a0:	2c25      	cmp	r4, #37	; 0x25
    27a2:	d1f9      	bne.n	2798 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    27a4:	a80a      	add	r0, sp, #40	; 0x28
    27a6:	2300      	movs	r3, #0
    27a8:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    27aa:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    27ac:	2280      	movs	r2, #128	; 0x80
    27ae:	0212      	lsls	r2, r2, #8
    27b0:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    27b2:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    27b4:	2201      	movs	r2, #1
    27b6:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    27b8:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    27ba:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    27bc:	3202      	adds	r2, #2
    27be:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    27c0:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    27c2:	4b39      	ldr	r3, [pc, #228]	; (28a8 <system_clock_init+0x134>)
    27c4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    27c6:	2005      	movs	r0, #5
    27c8:	4b38      	ldr	r3, [pc, #224]	; (28ac <system_clock_init+0x138>)
    27ca:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    27cc:	4933      	ldr	r1, [pc, #204]	; (289c <system_clock_init+0x128>)
    27ce:	2202      	movs	r2, #2
    27d0:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    27d2:	421a      	tst	r2, r3
    27d4:	d0fc      	beq.n	27d0 <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    27d6:	4a31      	ldr	r2, [pc, #196]	; (289c <system_clock_init+0x128>)
    27d8:	8a93      	ldrh	r3, [r2, #20]
    27da:	2180      	movs	r1, #128	; 0x80
    27dc:	430b      	orrs	r3, r1
    27de:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    27e0:	ab05      	add	r3, sp, #20
    27e2:	2100      	movs	r1, #0
    27e4:	2200      	movs	r2, #0
    27e6:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    27e8:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    27ea:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    27ec:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    27ee:	313f      	adds	r1, #63	; 0x3f
    27f0:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    27f2:	393b      	subs	r1, #59	; 0x3b
    27f4:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    27f6:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    27f8:	4b2d      	ldr	r3, [pc, #180]	; (28b0 <system_clock_init+0x13c>)
    27fa:	681b      	ldr	r3, [r3, #0]
    27fc:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    27fe:	2b3f      	cmp	r3, #63	; 0x3f
    2800:	d04a      	beq.n	2898 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    2802:	a805      	add	r0, sp, #20
    2804:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    2806:	4b2b      	ldr	r3, [pc, #172]	; (28b4 <system_clock_init+0x140>)
    2808:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    280a:	2307      	movs	r3, #7
    280c:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    280e:	3338      	adds	r3, #56	; 0x38
    2810:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    2812:	4b29      	ldr	r3, [pc, #164]	; (28b8 <system_clock_init+0x144>)
    2814:	4798      	blx	r3
	config->run_in_standby  = false;
    2816:	a804      	add	r0, sp, #16
    2818:	2500      	movs	r5, #0
    281a:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    281c:	2601      	movs	r6, #1
    281e:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    2820:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    2822:	4b26      	ldr	r3, [pc, #152]	; (28bc <system_clock_init+0x148>)
    2824:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    2826:	2006      	movs	r0, #6
    2828:	4f20      	ldr	r7, [pc, #128]	; (28ac <system_clock_init+0x138>)
    282a:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    282c:	4b24      	ldr	r3, [pc, #144]	; (28c0 <system_clock_init+0x14c>)
    282e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    2830:	ac01      	add	r4, sp, #4
    2832:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    2834:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    2836:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    2838:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    283a:	2305      	movs	r3, #5
    283c:	7023      	strb	r3, [r4, #0]
    283e:	0021      	movs	r1, r4
    2840:	2001      	movs	r0, #1
    2842:	4b20      	ldr	r3, [pc, #128]	; (28c4 <system_clock_init+0x150>)
    2844:	4798      	blx	r3
    2846:	2001      	movs	r0, #1
    2848:	4b1f      	ldr	r3, [pc, #124]	; (28c8 <system_clock_init+0x154>)
    284a:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    284c:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    284e:	0021      	movs	r1, r4
    2850:	2000      	movs	r0, #0
    2852:	4b14      	ldr	r3, [pc, #80]	; (28a4 <system_clock_init+0x130>)
    2854:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    2856:	2000      	movs	r0, #0
    2858:	4b1c      	ldr	r3, [pc, #112]	; (28cc <system_clock_init+0x158>)
    285a:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    285c:	2007      	movs	r0, #7
    285e:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2860:	490e      	ldr	r1, [pc, #56]	; (289c <system_clock_init+0x128>)
    2862:	22d0      	movs	r2, #208	; 0xd0
    2864:	68cb      	ldr	r3, [r1, #12]
    2866:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    2868:	2bd0      	cmp	r3, #208	; 0xd0
    286a:	d1fb      	bne.n	2864 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    286c:	4a18      	ldr	r2, [pc, #96]	; (28d0 <system_clock_init+0x15c>)
    286e:	2300      	movs	r3, #0
    2870:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    2872:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    2874:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    2876:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    2878:	a901      	add	r1, sp, #4
    287a:	2201      	movs	r2, #1
    287c:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    287e:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    2880:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    2882:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2884:	3307      	adds	r3, #7
    2886:	700b      	strb	r3, [r1, #0]
    2888:	2000      	movs	r0, #0
    288a:	4b0e      	ldr	r3, [pc, #56]	; (28c4 <system_clock_init+0x150>)
    288c:	4798      	blx	r3
    288e:	2000      	movs	r0, #0
    2890:	4b0d      	ldr	r3, [pc, #52]	; (28c8 <system_clock_init+0x154>)
    2892:	4798      	blx	r3
#endif
}
    2894:	b00f      	add	sp, #60	; 0x3c
    2896:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    2898:	3b20      	subs	r3, #32
    289a:	e7b2      	b.n	2802 <system_clock_init+0x8e>
    289c:	40000800 	.word	0x40000800
    28a0:	41004000 	.word	0x41004000
    28a4:	00002b0d 	.word	0x00002b0d
    28a8:	00002595 	.word	0x00002595
    28ac:	000026cd 	.word	0x000026cd
    28b0:	00806024 	.word	0x00806024
    28b4:	000005b9 	.word	0x000005b9
    28b8:	0000264d 	.word	0x0000264d
    28bc:	00002559 	.word	0x00002559
    28c0:	000028d5 	.word	0x000028d5
    28c4:	000028f9 	.word	0x000028f9
    28c8:	000029b1 	.word	0x000029b1
    28cc:	00002a81 	.word	0x00002a81
    28d0:	40000400 	.word	0x40000400

000028d4 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    28d4:	4a06      	ldr	r2, [pc, #24]	; (28f0 <system_gclk_init+0x1c>)
    28d6:	6993      	ldr	r3, [r2, #24]
    28d8:	2108      	movs	r1, #8
    28da:	430b      	orrs	r3, r1
    28dc:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    28de:	2201      	movs	r2, #1
    28e0:	4b04      	ldr	r3, [pc, #16]	; (28f4 <system_gclk_init+0x20>)
    28e2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    28e4:	0019      	movs	r1, r3
    28e6:	780b      	ldrb	r3, [r1, #0]
    28e8:	4213      	tst	r3, r2
    28ea:	d1fc      	bne.n	28e6 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    28ec:	4770      	bx	lr
    28ee:	46c0      	nop			; (mov r8, r8)
    28f0:	40000400 	.word	0x40000400
    28f4:	40000c00 	.word	0x40000c00

000028f8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    28f8:	b570      	push	{r4, r5, r6, lr}
    28fa:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    28fc:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    28fe:	780d      	ldrb	r5, [r1, #0]
    2900:	022d      	lsls	r5, r5, #8
    2902:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2904:	784b      	ldrb	r3, [r1, #1]
    2906:	2b00      	cmp	r3, #0
    2908:	d002      	beq.n	2910 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    290a:	2380      	movs	r3, #128	; 0x80
    290c:	02db      	lsls	r3, r3, #11
    290e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2910:	7a4b      	ldrb	r3, [r1, #9]
    2912:	2b00      	cmp	r3, #0
    2914:	d002      	beq.n	291c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2916:	2380      	movs	r3, #128	; 0x80
    2918:	031b      	lsls	r3, r3, #12
    291a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    291c:	6848      	ldr	r0, [r1, #4]
    291e:	2801      	cmp	r0, #1
    2920:	d910      	bls.n	2944 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2922:	1e43      	subs	r3, r0, #1
    2924:	4218      	tst	r0, r3
    2926:	d134      	bne.n	2992 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2928:	2802      	cmp	r0, #2
    292a:	d930      	bls.n	298e <system_gclk_gen_set_config+0x96>
    292c:	2302      	movs	r3, #2
    292e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2930:	3201      	adds	r2, #1
						mask <<= 1) {
    2932:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    2934:	4298      	cmp	r0, r3
    2936:	d8fb      	bhi.n	2930 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2938:	0212      	lsls	r2, r2, #8
    293a:	4332      	orrs	r2, r6
    293c:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    293e:	2380      	movs	r3, #128	; 0x80
    2940:	035b      	lsls	r3, r3, #13
    2942:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2944:	7a0b      	ldrb	r3, [r1, #8]
    2946:	2b00      	cmp	r3, #0
    2948:	d002      	beq.n	2950 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    294a:	2380      	movs	r3, #128	; 0x80
    294c:	039b      	lsls	r3, r3, #14
    294e:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2950:	4a13      	ldr	r2, [pc, #76]	; (29a0 <system_gclk_gen_set_config+0xa8>)
    2952:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    2954:	b25b      	sxtb	r3, r3
    2956:	2b00      	cmp	r3, #0
    2958:	dbfb      	blt.n	2952 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    295a:	4b12      	ldr	r3, [pc, #72]	; (29a4 <system_gclk_gen_set_config+0xac>)
    295c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    295e:	4b12      	ldr	r3, [pc, #72]	; (29a8 <system_gclk_gen_set_config+0xb0>)
    2960:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2962:	4a0f      	ldr	r2, [pc, #60]	; (29a0 <system_gclk_gen_set_config+0xa8>)
    2964:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    2966:	b25b      	sxtb	r3, r3
    2968:	2b00      	cmp	r3, #0
    296a:	dbfb      	blt.n	2964 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    296c:	4b0c      	ldr	r3, [pc, #48]	; (29a0 <system_gclk_gen_set_config+0xa8>)
    296e:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2970:	001a      	movs	r2, r3
    2972:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    2974:	b25b      	sxtb	r3, r3
    2976:	2b00      	cmp	r3, #0
    2978:	dbfb      	blt.n	2972 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    297a:	4a09      	ldr	r2, [pc, #36]	; (29a0 <system_gclk_gen_set_config+0xa8>)
    297c:	6853      	ldr	r3, [r2, #4]
    297e:	2180      	movs	r1, #128	; 0x80
    2980:	0249      	lsls	r1, r1, #9
    2982:	400b      	ands	r3, r1
    2984:	431d      	orrs	r5, r3
    2986:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    2988:	4b08      	ldr	r3, [pc, #32]	; (29ac <system_gclk_gen_set_config+0xb4>)
    298a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    298c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    298e:	2200      	movs	r2, #0
    2990:	e7d2      	b.n	2938 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    2992:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    2994:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2996:	2380      	movs	r3, #128	; 0x80
    2998:	029b      	lsls	r3, r3, #10
    299a:	431d      	orrs	r5, r3
    299c:	e7d2      	b.n	2944 <system_gclk_gen_set_config+0x4c>
    299e:	46c0      	nop			; (mov r8, r8)
    29a0:	40000c00 	.word	0x40000c00
    29a4:	000023f9 	.word	0x000023f9
    29a8:	40000c08 	.word	0x40000c08
    29ac:	00002439 	.word	0x00002439

000029b0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    29b0:	b510      	push	{r4, lr}
    29b2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    29b4:	4a0b      	ldr	r2, [pc, #44]	; (29e4 <system_gclk_gen_enable+0x34>)
    29b6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    29b8:	b25b      	sxtb	r3, r3
    29ba:	2b00      	cmp	r3, #0
    29bc:	dbfb      	blt.n	29b6 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    29be:	4b0a      	ldr	r3, [pc, #40]	; (29e8 <system_gclk_gen_enable+0x38>)
    29c0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    29c2:	4b0a      	ldr	r3, [pc, #40]	; (29ec <system_gclk_gen_enable+0x3c>)
    29c4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    29c6:	4a07      	ldr	r2, [pc, #28]	; (29e4 <system_gclk_gen_enable+0x34>)
    29c8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    29ca:	b25b      	sxtb	r3, r3
    29cc:	2b00      	cmp	r3, #0
    29ce:	dbfb      	blt.n	29c8 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    29d0:	4a04      	ldr	r2, [pc, #16]	; (29e4 <system_gclk_gen_enable+0x34>)
    29d2:	6851      	ldr	r1, [r2, #4]
    29d4:	2380      	movs	r3, #128	; 0x80
    29d6:	025b      	lsls	r3, r3, #9
    29d8:	430b      	orrs	r3, r1
    29da:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    29dc:	4b04      	ldr	r3, [pc, #16]	; (29f0 <system_gclk_gen_enable+0x40>)
    29de:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    29e0:	bd10      	pop	{r4, pc}
    29e2:	46c0      	nop			; (mov r8, r8)
    29e4:	40000c00 	.word	0x40000c00
    29e8:	000023f9 	.word	0x000023f9
    29ec:	40000c04 	.word	0x40000c04
    29f0:	00002439 	.word	0x00002439

000029f4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    29f4:	b570      	push	{r4, r5, r6, lr}
    29f6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    29f8:	4a1a      	ldr	r2, [pc, #104]	; (2a64 <system_gclk_gen_get_hz+0x70>)
    29fa:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    29fc:	b25b      	sxtb	r3, r3
    29fe:	2b00      	cmp	r3, #0
    2a00:	dbfb      	blt.n	29fa <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    2a02:	4b19      	ldr	r3, [pc, #100]	; (2a68 <system_gclk_gen_get_hz+0x74>)
    2a04:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2a06:	4b19      	ldr	r3, [pc, #100]	; (2a6c <system_gclk_gen_get_hz+0x78>)
    2a08:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2a0a:	4a16      	ldr	r2, [pc, #88]	; (2a64 <system_gclk_gen_get_hz+0x70>)
    2a0c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2a0e:	b25b      	sxtb	r3, r3
    2a10:	2b00      	cmp	r3, #0
    2a12:	dbfb      	blt.n	2a0c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2a14:	4e13      	ldr	r6, [pc, #76]	; (2a64 <system_gclk_gen_get_hz+0x70>)
    2a16:	6870      	ldr	r0, [r6, #4]
    2a18:	04c0      	lsls	r0, r0, #19
    2a1a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2a1c:	4b14      	ldr	r3, [pc, #80]	; (2a70 <system_gclk_gen_get_hz+0x7c>)
    2a1e:	4798      	blx	r3
    2a20:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2a22:	4b12      	ldr	r3, [pc, #72]	; (2a6c <system_gclk_gen_get_hz+0x78>)
    2a24:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    2a26:	6876      	ldr	r6, [r6, #4]
    2a28:	02f6      	lsls	r6, r6, #11
    2a2a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2a2c:	4b11      	ldr	r3, [pc, #68]	; (2a74 <system_gclk_gen_get_hz+0x80>)
    2a2e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2a30:	4a0c      	ldr	r2, [pc, #48]	; (2a64 <system_gclk_gen_get_hz+0x70>)
    2a32:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2a34:	b25b      	sxtb	r3, r3
    2a36:	2b00      	cmp	r3, #0
    2a38:	dbfb      	blt.n	2a32 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    2a3a:	4b0a      	ldr	r3, [pc, #40]	; (2a64 <system_gclk_gen_get_hz+0x70>)
    2a3c:	689c      	ldr	r4, [r3, #8]
    2a3e:	0224      	lsls	r4, r4, #8
    2a40:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    2a42:	4b0d      	ldr	r3, [pc, #52]	; (2a78 <system_gclk_gen_get_hz+0x84>)
    2a44:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2a46:	2e00      	cmp	r6, #0
    2a48:	d107      	bne.n	2a5a <system_gclk_gen_get_hz+0x66>
    2a4a:	2c01      	cmp	r4, #1
    2a4c:	d907      	bls.n	2a5e <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    2a4e:	0021      	movs	r1, r4
    2a50:	0028      	movs	r0, r5
    2a52:	4b0a      	ldr	r3, [pc, #40]	; (2a7c <system_gclk_gen_get_hz+0x88>)
    2a54:	4798      	blx	r3
    2a56:	0005      	movs	r5, r0
    2a58:	e001      	b.n	2a5e <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    2a5a:	3401      	adds	r4, #1
    2a5c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    2a5e:	0028      	movs	r0, r5
    2a60:	bd70      	pop	{r4, r5, r6, pc}
    2a62:	46c0      	nop			; (mov r8, r8)
    2a64:	40000c00 	.word	0x40000c00
    2a68:	000023f9 	.word	0x000023f9
    2a6c:	40000c04 	.word	0x40000c04
    2a70:	000024c5 	.word	0x000024c5
    2a74:	40000c08 	.word	0x40000c08
    2a78:	00002439 	.word	0x00002439
    2a7c:	00002e45 	.word	0x00002e45

00002a80 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2a80:	b510      	push	{r4, lr}
    2a82:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2a84:	4b06      	ldr	r3, [pc, #24]	; (2aa0 <system_gclk_chan_enable+0x20>)
    2a86:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2a88:	4b06      	ldr	r3, [pc, #24]	; (2aa4 <system_gclk_chan_enable+0x24>)
    2a8a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2a8c:	4a06      	ldr	r2, [pc, #24]	; (2aa8 <system_gclk_chan_enable+0x28>)
    2a8e:	8853      	ldrh	r3, [r2, #2]
    2a90:	2180      	movs	r1, #128	; 0x80
    2a92:	01c9      	lsls	r1, r1, #7
    2a94:	430b      	orrs	r3, r1
    2a96:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    2a98:	4b04      	ldr	r3, [pc, #16]	; (2aac <system_gclk_chan_enable+0x2c>)
    2a9a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2a9c:	bd10      	pop	{r4, pc}
    2a9e:	46c0      	nop			; (mov r8, r8)
    2aa0:	000023f9 	.word	0x000023f9
    2aa4:	40000c02 	.word	0x40000c02
    2aa8:	40000c00 	.word	0x40000c00
    2aac:	00002439 	.word	0x00002439

00002ab0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2ab0:	b510      	push	{r4, lr}
    2ab2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2ab4:	4b0f      	ldr	r3, [pc, #60]	; (2af4 <system_gclk_chan_disable+0x44>)
    2ab6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2ab8:	4b0f      	ldr	r3, [pc, #60]	; (2af8 <system_gclk_chan_disable+0x48>)
    2aba:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2abc:	4a0f      	ldr	r2, [pc, #60]	; (2afc <system_gclk_chan_disable+0x4c>)
    2abe:	8853      	ldrh	r3, [r2, #2]
    2ac0:	051b      	lsls	r3, r3, #20
    2ac2:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2ac4:	8853      	ldrh	r3, [r2, #2]
    2ac6:	490e      	ldr	r1, [pc, #56]	; (2b00 <system_gclk_chan_disable+0x50>)
    2ac8:	400b      	ands	r3, r1
    2aca:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2acc:	8853      	ldrh	r3, [r2, #2]
    2ace:	490d      	ldr	r1, [pc, #52]	; (2b04 <system_gclk_chan_disable+0x54>)
    2ad0:	400b      	ands	r3, r1
    2ad2:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2ad4:	0011      	movs	r1, r2
    2ad6:	2280      	movs	r2, #128	; 0x80
    2ad8:	01d2      	lsls	r2, r2, #7
    2ada:	884b      	ldrh	r3, [r1, #2]
    2adc:	4213      	tst	r3, r2
    2ade:	d1fc      	bne.n	2ada <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2ae0:	4906      	ldr	r1, [pc, #24]	; (2afc <system_gclk_chan_disable+0x4c>)
    2ae2:	884a      	ldrh	r2, [r1, #2]
    2ae4:	0203      	lsls	r3, r0, #8
    2ae6:	4806      	ldr	r0, [pc, #24]	; (2b00 <system_gclk_chan_disable+0x50>)
    2ae8:	4002      	ands	r2, r0
    2aea:	4313      	orrs	r3, r2
    2aec:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    2aee:	4b06      	ldr	r3, [pc, #24]	; (2b08 <system_gclk_chan_disable+0x58>)
    2af0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2af2:	bd10      	pop	{r4, pc}
    2af4:	000023f9 	.word	0x000023f9
    2af8:	40000c02 	.word	0x40000c02
    2afc:	40000c00 	.word	0x40000c00
    2b00:	fffff0ff 	.word	0xfffff0ff
    2b04:	ffffbfff 	.word	0xffffbfff
    2b08:	00002439 	.word	0x00002439

00002b0c <system_gclk_chan_set_config>:
{
    2b0c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    2b0e:	780c      	ldrb	r4, [r1, #0]
    2b10:	0224      	lsls	r4, r4, #8
    2b12:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    2b14:	4b02      	ldr	r3, [pc, #8]	; (2b20 <system_gclk_chan_set_config+0x14>)
    2b16:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2b18:	b2a4      	uxth	r4, r4
    2b1a:	4b02      	ldr	r3, [pc, #8]	; (2b24 <system_gclk_chan_set_config+0x18>)
    2b1c:	805c      	strh	r4, [r3, #2]
}
    2b1e:	bd10      	pop	{r4, pc}
    2b20:	00002ab1 	.word	0x00002ab1
    2b24:	40000c00 	.word	0x40000c00

00002b28 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2b28:	b510      	push	{r4, lr}
    2b2a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2b2c:	4b06      	ldr	r3, [pc, #24]	; (2b48 <system_gclk_chan_get_hz+0x20>)
    2b2e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2b30:	4b06      	ldr	r3, [pc, #24]	; (2b4c <system_gclk_chan_get_hz+0x24>)
    2b32:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2b34:	4b06      	ldr	r3, [pc, #24]	; (2b50 <system_gclk_chan_get_hz+0x28>)
    2b36:	885c      	ldrh	r4, [r3, #2]
    2b38:	0524      	lsls	r4, r4, #20
    2b3a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    2b3c:	4b05      	ldr	r3, [pc, #20]	; (2b54 <system_gclk_chan_get_hz+0x2c>)
    2b3e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2b40:	0020      	movs	r0, r4
    2b42:	4b05      	ldr	r3, [pc, #20]	; (2b58 <system_gclk_chan_get_hz+0x30>)
    2b44:	4798      	blx	r3
}
    2b46:	bd10      	pop	{r4, pc}
    2b48:	000023f9 	.word	0x000023f9
    2b4c:	40000c02 	.word	0x40000c02
    2b50:	40000c00 	.word	0x40000c00
    2b54:	00002439 	.word	0x00002439
    2b58:	000029f5 	.word	0x000029f5

00002b5c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2b5c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2b5e:	78d3      	ldrb	r3, [r2, #3]
    2b60:	2b00      	cmp	r3, #0
    2b62:	d135      	bne.n	2bd0 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2b64:	7813      	ldrb	r3, [r2, #0]
    2b66:	2b80      	cmp	r3, #128	; 0x80
    2b68:	d029      	beq.n	2bbe <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2b6a:	061b      	lsls	r3, r3, #24
    2b6c:	2480      	movs	r4, #128	; 0x80
    2b6e:	0264      	lsls	r4, r4, #9
    2b70:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2b72:	7854      	ldrb	r4, [r2, #1]
    2b74:	2502      	movs	r5, #2
    2b76:	43ac      	bics	r4, r5
    2b78:	d106      	bne.n	2b88 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2b7a:	7894      	ldrb	r4, [r2, #2]
    2b7c:	2c00      	cmp	r4, #0
    2b7e:	d120      	bne.n	2bc2 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    2b80:	2480      	movs	r4, #128	; 0x80
    2b82:	02a4      	lsls	r4, r4, #10
    2b84:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2b86:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2b88:	7854      	ldrb	r4, [r2, #1]
    2b8a:	3c01      	subs	r4, #1
    2b8c:	2c01      	cmp	r4, #1
    2b8e:	d91c      	bls.n	2bca <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2b90:	040d      	lsls	r5, r1, #16
    2b92:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2b94:	24a0      	movs	r4, #160	; 0xa0
    2b96:	05e4      	lsls	r4, r4, #23
    2b98:	432c      	orrs	r4, r5
    2b9a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2b9c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2b9e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2ba0:	24d0      	movs	r4, #208	; 0xd0
    2ba2:	0624      	lsls	r4, r4, #24
    2ba4:	432c      	orrs	r4, r5
    2ba6:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2ba8:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2baa:	78d4      	ldrb	r4, [r2, #3]
    2bac:	2c00      	cmp	r4, #0
    2bae:	d122      	bne.n	2bf6 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2bb0:	035b      	lsls	r3, r3, #13
    2bb2:	d51c      	bpl.n	2bee <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2bb4:	7893      	ldrb	r3, [r2, #2]
    2bb6:	2b01      	cmp	r3, #1
    2bb8:	d01e      	beq.n	2bf8 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    2bba:	6141      	str	r1, [r0, #20]
    2bbc:	e017      	b.n	2bee <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    2bbe:	2300      	movs	r3, #0
    2bc0:	e7d7      	b.n	2b72 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2bc2:	24c0      	movs	r4, #192	; 0xc0
    2bc4:	02e4      	lsls	r4, r4, #11
    2bc6:	4323      	orrs	r3, r4
    2bc8:	e7dd      	b.n	2b86 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2bca:	4c0d      	ldr	r4, [pc, #52]	; (2c00 <_system_pinmux_config+0xa4>)
    2bcc:	4023      	ands	r3, r4
    2bce:	e7df      	b.n	2b90 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    2bd0:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2bd2:	040c      	lsls	r4, r1, #16
    2bd4:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2bd6:	23a0      	movs	r3, #160	; 0xa0
    2bd8:	05db      	lsls	r3, r3, #23
    2bda:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2bdc:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2bde:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2be0:	23d0      	movs	r3, #208	; 0xd0
    2be2:	061b      	lsls	r3, r3, #24
    2be4:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2be6:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    2be8:	78d3      	ldrb	r3, [r2, #3]
    2bea:	2b00      	cmp	r3, #0
    2bec:	d103      	bne.n	2bf6 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2bee:	7853      	ldrb	r3, [r2, #1]
    2bf0:	3b01      	subs	r3, #1
    2bf2:	2b01      	cmp	r3, #1
    2bf4:	d902      	bls.n	2bfc <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    2bf6:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    2bf8:	6181      	str	r1, [r0, #24]
    2bfa:	e7f8      	b.n	2bee <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    2bfc:	6081      	str	r1, [r0, #8]
}
    2bfe:	e7fa      	b.n	2bf6 <_system_pinmux_config+0x9a>
    2c00:	fffbffff 	.word	0xfffbffff

00002c04 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2c04:	b510      	push	{r4, lr}
    2c06:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2c08:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2c0a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2c0c:	2900      	cmp	r1, #0
    2c0e:	d104      	bne.n	2c1a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    2c10:	0943      	lsrs	r3, r0, #5
    2c12:	01db      	lsls	r3, r3, #7
    2c14:	4905      	ldr	r1, [pc, #20]	; (2c2c <system_pinmux_pin_set_config+0x28>)
    2c16:	468c      	mov	ip, r1
    2c18:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2c1a:	241f      	movs	r4, #31
    2c1c:	4020      	ands	r0, r4
    2c1e:	2101      	movs	r1, #1
    2c20:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    2c22:	0018      	movs	r0, r3
    2c24:	4b02      	ldr	r3, [pc, #8]	; (2c30 <system_pinmux_pin_set_config+0x2c>)
    2c26:	4798      	blx	r3
}
    2c28:	bd10      	pop	{r4, pc}
    2c2a:	46c0      	nop			; (mov r8, r8)
    2c2c:	41004400 	.word	0x41004400
    2c30:	00002b5d 	.word	0x00002b5d

00002c34 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2c34:	4770      	bx	lr
	...

00002c38 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2c38:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2c3a:	4b05      	ldr	r3, [pc, #20]	; (2c50 <system_init+0x18>)
    2c3c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2c3e:	4b05      	ldr	r3, [pc, #20]	; (2c54 <system_init+0x1c>)
    2c40:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2c42:	4b05      	ldr	r3, [pc, #20]	; (2c58 <system_init+0x20>)
    2c44:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2c46:	4b05      	ldr	r3, [pc, #20]	; (2c5c <system_init+0x24>)
    2c48:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2c4a:	4b05      	ldr	r3, [pc, #20]	; (2c60 <system_init+0x28>)
    2c4c:	4798      	blx	r3
}
    2c4e:	bd10      	pop	{r4, pc}
    2c50:	00002775 	.word	0x00002775
    2c54:	00002469 	.word	0x00002469
    2c58:	00002c35 	.word	0x00002c35
    2c5c:	00002c35 	.word	0x00002c35
    2c60:	00002c35 	.word	0x00002c35

00002c64 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2c64:	e7fe      	b.n	2c64 <Dummy_Handler>
	...

00002c68 <Reset_Handler>:
{
    2c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    2c6a:	4a2a      	ldr	r2, [pc, #168]	; (2d14 <Reset_Handler+0xac>)
    2c6c:	4b2a      	ldr	r3, [pc, #168]	; (2d18 <Reset_Handler+0xb0>)
    2c6e:	429a      	cmp	r2, r3
    2c70:	d011      	beq.n	2c96 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    2c72:	001a      	movs	r2, r3
    2c74:	4b29      	ldr	r3, [pc, #164]	; (2d1c <Reset_Handler+0xb4>)
    2c76:	429a      	cmp	r2, r3
    2c78:	d20d      	bcs.n	2c96 <Reset_Handler+0x2e>
    2c7a:	4a29      	ldr	r2, [pc, #164]	; (2d20 <Reset_Handler+0xb8>)
    2c7c:	3303      	adds	r3, #3
    2c7e:	1a9b      	subs	r3, r3, r2
    2c80:	089b      	lsrs	r3, r3, #2
    2c82:	3301      	adds	r3, #1
    2c84:	009b      	lsls	r3, r3, #2
    2c86:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2c88:	4823      	ldr	r0, [pc, #140]	; (2d18 <Reset_Handler+0xb0>)
    2c8a:	4922      	ldr	r1, [pc, #136]	; (2d14 <Reset_Handler+0xac>)
    2c8c:	588c      	ldr	r4, [r1, r2]
    2c8e:	5084      	str	r4, [r0, r2]
    2c90:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    2c92:	429a      	cmp	r2, r3
    2c94:	d1fa      	bne.n	2c8c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    2c96:	4a23      	ldr	r2, [pc, #140]	; (2d24 <Reset_Handler+0xbc>)
    2c98:	4b23      	ldr	r3, [pc, #140]	; (2d28 <Reset_Handler+0xc0>)
    2c9a:	429a      	cmp	r2, r3
    2c9c:	d20a      	bcs.n	2cb4 <Reset_Handler+0x4c>
    2c9e:	43d3      	mvns	r3, r2
    2ca0:	4921      	ldr	r1, [pc, #132]	; (2d28 <Reset_Handler+0xc0>)
    2ca2:	185b      	adds	r3, r3, r1
    2ca4:	2103      	movs	r1, #3
    2ca6:	438b      	bics	r3, r1
    2ca8:	3304      	adds	r3, #4
    2caa:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    2cac:	2100      	movs	r1, #0
    2cae:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2cb0:	4293      	cmp	r3, r2
    2cb2:	d1fc      	bne.n	2cae <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2cb4:	4a1d      	ldr	r2, [pc, #116]	; (2d2c <Reset_Handler+0xc4>)
    2cb6:	21ff      	movs	r1, #255	; 0xff
    2cb8:	4b1d      	ldr	r3, [pc, #116]	; (2d30 <Reset_Handler+0xc8>)
    2cba:	438b      	bics	r3, r1
    2cbc:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2cbe:	39fd      	subs	r1, #253	; 0xfd
    2cc0:	2390      	movs	r3, #144	; 0x90
    2cc2:	005b      	lsls	r3, r3, #1
    2cc4:	4a1b      	ldr	r2, [pc, #108]	; (2d34 <Reset_Handler+0xcc>)
    2cc6:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2cc8:	4a1b      	ldr	r2, [pc, #108]	; (2d38 <Reset_Handler+0xd0>)
    2cca:	78d3      	ldrb	r3, [r2, #3]
    2ccc:	2503      	movs	r5, #3
    2cce:	43ab      	bics	r3, r5
    2cd0:	2402      	movs	r4, #2
    2cd2:	4323      	orrs	r3, r4
    2cd4:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2cd6:	78d3      	ldrb	r3, [r2, #3]
    2cd8:	270c      	movs	r7, #12
    2cda:	43bb      	bics	r3, r7
    2cdc:	2608      	movs	r6, #8
    2cde:	4333      	orrs	r3, r6
    2ce0:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    2ce2:	4b16      	ldr	r3, [pc, #88]	; (2d3c <Reset_Handler+0xd4>)
    2ce4:	7b98      	ldrb	r0, [r3, #14]
    2ce6:	2230      	movs	r2, #48	; 0x30
    2ce8:	4390      	bics	r0, r2
    2cea:	2220      	movs	r2, #32
    2cec:	4310      	orrs	r0, r2
    2cee:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2cf0:	7b99      	ldrb	r1, [r3, #14]
    2cf2:	43b9      	bics	r1, r7
    2cf4:	4331      	orrs	r1, r6
    2cf6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2cf8:	7b9a      	ldrb	r2, [r3, #14]
    2cfa:	43aa      	bics	r2, r5
    2cfc:	4322      	orrs	r2, r4
    2cfe:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2d00:	4a0f      	ldr	r2, [pc, #60]	; (2d40 <Reset_Handler+0xd8>)
    2d02:	6853      	ldr	r3, [r2, #4]
    2d04:	2180      	movs	r1, #128	; 0x80
    2d06:	430b      	orrs	r3, r1
    2d08:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    2d0a:	4b0e      	ldr	r3, [pc, #56]	; (2d44 <Reset_Handler+0xdc>)
    2d0c:	4798      	blx	r3
        main();
    2d0e:	4b0e      	ldr	r3, [pc, #56]	; (2d48 <Reset_Handler+0xe0>)
    2d10:	4798      	blx	r3
    2d12:	e7fe      	b.n	2d12 <Reset_Handler+0xaa>
    2d14:	00003204 	.word	0x00003204
    2d18:	20000000 	.word	0x20000000
    2d1c:	2000006c 	.word	0x2000006c
    2d20:	20000004 	.word	0x20000004
    2d24:	2000006c 	.word	0x2000006c
    2d28:	20003558 	.word	0x20003558
    2d2c:	e000ed00 	.word	0xe000ed00
    2d30:	00000000 	.word	0x00000000
    2d34:	41007000 	.word	0x41007000
    2d38:	41005000 	.word	0x41005000
    2d3c:	41004800 	.word	0x41004800
    2d40:	41004000 	.word	0x41004000
    2d44:	00002fb1 	.word	0x00002fb1
    2d48:	00002e09 	.word	0x00002e09

00002d4c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    2d4c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    2d4e:	4a06      	ldr	r2, [pc, #24]	; (2d68 <_sbrk+0x1c>)
    2d50:	6812      	ldr	r2, [r2, #0]
    2d52:	2a00      	cmp	r2, #0
    2d54:	d004      	beq.n	2d60 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    2d56:	4a04      	ldr	r2, [pc, #16]	; (2d68 <_sbrk+0x1c>)
    2d58:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2d5a:	18c3      	adds	r3, r0, r3
    2d5c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    2d5e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    2d60:	4902      	ldr	r1, [pc, #8]	; (2d6c <_sbrk+0x20>)
    2d62:	4a01      	ldr	r2, [pc, #4]	; (2d68 <_sbrk+0x1c>)
    2d64:	6011      	str	r1, [r2, #0]
    2d66:	e7f6      	b.n	2d56 <_sbrk+0xa>
    2d68:	200030ec 	.word	0x200030ec
    2d6c:	20005558 	.word	0x20005558

00002d70 <LEDTask1>:

/******************************************************************************
* Function Implementations
******************************************************************************/

void LEDTask1(void * parameter) {
    2d70:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d72:	46c6      	mov	lr, r8
    2d74:	b500      	push	{lr}
    2d76:	4e07      	ldr	r6, [pc, #28]	; (2d94 <LEDTask1+0x24>)
    2d78:	2780      	movs	r7, #128	; 0x80
    2d7a:	043f      	lsls	r7, r7, #16
    2d7c:	46b8      	mov	r8, r7
    2d7e:	4643      	mov	r3, r8
    2d80:	61b3      	str	r3, [r6, #24]
	while(1) {
		port_pin_set_output_level(LED_0_PIN, true);
		vTaskDelay(500/portTICK_PERIOD_MS);
    2d82:	25fa      	movs	r5, #250	; 0xfa
    2d84:	006d      	lsls	r5, r5, #1
    2d86:	0028      	movs	r0, r5
    2d88:	4c03      	ldr	r4, [pc, #12]	; (2d98 <LEDTask1+0x28>)
    2d8a:	47a0      	blx	r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2d8c:	6177      	str	r7, [r6, #20]
		port_pin_set_output_level(LED_0_PIN, false);
		vTaskDelay(500/portTICK_PERIOD_MS);
    2d8e:	0028      	movs	r0, r5
    2d90:	47a0      	blx	r4
    2d92:	e7f4      	b.n	2d7e <LEDTask1+0xe>
    2d94:	41004400 	.word	0x41004400
    2d98:	00001d3d 	.word	0x00001d3d

00002d9c <LEDTask2>:
	}
}

void LEDTask2(void * parameter) {
    2d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d9e:	46c6      	mov	lr, r8
    2da0:	b500      	push	{lr}
		port_base->OUTSET.reg = pin_mask;
    2da2:	4e07      	ldr	r6, [pc, #28]	; (2dc0 <LEDTask2+0x24>)
    2da4:	2780      	movs	r7, #128	; 0x80
    2da6:	043f      	lsls	r7, r7, #16
    2da8:	46b8      	mov	r8, r7
    2daa:	4643      	mov	r3, r8
    2dac:	61b3      	str	r3, [r6, #24]
	while(1) {
		port_pin_set_output_level(LED_0_PIN, true);
		vTaskDelay(300/portTICK_PERIOD_MS);
    2dae:	2596      	movs	r5, #150	; 0x96
    2db0:	006d      	lsls	r5, r5, #1
    2db2:	0028      	movs	r0, r5
    2db4:	4c03      	ldr	r4, [pc, #12]	; (2dc4 <LEDTask2+0x28>)
    2db6:	47a0      	blx	r4
		port_base->OUTCLR.reg = pin_mask;
    2db8:	6177      	str	r7, [r6, #20]
		port_pin_set_output_level(LED_0_PIN, false);
		vTaskDelay(300/portTICK_PERIOD_MS);
    2dba:	0028      	movs	r0, r5
    2dbc:	47a0      	blx	r4
    2dbe:	e7f4      	b.n	2daa <LEDTask2+0xe>
    2dc0:	41004400 	.word	0x41004400
    2dc4:	00001d3d 	.word	0x00001d3d

00002dc8 <CreateTasks>:
	}
}

BaseType_t CreateTasks(void) {
    2dc8:	b570      	push	{r4, r5, r6, lr}
    2dca:	b082      	sub	sp, #8
	BaseType_t xReturn;
	
	xReturn = xTaskCreate(LEDTask1,
    2dcc:	2600      	movs	r6, #0
    2dce:	9601      	str	r6, [sp, #4]
    2dd0:	2501      	movs	r5, #1
    2dd2:	9500      	str	r5, [sp, #0]
    2dd4:	2300      	movs	r3, #0
    2dd6:	2282      	movs	r2, #130	; 0x82
    2dd8:	4906      	ldr	r1, [pc, #24]	; (2df4 <CreateTasks+0x2c>)
    2dda:	4807      	ldr	r0, [pc, #28]	; (2df8 <CreateTasks+0x30>)
    2ddc:	4c07      	ldr	r4, [pc, #28]	; (2dfc <CreateTasks+0x34>)
    2dde:	47a0      	blx	r4
						130,
						NULL,
						1,
						NULL);
	
	xReturn = xTaskCreate(LEDTask2,
    2de0:	9601      	str	r6, [sp, #4]
    2de2:	9500      	str	r5, [sp, #0]
    2de4:	2300      	movs	r3, #0
    2de6:	2282      	movs	r2, #130	; 0x82
    2de8:	4905      	ldr	r1, [pc, #20]	; (2e00 <CreateTasks+0x38>)
    2dea:	4806      	ldr	r0, [pc, #24]	; (2e04 <CreateTasks+0x3c>)
    2dec:	47a0      	blx	r4
						NULL,
						1,
						NULL);
	
	return xReturn;
}
    2dee:	b002      	add	sp, #8
    2df0:	bd70      	pop	{r4, r5, r6, pc}
    2df2:	46c0      	nop			; (mov r8, r8)
    2df4:	000031bc 	.word	0x000031bc
    2df8:	00002d71 	.word	0x00002d71
    2dfc:	000018a5 	.word	0x000018a5
    2e00:	000031c8 	.word	0x000031c8
    2e04:	00002d9d 	.word	0x00002d9d

00002e08 <main>:

int main (void)
{
    2e08:	b510      	push	{r4, lr}
	system_init();
    2e0a:	4b06      	ldr	r3, [pc, #24]	; (2e24 <main+0x1c>)
    2e0c:	4798      	blx	r3
	
	/* Initialize the UART console. */
	dUART_Initialize();
    2e0e:	4b06      	ldr	r3, [pc, #24]	; (2e28 <main+0x20>)
    2e10:	4798      	blx	r3
	
	dUART_WriteString("Hello World\r\n");
    2e12:	4806      	ldr	r0, [pc, #24]	; (2e2c <main+0x24>)
    2e14:	4b06      	ldr	r3, [pc, #24]	; (2e30 <main+0x28>)
    2e16:	4798      	blx	r3

	CreateTasks();
    2e18:	4b06      	ldr	r3, [pc, #24]	; (2e34 <main+0x2c>)
    2e1a:	4798      	blx	r3
				
	vTaskStartScheduler();
    2e1c:	4b06      	ldr	r3, [pc, #24]	; (2e38 <main+0x30>)
    2e1e:	4798      	blx	r3
}
    2e20:	2000      	movs	r0, #0
    2e22:	bd10      	pop	{r4, pc}
    2e24:	00002c39 	.word	0x00002c39
    2e28:	00000f0d 	.word	0x00000f0d
    2e2c:	000031d4 	.word	0x000031d4
    2e30:	00000e99 	.word	0x00000e99
    2e34:	00002dc9 	.word	0x00002dc9
    2e38:	00001a91 	.word	0x00001a91

00002e3c <vApplicationDaemonTaskStartupHook>:

void vApplicationDaemonTaskStartupHook(void)
{
}
    2e3c:	4770      	bx	lr

00002e3e <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook(void)
{
    2e3e:	e7fe      	b.n	2e3e <vApplicationMallocFailedHook>

00002e40 <vApplicationStackOverflowHook>:
	while(1);
}

void vApplicationStackOverflowHook(void)
{
    2e40:	e7fe      	b.n	2e40 <vApplicationStackOverflowHook>
	...

00002e44 <__udivsi3>:
    2e44:	2200      	movs	r2, #0
    2e46:	0843      	lsrs	r3, r0, #1
    2e48:	428b      	cmp	r3, r1
    2e4a:	d374      	bcc.n	2f36 <__udivsi3+0xf2>
    2e4c:	0903      	lsrs	r3, r0, #4
    2e4e:	428b      	cmp	r3, r1
    2e50:	d35f      	bcc.n	2f12 <__udivsi3+0xce>
    2e52:	0a03      	lsrs	r3, r0, #8
    2e54:	428b      	cmp	r3, r1
    2e56:	d344      	bcc.n	2ee2 <__udivsi3+0x9e>
    2e58:	0b03      	lsrs	r3, r0, #12
    2e5a:	428b      	cmp	r3, r1
    2e5c:	d328      	bcc.n	2eb0 <__udivsi3+0x6c>
    2e5e:	0c03      	lsrs	r3, r0, #16
    2e60:	428b      	cmp	r3, r1
    2e62:	d30d      	bcc.n	2e80 <__udivsi3+0x3c>
    2e64:	22ff      	movs	r2, #255	; 0xff
    2e66:	0209      	lsls	r1, r1, #8
    2e68:	ba12      	rev	r2, r2
    2e6a:	0c03      	lsrs	r3, r0, #16
    2e6c:	428b      	cmp	r3, r1
    2e6e:	d302      	bcc.n	2e76 <__udivsi3+0x32>
    2e70:	1212      	asrs	r2, r2, #8
    2e72:	0209      	lsls	r1, r1, #8
    2e74:	d065      	beq.n	2f42 <__udivsi3+0xfe>
    2e76:	0b03      	lsrs	r3, r0, #12
    2e78:	428b      	cmp	r3, r1
    2e7a:	d319      	bcc.n	2eb0 <__udivsi3+0x6c>
    2e7c:	e000      	b.n	2e80 <__udivsi3+0x3c>
    2e7e:	0a09      	lsrs	r1, r1, #8
    2e80:	0bc3      	lsrs	r3, r0, #15
    2e82:	428b      	cmp	r3, r1
    2e84:	d301      	bcc.n	2e8a <__udivsi3+0x46>
    2e86:	03cb      	lsls	r3, r1, #15
    2e88:	1ac0      	subs	r0, r0, r3
    2e8a:	4152      	adcs	r2, r2
    2e8c:	0b83      	lsrs	r3, r0, #14
    2e8e:	428b      	cmp	r3, r1
    2e90:	d301      	bcc.n	2e96 <__udivsi3+0x52>
    2e92:	038b      	lsls	r3, r1, #14
    2e94:	1ac0      	subs	r0, r0, r3
    2e96:	4152      	adcs	r2, r2
    2e98:	0b43      	lsrs	r3, r0, #13
    2e9a:	428b      	cmp	r3, r1
    2e9c:	d301      	bcc.n	2ea2 <__udivsi3+0x5e>
    2e9e:	034b      	lsls	r3, r1, #13
    2ea0:	1ac0      	subs	r0, r0, r3
    2ea2:	4152      	adcs	r2, r2
    2ea4:	0b03      	lsrs	r3, r0, #12
    2ea6:	428b      	cmp	r3, r1
    2ea8:	d301      	bcc.n	2eae <__udivsi3+0x6a>
    2eaa:	030b      	lsls	r3, r1, #12
    2eac:	1ac0      	subs	r0, r0, r3
    2eae:	4152      	adcs	r2, r2
    2eb0:	0ac3      	lsrs	r3, r0, #11
    2eb2:	428b      	cmp	r3, r1
    2eb4:	d301      	bcc.n	2eba <__udivsi3+0x76>
    2eb6:	02cb      	lsls	r3, r1, #11
    2eb8:	1ac0      	subs	r0, r0, r3
    2eba:	4152      	adcs	r2, r2
    2ebc:	0a83      	lsrs	r3, r0, #10
    2ebe:	428b      	cmp	r3, r1
    2ec0:	d301      	bcc.n	2ec6 <__udivsi3+0x82>
    2ec2:	028b      	lsls	r3, r1, #10
    2ec4:	1ac0      	subs	r0, r0, r3
    2ec6:	4152      	adcs	r2, r2
    2ec8:	0a43      	lsrs	r3, r0, #9
    2eca:	428b      	cmp	r3, r1
    2ecc:	d301      	bcc.n	2ed2 <__udivsi3+0x8e>
    2ece:	024b      	lsls	r3, r1, #9
    2ed0:	1ac0      	subs	r0, r0, r3
    2ed2:	4152      	adcs	r2, r2
    2ed4:	0a03      	lsrs	r3, r0, #8
    2ed6:	428b      	cmp	r3, r1
    2ed8:	d301      	bcc.n	2ede <__udivsi3+0x9a>
    2eda:	020b      	lsls	r3, r1, #8
    2edc:	1ac0      	subs	r0, r0, r3
    2ede:	4152      	adcs	r2, r2
    2ee0:	d2cd      	bcs.n	2e7e <__udivsi3+0x3a>
    2ee2:	09c3      	lsrs	r3, r0, #7
    2ee4:	428b      	cmp	r3, r1
    2ee6:	d301      	bcc.n	2eec <__udivsi3+0xa8>
    2ee8:	01cb      	lsls	r3, r1, #7
    2eea:	1ac0      	subs	r0, r0, r3
    2eec:	4152      	adcs	r2, r2
    2eee:	0983      	lsrs	r3, r0, #6
    2ef0:	428b      	cmp	r3, r1
    2ef2:	d301      	bcc.n	2ef8 <__udivsi3+0xb4>
    2ef4:	018b      	lsls	r3, r1, #6
    2ef6:	1ac0      	subs	r0, r0, r3
    2ef8:	4152      	adcs	r2, r2
    2efa:	0943      	lsrs	r3, r0, #5
    2efc:	428b      	cmp	r3, r1
    2efe:	d301      	bcc.n	2f04 <__udivsi3+0xc0>
    2f00:	014b      	lsls	r3, r1, #5
    2f02:	1ac0      	subs	r0, r0, r3
    2f04:	4152      	adcs	r2, r2
    2f06:	0903      	lsrs	r3, r0, #4
    2f08:	428b      	cmp	r3, r1
    2f0a:	d301      	bcc.n	2f10 <__udivsi3+0xcc>
    2f0c:	010b      	lsls	r3, r1, #4
    2f0e:	1ac0      	subs	r0, r0, r3
    2f10:	4152      	adcs	r2, r2
    2f12:	08c3      	lsrs	r3, r0, #3
    2f14:	428b      	cmp	r3, r1
    2f16:	d301      	bcc.n	2f1c <__udivsi3+0xd8>
    2f18:	00cb      	lsls	r3, r1, #3
    2f1a:	1ac0      	subs	r0, r0, r3
    2f1c:	4152      	adcs	r2, r2
    2f1e:	0883      	lsrs	r3, r0, #2
    2f20:	428b      	cmp	r3, r1
    2f22:	d301      	bcc.n	2f28 <__udivsi3+0xe4>
    2f24:	008b      	lsls	r3, r1, #2
    2f26:	1ac0      	subs	r0, r0, r3
    2f28:	4152      	adcs	r2, r2
    2f2a:	0843      	lsrs	r3, r0, #1
    2f2c:	428b      	cmp	r3, r1
    2f2e:	d301      	bcc.n	2f34 <__udivsi3+0xf0>
    2f30:	004b      	lsls	r3, r1, #1
    2f32:	1ac0      	subs	r0, r0, r3
    2f34:	4152      	adcs	r2, r2
    2f36:	1a41      	subs	r1, r0, r1
    2f38:	d200      	bcs.n	2f3c <__udivsi3+0xf8>
    2f3a:	4601      	mov	r1, r0
    2f3c:	4152      	adcs	r2, r2
    2f3e:	4610      	mov	r0, r2
    2f40:	4770      	bx	lr
    2f42:	e7ff      	b.n	2f44 <__udivsi3+0x100>
    2f44:	b501      	push	{r0, lr}
    2f46:	2000      	movs	r0, #0
    2f48:	f000 f806 	bl	2f58 <__aeabi_idiv0>
    2f4c:	bd02      	pop	{r1, pc}
    2f4e:	46c0      	nop			; (mov r8, r8)

00002f50 <__aeabi_uidivmod>:
    2f50:	2900      	cmp	r1, #0
    2f52:	d0f7      	beq.n	2f44 <__udivsi3+0x100>
    2f54:	e776      	b.n	2e44 <__udivsi3>
    2f56:	4770      	bx	lr

00002f58 <__aeabi_idiv0>:
    2f58:	4770      	bx	lr
    2f5a:	46c0      	nop			; (mov r8, r8)

00002f5c <__aeabi_lmul>:
    2f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f5e:	46ce      	mov	lr, r9
    2f60:	4647      	mov	r7, r8
    2f62:	0415      	lsls	r5, r2, #16
    2f64:	0c2d      	lsrs	r5, r5, #16
    2f66:	002e      	movs	r6, r5
    2f68:	b580      	push	{r7, lr}
    2f6a:	0407      	lsls	r7, r0, #16
    2f6c:	0c14      	lsrs	r4, r2, #16
    2f6e:	0c3f      	lsrs	r7, r7, #16
    2f70:	4699      	mov	r9, r3
    2f72:	0c03      	lsrs	r3, r0, #16
    2f74:	437e      	muls	r6, r7
    2f76:	435d      	muls	r5, r3
    2f78:	4367      	muls	r7, r4
    2f7a:	4363      	muls	r3, r4
    2f7c:	197f      	adds	r7, r7, r5
    2f7e:	0c34      	lsrs	r4, r6, #16
    2f80:	19e4      	adds	r4, r4, r7
    2f82:	469c      	mov	ip, r3
    2f84:	42a5      	cmp	r5, r4
    2f86:	d903      	bls.n	2f90 <__aeabi_lmul+0x34>
    2f88:	2380      	movs	r3, #128	; 0x80
    2f8a:	025b      	lsls	r3, r3, #9
    2f8c:	4698      	mov	r8, r3
    2f8e:	44c4      	add	ip, r8
    2f90:	464b      	mov	r3, r9
    2f92:	4351      	muls	r1, r2
    2f94:	4343      	muls	r3, r0
    2f96:	0436      	lsls	r6, r6, #16
    2f98:	0c36      	lsrs	r6, r6, #16
    2f9a:	0c25      	lsrs	r5, r4, #16
    2f9c:	0424      	lsls	r4, r4, #16
    2f9e:	4465      	add	r5, ip
    2fa0:	19a4      	adds	r4, r4, r6
    2fa2:	1859      	adds	r1, r3, r1
    2fa4:	1949      	adds	r1, r1, r5
    2fa6:	0020      	movs	r0, r4
    2fa8:	bc0c      	pop	{r2, r3}
    2faa:	4690      	mov	r8, r2
    2fac:	4699      	mov	r9, r3
    2fae:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002fb0 <__libc_init_array>:
    2fb0:	b570      	push	{r4, r5, r6, lr}
    2fb2:	2600      	movs	r6, #0
    2fb4:	4d0c      	ldr	r5, [pc, #48]	; (2fe8 <__libc_init_array+0x38>)
    2fb6:	4c0d      	ldr	r4, [pc, #52]	; (2fec <__libc_init_array+0x3c>)
    2fb8:	1b64      	subs	r4, r4, r5
    2fba:	10a4      	asrs	r4, r4, #2
    2fbc:	42a6      	cmp	r6, r4
    2fbe:	d109      	bne.n	2fd4 <__libc_init_array+0x24>
    2fc0:	2600      	movs	r6, #0
    2fc2:	f000 f90f 	bl	31e4 <_init>
    2fc6:	4d0a      	ldr	r5, [pc, #40]	; (2ff0 <__libc_init_array+0x40>)
    2fc8:	4c0a      	ldr	r4, [pc, #40]	; (2ff4 <__libc_init_array+0x44>)
    2fca:	1b64      	subs	r4, r4, r5
    2fcc:	10a4      	asrs	r4, r4, #2
    2fce:	42a6      	cmp	r6, r4
    2fd0:	d105      	bne.n	2fde <__libc_init_array+0x2e>
    2fd2:	bd70      	pop	{r4, r5, r6, pc}
    2fd4:	00b3      	lsls	r3, r6, #2
    2fd6:	58eb      	ldr	r3, [r5, r3]
    2fd8:	4798      	blx	r3
    2fda:	3601      	adds	r6, #1
    2fdc:	e7ee      	b.n	2fbc <__libc_init_array+0xc>
    2fde:	00b3      	lsls	r3, r6, #2
    2fe0:	58eb      	ldr	r3, [r5, r3]
    2fe2:	4798      	blx	r3
    2fe4:	3601      	adds	r6, #1
    2fe6:	e7f2      	b.n	2fce <__libc_init_array+0x1e>
    2fe8:	000031f0 	.word	0x000031f0
    2fec:	000031f0 	.word	0x000031f0
    2ff0:	000031f0 	.word	0x000031f0
    2ff4:	000031f4 	.word	0x000031f4

00002ff8 <malloc>:
    2ff8:	b510      	push	{r4, lr}
    2ffa:	4b03      	ldr	r3, [pc, #12]	; (3008 <malloc+0x10>)
    2ffc:	0001      	movs	r1, r0
    2ffe:	6818      	ldr	r0, [r3, #0]
    3000:	f000 f816 	bl	3030 <_malloc_r>
    3004:	bd10      	pop	{r4, pc}
    3006:	46c0      	nop			; (mov r8, r8)
    3008:	20000008 	.word	0x20000008

0000300c <memcpy>:
    300c:	2300      	movs	r3, #0
    300e:	b510      	push	{r4, lr}
    3010:	429a      	cmp	r2, r3
    3012:	d100      	bne.n	3016 <memcpy+0xa>
    3014:	bd10      	pop	{r4, pc}
    3016:	5ccc      	ldrb	r4, [r1, r3]
    3018:	54c4      	strb	r4, [r0, r3]
    301a:	3301      	adds	r3, #1
    301c:	e7f8      	b.n	3010 <memcpy+0x4>

0000301e <memset>:
    301e:	0003      	movs	r3, r0
    3020:	1882      	adds	r2, r0, r2
    3022:	4293      	cmp	r3, r2
    3024:	d100      	bne.n	3028 <memset+0xa>
    3026:	4770      	bx	lr
    3028:	7019      	strb	r1, [r3, #0]
    302a:	3301      	adds	r3, #1
    302c:	e7f9      	b.n	3022 <memset+0x4>
	...

00003030 <_malloc_r>:
    3030:	2303      	movs	r3, #3
    3032:	b570      	push	{r4, r5, r6, lr}
    3034:	1ccd      	adds	r5, r1, #3
    3036:	439d      	bics	r5, r3
    3038:	3508      	adds	r5, #8
    303a:	0006      	movs	r6, r0
    303c:	2d0c      	cmp	r5, #12
    303e:	d21e      	bcs.n	307e <_malloc_r+0x4e>
    3040:	250c      	movs	r5, #12
    3042:	42a9      	cmp	r1, r5
    3044:	d81d      	bhi.n	3082 <_malloc_r+0x52>
    3046:	0030      	movs	r0, r6
    3048:	f000 f869 	bl	311e <__malloc_lock>
    304c:	4a25      	ldr	r2, [pc, #148]	; (30e4 <_malloc_r+0xb4>)
    304e:	6814      	ldr	r4, [r2, #0]
    3050:	0021      	movs	r1, r4
    3052:	2900      	cmp	r1, #0
    3054:	d119      	bne.n	308a <_malloc_r+0x5a>
    3056:	4c24      	ldr	r4, [pc, #144]	; (30e8 <_malloc_r+0xb8>)
    3058:	6823      	ldr	r3, [r4, #0]
    305a:	2b00      	cmp	r3, #0
    305c:	d103      	bne.n	3066 <_malloc_r+0x36>
    305e:	0030      	movs	r0, r6
    3060:	f000 f844 	bl	30ec <_sbrk_r>
    3064:	6020      	str	r0, [r4, #0]
    3066:	0029      	movs	r1, r5
    3068:	0030      	movs	r0, r6
    306a:	f000 f83f 	bl	30ec <_sbrk_r>
    306e:	1c43      	adds	r3, r0, #1
    3070:	d12c      	bne.n	30cc <_malloc_r+0x9c>
    3072:	230c      	movs	r3, #12
    3074:	0030      	movs	r0, r6
    3076:	6033      	str	r3, [r6, #0]
    3078:	f000 f852 	bl	3120 <__malloc_unlock>
    307c:	e003      	b.n	3086 <_malloc_r+0x56>
    307e:	2d00      	cmp	r5, #0
    3080:	dadf      	bge.n	3042 <_malloc_r+0x12>
    3082:	230c      	movs	r3, #12
    3084:	6033      	str	r3, [r6, #0]
    3086:	2000      	movs	r0, #0
    3088:	bd70      	pop	{r4, r5, r6, pc}
    308a:	680b      	ldr	r3, [r1, #0]
    308c:	1b5b      	subs	r3, r3, r5
    308e:	d41a      	bmi.n	30c6 <_malloc_r+0x96>
    3090:	2b0b      	cmp	r3, #11
    3092:	d903      	bls.n	309c <_malloc_r+0x6c>
    3094:	600b      	str	r3, [r1, #0]
    3096:	18cc      	adds	r4, r1, r3
    3098:	6025      	str	r5, [r4, #0]
    309a:	e003      	b.n	30a4 <_malloc_r+0x74>
    309c:	428c      	cmp	r4, r1
    309e:	d10e      	bne.n	30be <_malloc_r+0x8e>
    30a0:	6863      	ldr	r3, [r4, #4]
    30a2:	6013      	str	r3, [r2, #0]
    30a4:	0030      	movs	r0, r6
    30a6:	f000 f83b 	bl	3120 <__malloc_unlock>
    30aa:	0020      	movs	r0, r4
    30ac:	2207      	movs	r2, #7
    30ae:	300b      	adds	r0, #11
    30b0:	1d23      	adds	r3, r4, #4
    30b2:	4390      	bics	r0, r2
    30b4:	1ac3      	subs	r3, r0, r3
    30b6:	d0e7      	beq.n	3088 <_malloc_r+0x58>
    30b8:	425a      	negs	r2, r3
    30ba:	50e2      	str	r2, [r4, r3]
    30bc:	e7e4      	b.n	3088 <_malloc_r+0x58>
    30be:	684b      	ldr	r3, [r1, #4]
    30c0:	6063      	str	r3, [r4, #4]
    30c2:	000c      	movs	r4, r1
    30c4:	e7ee      	b.n	30a4 <_malloc_r+0x74>
    30c6:	000c      	movs	r4, r1
    30c8:	6849      	ldr	r1, [r1, #4]
    30ca:	e7c2      	b.n	3052 <_malloc_r+0x22>
    30cc:	2303      	movs	r3, #3
    30ce:	1cc4      	adds	r4, r0, #3
    30d0:	439c      	bics	r4, r3
    30d2:	42a0      	cmp	r0, r4
    30d4:	d0e0      	beq.n	3098 <_malloc_r+0x68>
    30d6:	1a21      	subs	r1, r4, r0
    30d8:	0030      	movs	r0, r6
    30da:	f000 f807 	bl	30ec <_sbrk_r>
    30de:	1c43      	adds	r3, r0, #1
    30e0:	d1da      	bne.n	3098 <_malloc_r+0x68>
    30e2:	e7c6      	b.n	3072 <_malloc_r+0x42>
    30e4:	200030f0 	.word	0x200030f0
    30e8:	200030f4 	.word	0x200030f4

000030ec <_sbrk_r>:
    30ec:	2300      	movs	r3, #0
    30ee:	b570      	push	{r4, r5, r6, lr}
    30f0:	4c06      	ldr	r4, [pc, #24]	; (310c <_sbrk_r+0x20>)
    30f2:	0005      	movs	r5, r0
    30f4:	0008      	movs	r0, r1
    30f6:	6023      	str	r3, [r4, #0]
    30f8:	f7ff fe28 	bl	2d4c <_sbrk>
    30fc:	1c43      	adds	r3, r0, #1
    30fe:	d103      	bne.n	3108 <_sbrk_r+0x1c>
    3100:	6823      	ldr	r3, [r4, #0]
    3102:	2b00      	cmp	r3, #0
    3104:	d000      	beq.n	3108 <_sbrk_r+0x1c>
    3106:	602b      	str	r3, [r5, #0]
    3108:	bd70      	pop	{r4, r5, r6, pc}
    310a:	46c0      	nop			; (mov r8, r8)
    310c:	20003554 	.word	0x20003554

00003110 <strlen>:
    3110:	2300      	movs	r3, #0
    3112:	5cc2      	ldrb	r2, [r0, r3]
    3114:	3301      	adds	r3, #1
    3116:	2a00      	cmp	r2, #0
    3118:	d1fb      	bne.n	3112 <strlen+0x2>
    311a:	1e58      	subs	r0, r3, #1
    311c:	4770      	bx	lr

0000311e <__malloc_lock>:
    311e:	4770      	bx	lr

00003120 <__malloc_unlock>:
    3120:	4770      	bx	lr
    3122:	0000      	movs	r0, r0
    3124:	42000800 	.word	0x42000800
    3128:	42000c00 	.word	0x42000c00
    312c:	42001000 	.word	0x42001000
    3130:	42001400 	.word	0x42001400
    3134:	42001800 	.word	0x42001800
    3138:	42001c00 	.word	0x42001c00
    313c:	454c4449 	.word	0x454c4449
    3140:	00000000 	.word	0x00000000
    3144:	00002358 	.word	0x00002358
    3148:	00002358 	.word	0x00002358
    314c:	00002358 	.word	0x00002358
    3150:	000022d0 	.word	0x000022d0
    3154:	0000239a 	.word	0x0000239a
    3158:	000023b4 	.word	0x000023b4
    315c:	00002358 	.word	0x00002358
    3160:	00002358 	.word	0x00002358
    3164:	000022d0 	.word	0x000022d0
    3168:	0000239a 	.word	0x0000239a
    316c:	20726d54 	.word	0x20726d54
    3170:	00637653 	.word	0x00637653
    3174:	000024d6 	.word	0x000024d6
    3178:	000024d2 	.word	0x000024d2
    317c:	000024d2 	.word	0x000024d2
    3180:	00002538 	.word	0x00002538
    3184:	00002538 	.word	0x00002538
    3188:	000024ea 	.word	0x000024ea
    318c:	000024dc 	.word	0x000024dc
    3190:	000024f0 	.word	0x000024f0
    3194:	00002526 	.word	0x00002526
    3198:	000026f8 	.word	0x000026f8
    319c:	000026d8 	.word	0x000026d8
    31a0:	000026d8 	.word	0x000026d8
    31a4:	00002764 	.word	0x00002764
    31a8:	000026ea 	.word	0x000026ea
    31ac:	00002706 	.word	0x00002706
    31b0:	000026dc 	.word	0x000026dc
    31b4:	00002714 	.word	0x00002714
    31b8:	00002754 	.word	0x00002754
    31bc:	2044454c 	.word	0x2044454c
    31c0:	6b736154 	.word	0x6b736154
    31c4:	00003120 	.word	0x00003120
    31c8:	2044454c 	.word	0x2044454c
    31cc:	6b736154 	.word	0x6b736154
    31d0:	00000032 	.word	0x00000032
    31d4:	6c6c6548 	.word	0x6c6c6548
    31d8:	6f57206f 	.word	0x6f57206f
    31dc:	0d646c72 	.word	0x0d646c72
    31e0:	0000000a 	.word	0x0000000a

000031e4 <_init>:
    31e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    31e6:	46c0      	nop			; (mov r8, r8)
    31e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    31ea:	bc08      	pop	{r3}
    31ec:	469e      	mov	lr, r3
    31ee:	4770      	bx	lr

000031f0 <__init_array_start>:
    31f0:	000000dd 	.word	0x000000dd

000031f4 <_fini>:
    31f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    31f6:	46c0      	nop			; (mov r8, r8)
    31f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    31fa:	bc08      	pop	{r3}
    31fc:	469e      	mov	lr, r3
    31fe:	4770      	bx	lr

00003200 <__fini_array_start>:
    3200:	000000b5 	.word	0x000000b5
