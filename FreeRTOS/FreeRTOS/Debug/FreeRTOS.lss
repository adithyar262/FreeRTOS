
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f10  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001d8  20000000  00003f10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00003508  200001d8  000040e8  000201d8  2**2
                  ALLOC
  3 .stack        00002000  200036e0  000075f0  000201d8  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002c10a  00000000  00000000  00020259  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000049d7  00000000  00000000  0004c363  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00009406  00000000  00000000  00050d3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000958  00000000  00000000  0005a140  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b68  00000000  00000000  0005aa98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001d423  00000000  00000000  0005b600  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00010542  00000000  00000000  00078a23  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00092c4c  00000000  00000000  00088f65  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001d54  00000000  00000000  0011bbb4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e0 56 00 20 e9 2d 00 00 e5 2d 00 00 e5 2d 00 00     .V. .-...-...-..
	...
      2c:	e5 0c 00 00 00 00 00 00 00 00 00 00 c1 0d 00 00     ................
      3c:	05 0e 00 00 e5 2d 00 00 e5 2d 00 00 e5 2d 00 00     .....-...-...-..
      4c:	e5 2d 00 00 e5 2d 00 00 e5 2d 00 00 e5 2d 00 00     .-...-...-...-..
      5c:	e5 2d 00 00 e5 2d 00 00 01 0c 00 00 11 0c 00 00     .-...-..........
      6c:	21 0c 00 00 31 0c 00 00 41 0c 00 00 51 0c 00 00     !...1...A...Q...
      7c:	e5 2d 00 00 e5 2d 00 00 e5 2d 00 00 e5 2d 00 00     .-...-...-...-..
      8c:	e5 2d 00 00 e5 2d 00 00 00 00 00 00 00 00 00 00     .-...-..........
      9c:	e5 2d 00 00 e5 2d 00 00 e5 2d 00 00 e5 2d 00 00     .-...-...-...-..
      ac:	e5 2d 00 00 00 00 00 00                             .-......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200001d8 	.word	0x200001d8
      d4:	00000000 	.word	0x00000000
      d8:	00003f10 	.word	0x00003f10

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200001dc 	.word	0x200001dc
     108:	00003f10 	.word	0x00003f10
     10c:	00003f10 	.word	0x00003f10
     110:	00000000 	.word	0x00000000

00000114 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
     116:	46de      	mov	lr, fp
     118:	4657      	mov	r7, sl
     11a:	464e      	mov	r6, r9
     11c:	4645      	mov	r5, r8
     11e:	b5e0      	push	{r5, r6, r7, lr}
     120:	b087      	sub	sp, #28
     122:	4680      	mov	r8, r0
     124:	9104      	str	r1, [sp, #16]
     126:	0016      	movs	r6, r2
     128:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     12a:	2200      	movs	r2, #0
     12c:	2300      	movs	r3, #0
     12e:	2100      	movs	r1, #0
     130:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     132:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     134:	2001      	movs	r0, #1
     136:	0021      	movs	r1, r4
     138:	9600      	str	r6, [sp, #0]
     13a:	9701      	str	r7, [sp, #4]
     13c:	465c      	mov	r4, fp
     13e:	9403      	str	r4, [sp, #12]
     140:	4644      	mov	r4, r8
     142:	9405      	str	r4, [sp, #20]
     144:	e013      	b.n	16e <long_division+0x5a>
     146:	2420      	movs	r4, #32
     148:	1a64      	subs	r4, r4, r1
     14a:	0005      	movs	r5, r0
     14c:	40e5      	lsrs	r5, r4
     14e:	46a8      	mov	r8, r5
     150:	e014      	b.n	17c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     152:	9c00      	ldr	r4, [sp, #0]
     154:	9d01      	ldr	r5, [sp, #4]
     156:	1b12      	subs	r2, r2, r4
     158:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     15a:	465c      	mov	r4, fp
     15c:	464d      	mov	r5, r9
     15e:	432c      	orrs	r4, r5
     160:	46a3      	mov	fp, r4
     162:	9c03      	ldr	r4, [sp, #12]
     164:	4645      	mov	r5, r8
     166:	432c      	orrs	r4, r5
     168:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     16a:	3901      	subs	r1, #1
     16c:	d325      	bcc.n	1ba <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     16e:	2420      	movs	r4, #32
     170:	4264      	negs	r4, r4
     172:	190c      	adds	r4, r1, r4
     174:	d4e7      	bmi.n	146 <long_division+0x32>
     176:	0005      	movs	r5, r0
     178:	40a5      	lsls	r5, r4
     17a:	46a8      	mov	r8, r5
     17c:	0004      	movs	r4, r0
     17e:	408c      	lsls	r4, r1
     180:	46a1      	mov	r9, r4
		r = r << 1;
     182:	1892      	adds	r2, r2, r2
     184:	415b      	adcs	r3, r3
     186:	0014      	movs	r4, r2
     188:	001d      	movs	r5, r3
		if (n & bit_shift) {
     18a:	9e05      	ldr	r6, [sp, #20]
     18c:	464f      	mov	r7, r9
     18e:	403e      	ands	r6, r7
     190:	46b4      	mov	ip, r6
     192:	9e04      	ldr	r6, [sp, #16]
     194:	4647      	mov	r7, r8
     196:	403e      	ands	r6, r7
     198:	46b2      	mov	sl, r6
     19a:	4666      	mov	r6, ip
     19c:	4657      	mov	r7, sl
     19e:	433e      	orrs	r6, r7
     1a0:	d003      	beq.n	1aa <long_division+0x96>
			r |= 0x01;
     1a2:	0006      	movs	r6, r0
     1a4:	4326      	orrs	r6, r4
     1a6:	0032      	movs	r2, r6
     1a8:	002b      	movs	r3, r5
		if (r >= d) {
     1aa:	9c00      	ldr	r4, [sp, #0]
     1ac:	9d01      	ldr	r5, [sp, #4]
     1ae:	429d      	cmp	r5, r3
     1b0:	d8db      	bhi.n	16a <long_division+0x56>
     1b2:	d1ce      	bne.n	152 <long_division+0x3e>
     1b4:	4294      	cmp	r4, r2
     1b6:	d8d8      	bhi.n	16a <long_division+0x56>
     1b8:	e7cb      	b.n	152 <long_division+0x3e>
     1ba:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     1bc:	4658      	mov	r0, fp
     1be:	0019      	movs	r1, r3
     1c0:	b007      	add	sp, #28
     1c2:	bc3c      	pop	{r2, r3, r4, r5}
     1c4:	4690      	mov	r8, r2
     1c6:	4699      	mov	r9, r3
     1c8:	46a2      	mov	sl, r4
     1ca:	46ab      	mov	fp, r5
     1cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000001ce <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     1ce:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     1d0:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     1d2:	2340      	movs	r3, #64	; 0x40
     1d4:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     1d6:	4281      	cmp	r1, r0
     1d8:	d202      	bcs.n	1e0 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     1da:	0018      	movs	r0, r3
     1dc:	bd10      	pop	{r4, pc}
		baud_calculated++;
     1de:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     1e0:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     1e2:	1c63      	adds	r3, r4, #1
     1e4:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     1e6:	4288      	cmp	r0, r1
     1e8:	d9f9      	bls.n	1de <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     1ea:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     1ec:	2cff      	cmp	r4, #255	; 0xff
     1ee:	d8f4      	bhi.n	1da <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     1f0:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     1f2:	2300      	movs	r3, #0
     1f4:	e7f1      	b.n	1da <_sercom_get_sync_baud_val+0xc>
	...

000001f8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     1fa:	b083      	sub	sp, #12
     1fc:	000f      	movs	r7, r1
     1fe:	0016      	movs	r6, r2
     200:	aa08      	add	r2, sp, #32
     202:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     204:	0004      	movs	r4, r0
     206:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     208:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     20a:	42bc      	cmp	r4, r7
     20c:	d902      	bls.n	214 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     20e:	0010      	movs	r0, r2
     210:	b003      	add	sp, #12
     212:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     214:	2b00      	cmp	r3, #0
     216:	d114      	bne.n	242 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     218:	0002      	movs	r2, r0
     21a:	0008      	movs	r0, r1
     21c:	2100      	movs	r1, #0
     21e:	4c19      	ldr	r4, [pc, #100]	; (284 <_sercom_get_async_baud_val+0x8c>)
     220:	47a0      	blx	r4
     222:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     224:	003a      	movs	r2, r7
     226:	2300      	movs	r3, #0
     228:	2000      	movs	r0, #0
     22a:	4c17      	ldr	r4, [pc, #92]	; (288 <_sercom_get_async_baud_val+0x90>)
     22c:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     22e:	2200      	movs	r2, #0
     230:	2301      	movs	r3, #1
     232:	1a12      	subs	r2, r2, r0
     234:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     236:	0c12      	lsrs	r2, r2, #16
     238:	041b      	lsls	r3, r3, #16
     23a:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     23c:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     23e:	2200      	movs	r2, #0
     240:	e7e5      	b.n	20e <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     242:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     244:	2b01      	cmp	r3, #1
     246:	d1f9      	bne.n	23c <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     248:	000a      	movs	r2, r1
     24a:	2300      	movs	r3, #0
     24c:	2100      	movs	r1, #0
     24e:	4c0d      	ldr	r4, [pc, #52]	; (284 <_sercom_get_async_baud_val+0x8c>)
     250:	47a0      	blx	r4
     252:	0002      	movs	r2, r0
     254:	000b      	movs	r3, r1
     256:	9200      	str	r2, [sp, #0]
     258:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     25a:	0038      	movs	r0, r7
     25c:	2100      	movs	r1, #0
     25e:	4c0a      	ldr	r4, [pc, #40]	; (288 <_sercom_get_async_baud_val+0x90>)
     260:	47a0      	blx	r4
     262:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     264:	2380      	movs	r3, #128	; 0x80
     266:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     268:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     26a:	4298      	cmp	r0, r3
     26c:	d8cf      	bhi.n	20e <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     26e:	0f79      	lsrs	r1, r7, #29
     270:	00f8      	lsls	r0, r7, #3
     272:	9a00      	ldr	r2, [sp, #0]
     274:	9b01      	ldr	r3, [sp, #4]
     276:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     278:	00ea      	lsls	r2, r5, #3
     27a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     27c:	b2d2      	uxtb	r2, r2
     27e:	0352      	lsls	r2, r2, #13
     280:	432a      	orrs	r2, r5
     282:	e7db      	b.n	23c <_sercom_get_async_baud_val+0x44>
     284:	00003101 	.word	0x00003101
     288:	00000115 	.word	0x00000115

0000028c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     28c:	b510      	push	{r4, lr}
     28e:	b082      	sub	sp, #8
     290:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     292:	4b0e      	ldr	r3, [pc, #56]	; (2cc <sercom_set_gclk_generator+0x40>)
     294:	781b      	ldrb	r3, [r3, #0]
     296:	2b00      	cmp	r3, #0
     298:	d007      	beq.n	2aa <sercom_set_gclk_generator+0x1e>
     29a:	2900      	cmp	r1, #0
     29c:	d105      	bne.n	2aa <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     29e:	4b0b      	ldr	r3, [pc, #44]	; (2cc <sercom_set_gclk_generator+0x40>)
     2a0:	785b      	ldrb	r3, [r3, #1]
     2a2:	4283      	cmp	r3, r0
     2a4:	d010      	beq.n	2c8 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     2a6:	201d      	movs	r0, #29
     2a8:	e00c      	b.n	2c4 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     2aa:	a901      	add	r1, sp, #4
     2ac:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     2ae:	2013      	movs	r0, #19
     2b0:	4b07      	ldr	r3, [pc, #28]	; (2d0 <sercom_set_gclk_generator+0x44>)
     2b2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     2b4:	2013      	movs	r0, #19
     2b6:	4b07      	ldr	r3, [pc, #28]	; (2d4 <sercom_set_gclk_generator+0x48>)
     2b8:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     2ba:	4b04      	ldr	r3, [pc, #16]	; (2cc <sercom_set_gclk_generator+0x40>)
     2bc:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     2be:	2201      	movs	r2, #1
     2c0:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     2c2:	2000      	movs	r0, #0
}
     2c4:	b002      	add	sp, #8
     2c6:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     2c8:	2000      	movs	r0, #0
     2ca:	e7fb      	b.n	2c4 <sercom_set_gclk_generator+0x38>
     2cc:	200001f4 	.word	0x200001f4
     2d0:	00002c8d 	.word	0x00002c8d
     2d4:	00002c01 	.word	0x00002c01

000002d8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     2d8:	4b40      	ldr	r3, [pc, #256]	; (3dc <_sercom_get_default_pad+0x104>)
     2da:	4298      	cmp	r0, r3
     2dc:	d031      	beq.n	342 <_sercom_get_default_pad+0x6a>
     2de:	d90a      	bls.n	2f6 <_sercom_get_default_pad+0x1e>
     2e0:	4b3f      	ldr	r3, [pc, #252]	; (3e0 <_sercom_get_default_pad+0x108>)
     2e2:	4298      	cmp	r0, r3
     2e4:	d04d      	beq.n	382 <_sercom_get_default_pad+0xaa>
     2e6:	4b3f      	ldr	r3, [pc, #252]	; (3e4 <_sercom_get_default_pad+0x10c>)
     2e8:	4298      	cmp	r0, r3
     2ea:	d05a      	beq.n	3a2 <_sercom_get_default_pad+0xca>
     2ec:	4b3e      	ldr	r3, [pc, #248]	; (3e8 <_sercom_get_default_pad+0x110>)
     2ee:	4298      	cmp	r0, r3
     2f0:	d037      	beq.n	362 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     2f2:	2000      	movs	r0, #0
}
     2f4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     2f6:	4b3d      	ldr	r3, [pc, #244]	; (3ec <_sercom_get_default_pad+0x114>)
     2f8:	4298      	cmp	r0, r3
     2fa:	d00c      	beq.n	316 <_sercom_get_default_pad+0x3e>
     2fc:	4b3c      	ldr	r3, [pc, #240]	; (3f0 <_sercom_get_default_pad+0x118>)
     2fe:	4298      	cmp	r0, r3
     300:	d1f7      	bne.n	2f2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     302:	2901      	cmp	r1, #1
     304:	d017      	beq.n	336 <_sercom_get_default_pad+0x5e>
     306:	2900      	cmp	r1, #0
     308:	d05d      	beq.n	3c6 <_sercom_get_default_pad+0xee>
     30a:	2902      	cmp	r1, #2
     30c:	d015      	beq.n	33a <_sercom_get_default_pad+0x62>
     30e:	2903      	cmp	r1, #3
     310:	d015      	beq.n	33e <_sercom_get_default_pad+0x66>
	return 0;
     312:	2000      	movs	r0, #0
     314:	e7ee      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     316:	2901      	cmp	r1, #1
     318:	d007      	beq.n	32a <_sercom_get_default_pad+0x52>
     31a:	2900      	cmp	r1, #0
     31c:	d051      	beq.n	3c2 <_sercom_get_default_pad+0xea>
     31e:	2902      	cmp	r1, #2
     320:	d005      	beq.n	32e <_sercom_get_default_pad+0x56>
     322:	2903      	cmp	r1, #3
     324:	d005      	beq.n	332 <_sercom_get_default_pad+0x5a>
	return 0;
     326:	2000      	movs	r0, #0
     328:	e7e4      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     32a:	4832      	ldr	r0, [pc, #200]	; (3f4 <_sercom_get_default_pad+0x11c>)
     32c:	e7e2      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     32e:	4832      	ldr	r0, [pc, #200]	; (3f8 <_sercom_get_default_pad+0x120>)
     330:	e7e0      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     332:	4832      	ldr	r0, [pc, #200]	; (3fc <_sercom_get_default_pad+0x124>)
     334:	e7de      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     336:	4832      	ldr	r0, [pc, #200]	; (400 <_sercom_get_default_pad+0x128>)
     338:	e7dc      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     33a:	4832      	ldr	r0, [pc, #200]	; (404 <_sercom_get_default_pad+0x12c>)
     33c:	e7da      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     33e:	4832      	ldr	r0, [pc, #200]	; (408 <_sercom_get_default_pad+0x130>)
     340:	e7d8      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     342:	2901      	cmp	r1, #1
     344:	d007      	beq.n	356 <_sercom_get_default_pad+0x7e>
     346:	2900      	cmp	r1, #0
     348:	d03f      	beq.n	3ca <_sercom_get_default_pad+0xf2>
     34a:	2902      	cmp	r1, #2
     34c:	d005      	beq.n	35a <_sercom_get_default_pad+0x82>
     34e:	2903      	cmp	r1, #3
     350:	d005      	beq.n	35e <_sercom_get_default_pad+0x86>
	return 0;
     352:	2000      	movs	r0, #0
     354:	e7ce      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     356:	482d      	ldr	r0, [pc, #180]	; (40c <_sercom_get_default_pad+0x134>)
     358:	e7cc      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     35a:	482d      	ldr	r0, [pc, #180]	; (410 <_sercom_get_default_pad+0x138>)
     35c:	e7ca      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     35e:	482d      	ldr	r0, [pc, #180]	; (414 <_sercom_get_default_pad+0x13c>)
     360:	e7c8      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     362:	2901      	cmp	r1, #1
     364:	d007      	beq.n	376 <_sercom_get_default_pad+0x9e>
     366:	2900      	cmp	r1, #0
     368:	d031      	beq.n	3ce <_sercom_get_default_pad+0xf6>
     36a:	2902      	cmp	r1, #2
     36c:	d005      	beq.n	37a <_sercom_get_default_pad+0xa2>
     36e:	2903      	cmp	r1, #3
     370:	d005      	beq.n	37e <_sercom_get_default_pad+0xa6>
	return 0;
     372:	2000      	movs	r0, #0
     374:	e7be      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     376:	4828      	ldr	r0, [pc, #160]	; (418 <_sercom_get_default_pad+0x140>)
     378:	e7bc      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     37a:	4828      	ldr	r0, [pc, #160]	; (41c <_sercom_get_default_pad+0x144>)
     37c:	e7ba      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     37e:	4828      	ldr	r0, [pc, #160]	; (420 <_sercom_get_default_pad+0x148>)
     380:	e7b8      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     382:	2901      	cmp	r1, #1
     384:	d007      	beq.n	396 <_sercom_get_default_pad+0xbe>
     386:	2900      	cmp	r1, #0
     388:	d023      	beq.n	3d2 <_sercom_get_default_pad+0xfa>
     38a:	2902      	cmp	r1, #2
     38c:	d005      	beq.n	39a <_sercom_get_default_pad+0xc2>
     38e:	2903      	cmp	r1, #3
     390:	d005      	beq.n	39e <_sercom_get_default_pad+0xc6>
	return 0;
     392:	2000      	movs	r0, #0
     394:	e7ae      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     396:	4823      	ldr	r0, [pc, #140]	; (424 <_sercom_get_default_pad+0x14c>)
     398:	e7ac      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     39a:	4823      	ldr	r0, [pc, #140]	; (428 <_sercom_get_default_pad+0x150>)
     39c:	e7aa      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     39e:	4823      	ldr	r0, [pc, #140]	; (42c <_sercom_get_default_pad+0x154>)
     3a0:	e7a8      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3a2:	2901      	cmp	r1, #1
     3a4:	d007      	beq.n	3b6 <_sercom_get_default_pad+0xde>
     3a6:	2900      	cmp	r1, #0
     3a8:	d015      	beq.n	3d6 <_sercom_get_default_pad+0xfe>
     3aa:	2902      	cmp	r1, #2
     3ac:	d005      	beq.n	3ba <_sercom_get_default_pad+0xe2>
     3ae:	2903      	cmp	r1, #3
     3b0:	d005      	beq.n	3be <_sercom_get_default_pad+0xe6>
	return 0;
     3b2:	2000      	movs	r0, #0
     3b4:	e79e      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3b6:	481e      	ldr	r0, [pc, #120]	; (430 <_sercom_get_default_pad+0x158>)
     3b8:	e79c      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3ba:	481e      	ldr	r0, [pc, #120]	; (434 <_sercom_get_default_pad+0x15c>)
     3bc:	e79a      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3be:	481e      	ldr	r0, [pc, #120]	; (438 <_sercom_get_default_pad+0x160>)
     3c0:	e798      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3c2:	481e      	ldr	r0, [pc, #120]	; (43c <_sercom_get_default_pad+0x164>)
     3c4:	e796      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3c6:	2003      	movs	r0, #3
     3c8:	e794      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3ca:	481d      	ldr	r0, [pc, #116]	; (440 <_sercom_get_default_pad+0x168>)
     3cc:	e792      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3ce:	481d      	ldr	r0, [pc, #116]	; (444 <_sercom_get_default_pad+0x16c>)
     3d0:	e790      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3d2:	481d      	ldr	r0, [pc, #116]	; (448 <_sercom_get_default_pad+0x170>)
     3d4:	e78e      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3d6:	481d      	ldr	r0, [pc, #116]	; (44c <_sercom_get_default_pad+0x174>)
     3d8:	e78c      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3da:	46c0      	nop			; (mov r8, r8)
     3dc:	42001000 	.word	0x42001000
     3e0:	42001800 	.word	0x42001800
     3e4:	42001c00 	.word	0x42001c00
     3e8:	42001400 	.word	0x42001400
     3ec:	42000800 	.word	0x42000800
     3f0:	42000c00 	.word	0x42000c00
     3f4:	00050003 	.word	0x00050003
     3f8:	00060003 	.word	0x00060003
     3fc:	00070003 	.word	0x00070003
     400:	00010003 	.word	0x00010003
     404:	001e0003 	.word	0x001e0003
     408:	001f0003 	.word	0x001f0003
     40c:	00090003 	.word	0x00090003
     410:	000a0003 	.word	0x000a0003
     414:	000b0003 	.word	0x000b0003
     418:	00110003 	.word	0x00110003
     41c:	00120003 	.word	0x00120003
     420:	00130003 	.word	0x00130003
     424:	000d0003 	.word	0x000d0003
     428:	000e0003 	.word	0x000e0003
     42c:	000f0003 	.word	0x000f0003
     430:	00170003 	.word	0x00170003
     434:	00180003 	.word	0x00180003
     438:	00190003 	.word	0x00190003
     43c:	00040003 	.word	0x00040003
     440:	00080003 	.word	0x00080003
     444:	00100003 	.word	0x00100003
     448:	000c0003 	.word	0x000c0003
     44c:	00160003 	.word	0x00160003

00000450 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     450:	b530      	push	{r4, r5, lr}
     452:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     454:	4b0b      	ldr	r3, [pc, #44]	; (484 <_sercom_get_sercom_inst_index+0x34>)
     456:	466a      	mov	r2, sp
     458:	cb32      	ldmia	r3!, {r1, r4, r5}
     45a:	c232      	stmia	r2!, {r1, r4, r5}
     45c:	cb32      	ldmia	r3!, {r1, r4, r5}
     45e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     460:	9b00      	ldr	r3, [sp, #0]
     462:	4283      	cmp	r3, r0
     464:	d00b      	beq.n	47e <_sercom_get_sercom_inst_index+0x2e>
     466:	2301      	movs	r3, #1
     468:	009a      	lsls	r2, r3, #2
     46a:	4669      	mov	r1, sp
     46c:	5852      	ldr	r2, [r2, r1]
     46e:	4282      	cmp	r2, r0
     470:	d006      	beq.n	480 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     472:	3301      	adds	r3, #1
     474:	2b06      	cmp	r3, #6
     476:	d1f7      	bne.n	468 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     478:	2000      	movs	r0, #0
}
     47a:	b007      	add	sp, #28
     47c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     47e:	2300      	movs	r3, #0
			return i;
     480:	b2d8      	uxtb	r0, r3
     482:	e7fa      	b.n	47a <_sercom_get_sercom_inst_index+0x2a>
     484:	00003c84 	.word	0x00003c84

00000488 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
     488:	b510      	push	{r4, lr}
     48a:	0004      	movs	r4, r0
	 //assert(cbuf);

	 if(cbuf->full)
     48c:	7c03      	ldrb	r3, [r0, #16]
     48e:	2b00      	cmp	r3, #0
     490:	d005      	beq.n	49e <advance_pointer+0x16>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     492:	6883      	ldr	r3, [r0, #8]
     494:	1c58      	adds	r0, r3, #1
     496:	68e1      	ldr	r1, [r4, #12]
     498:	4b07      	ldr	r3, [pc, #28]	; (4b8 <advance_pointer+0x30>)
     49a:	4798      	blx	r3
     49c:	60a1      	str	r1, [r4, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
     49e:	6863      	ldr	r3, [r4, #4]
     4a0:	1c58      	adds	r0, r3, #1
     4a2:	68e1      	ldr	r1, [r4, #12]
     4a4:	4b04      	ldr	r3, [pc, #16]	; (4b8 <advance_pointer+0x30>)
     4a6:	4798      	blx	r3
     4a8:	6061      	str	r1, [r4, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
     4aa:	68a3      	ldr	r3, [r4, #8]
     4ac:	1a59      	subs	r1, r3, r1
     4ae:	424a      	negs	r2, r1
     4b0:	414a      	adcs	r2, r1
     4b2:	7422      	strb	r2, [r4, #16]
 }
     4b4:	bd10      	pop	{r4, pc}
     4b6:	46c0      	nop			; (mov r8, r8)
     4b8:	000030f5 	.word	0x000030f5

000004bc <circular_buf_init>:
 }

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
     4bc:	b570      	push	{r4, r5, r6, lr}
     4be:	0005      	movs	r5, r0
     4c0:	000c      	movs	r4, r1
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
     4c2:	2014      	movs	r0, #20
     4c4:	4b04      	ldr	r3, [pc, #16]	; (4d8 <circular_buf_init+0x1c>)
     4c6:	4798      	blx	r3
	 //assert(cbuf);

	 cbuf->buffer = buffer;
     4c8:	6005      	str	r5, [r0, #0]
	 cbuf->max = size;
     4ca:	60c4      	str	r4, [r0, #12]

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
	// assert(cbuf);

	 cbuf->head = 0;
     4cc:	2300      	movs	r3, #0
     4ce:	6043      	str	r3, [r0, #4]
	 cbuf->tail = 0;
     4d0:	6083      	str	r3, [r0, #8]
	 cbuf->full = false;
     4d2:	7403      	strb	r3, [r0, #16]
 }
     4d4:	bd70      	pop	{r4, r5, r6, pc}
     4d6:	46c0      	nop			; (mov r8, r8)
     4d8:	000031a9 	.word	0x000031a9

000004dc <circular_buf_reset>:
	 cbuf->head = 0;
     4dc:	2300      	movs	r3, #0
     4de:	6043      	str	r3, [r0, #4]
	 cbuf->tail = 0;
     4e0:	6083      	str	r3, [r0, #8]
	 cbuf->full = false;
     4e2:	7403      	strb	r3, [r0, #16]
 }
     4e4:	4770      	bx	lr
	...

000004e8 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
     4e8:	b510      	push	{r4, lr}
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
     4ea:	6803      	ldr	r3, [r0, #0]
     4ec:	6842      	ldr	r2, [r0, #4]
     4ee:	5499      	strb	r1, [r3, r2]

	 advance_pointer(cbuf);
     4f0:	4b01      	ldr	r3, [pc, #4]	; (4f8 <circular_buf_put+0x10>)
     4f2:	4798      	blx	r3
 }
     4f4:	bd10      	pop	{r4, pc}
     4f6:	46c0      	nop			; (mov r8, r8)
     4f8:	00000489 	.word	0x00000489

000004fc <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
     4fc:	7c02      	ldrb	r2, [r0, #16]
     4fe:	2300      	movs	r3, #0
     500:	2a00      	cmp	r2, #0
     502:	d105      	bne.n	510 <circular_buf_empty+0x14>
     504:	6843      	ldr	r3, [r0, #4]
     506:	6880      	ldr	r0, [r0, #8]
     508:	1a1b      	subs	r3, r3, r0
     50a:	4258      	negs	r0, r3
     50c:	4143      	adcs	r3, r0
     50e:	b2db      	uxtb	r3, r3
     510:	0018      	movs	r0, r3
 }
     512:	4770      	bx	lr

00000514 <circular_buf_get>:
 {
     514:	b570      	push	{r4, r5, r6, lr}
     516:	0004      	movs	r4, r0
     518:	000d      	movs	r5, r1
	 if(!circular_buf_empty(cbuf))
     51a:	4b0a      	ldr	r3, [pc, #40]	; (544 <circular_buf_get+0x30>)
     51c:	4798      	blx	r3
     51e:	2800      	cmp	r0, #0
     520:	d10d      	bne.n	53e <circular_buf_get+0x2a>
		 *data = cbuf->buffer[cbuf->tail];
     522:	6823      	ldr	r3, [r4, #0]
     524:	68a2      	ldr	r2, [r4, #8]
     526:	5c9b      	ldrb	r3, [r3, r2]
     528:	702b      	strb	r3, [r5, #0]
	 cbuf->full = false;
     52a:	2300      	movs	r3, #0
     52c:	7423      	strb	r3, [r4, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     52e:	68a3      	ldr	r3, [r4, #8]
     530:	1c58      	adds	r0, r3, #1
     532:	68e1      	ldr	r1, [r4, #12]
     534:	4b04      	ldr	r3, [pc, #16]	; (548 <circular_buf_get+0x34>)
     536:	4798      	blx	r3
     538:	60a1      	str	r1, [r4, #8]
		 r = 0;
     53a:	2000      	movs	r0, #0
 }
     53c:	bd70      	pop	{r4, r5, r6, pc}
	 int r = -1;
     53e:	2001      	movs	r0, #1
     540:	4240      	negs	r0, r0
	 return r;
     542:	e7fb      	b.n	53c <circular_buf_get+0x28>
     544:	000004fd 	.word	0x000004fd
     548:	000030f5 	.word	0x000030f5

0000054c <CLI_ExtractCmd>:
*				length - length of command
* @param[out]	N/A
* @return		Status
* @note         
*****************************************************************************/
int32_t CLI_ExtractCmd(char * cmd, int32_t length) {
     54c:	b570      	push	{r4, r5, r6, lr}
     54e:	b086      	sub	sp, #24
     550:	000c      	movs	r4, r1
	char* token = strtok(cmd, " ");
     552:	4911      	ldr	r1, [pc, #68]	; (598 <CLI_ExtractCmd+0x4c>)
     554:	4b11      	ldr	r3, [pc, #68]	; (59c <CLI_ExtractCmd+0x50>)
     556:	4798      	blx	r3
	char str[20];
	if(strncmp(token, COMMAND_LED, length) == 0) {
     558:	0022      	movs	r2, r4
     55a:	4911      	ldr	r1, [pc, #68]	; (5a0 <CLI_ExtractCmd+0x54>)
     55c:	4b11      	ldr	r3, [pc, #68]	; (5a4 <CLI_ExtractCmd+0x58>)
     55e:	4798      	blx	r3
     560:	2800      	cmp	r0, #0
     562:	d113      	bne.n	58c <CLI_ExtractCmd+0x40>
		token = strtok(NULL, " ");
     564:	490c      	ldr	r1, [pc, #48]	; (598 <CLI_ExtractCmd+0x4c>)
     566:	4b0d      	ldr	r3, [pc, #52]	; (59c <CLI_ExtractCmd+0x50>)
     568:	4798      	blx	r3
		int delay = atoi(token);
     56a:	4b0f      	ldr	r3, [pc, #60]	; (5a8 <CLI_ExtractCmd+0x5c>)
     56c:	4798      	blx	r3
     56e:	0004      	movs	r4, r0
		dUART_WriteString((char *)"Valid command\r\n");
     570:	480e      	ldr	r0, [pc, #56]	; (5ac <CLI_ExtractCmd+0x60>)
     572:	4d0f      	ldr	r5, [pc, #60]	; (5b0 <CLI_ExtractCmd+0x64>)
     574:	47a8      	blx	r5
		snprintf(str, 20, "Delay - %d\r\n", delay);
     576:	0023      	movs	r3, r4
     578:	4a0e      	ldr	r2, [pc, #56]	; (5b4 <CLI_ExtractCmd+0x68>)
     57a:	2114      	movs	r1, #20
     57c:	a801      	add	r0, sp, #4
     57e:	4e0e      	ldr	r6, [pc, #56]	; (5b8 <CLI_ExtractCmd+0x6c>)
     580:	47b0      	blx	r6
		dUART_WriteString(str);
     582:	a801      	add	r0, sp, #4
     584:	47a8      	blx	r5
		if(xQueueSend(LEDQueue, (const void* )&delay, pdFALSE) != pdTRUE) {
			dUART_WriteString("LED Queue Full!!\r\n");
		}
		*/
		//dUART_WriteString((char *)"\r\n");
		return delay;
     586:	0020      	movs	r0, r4
	} else {
		dUART_WriteString((char *)"Invalid command\r\n");
	}
	return -1;
     588:	b006      	add	sp, #24
     58a:	bd70      	pop	{r4, r5, r6, pc}
		dUART_WriteString((char *)"Invalid command\r\n");
     58c:	480b      	ldr	r0, [pc, #44]	; (5bc <CLI_ExtractCmd+0x70>)
     58e:	4b08      	ldr	r3, [pc, #32]	; (5b0 <CLI_ExtractCmd+0x64>)
     590:	4798      	blx	r3
	return -1;
     592:	2001      	movs	r0, #1
     594:	4240      	negs	r0, r0
     596:	e7f7      	b.n	588 <CLI_ExtractCmd+0x3c>
     598:	00003c9c 	.word	0x00003c9c
     59c:	000033e9 	.word	0x000033e9
     5a0:	00003ca0 	.word	0x00003ca0
     5a4:	000033c7 	.word	0x000033c7
     5a8:	00003155 	.word	0x00003155
     5ac:	00003ca4 	.word	0x00003ca4
     5b0:	00000ee9 	.word	0x00000ee9
     5b4:	00003cb4 	.word	0x00003cb4
     5b8:	00003355 	.word	0x00003355
     5bc:	00003cc4 	.word	0x00003cc4

000005c0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     5c0:	b5f0      	push	{r4, r5, r6, r7, lr}
     5c2:	46de      	mov	lr, fp
     5c4:	4657      	mov	r7, sl
     5c6:	464e      	mov	r6, r9
     5c8:	4645      	mov	r5, r8
     5ca:	b5e0      	push	{r5, r6, r7, lr}
     5cc:	b091      	sub	sp, #68	; 0x44
     5ce:	0005      	movs	r5, r0
     5d0:	000c      	movs	r4, r1
     5d2:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     5d4:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     5d6:	0008      	movs	r0, r1
     5d8:	4bba      	ldr	r3, [pc, #744]	; (8c4 <usart_init+0x304>)
     5da:	4798      	blx	r3
     5dc:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     5de:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     5e0:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     5e2:	07db      	lsls	r3, r3, #31
     5e4:	d506      	bpl.n	5f4 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     5e6:	b011      	add	sp, #68	; 0x44
     5e8:	bc3c      	pop	{r2, r3, r4, r5}
     5ea:	4690      	mov	r8, r2
     5ec:	4699      	mov	r9, r3
     5ee:	46a2      	mov	sl, r4
     5f0:	46ab      	mov	fp, r5
     5f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     5f4:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     5f6:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     5f8:	079b      	lsls	r3, r3, #30
     5fa:	d4f4      	bmi.n	5e6 <usart_init+0x26>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     5fc:	49b2      	ldr	r1, [pc, #712]	; (8c8 <usart_init+0x308>)
     5fe:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     600:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     602:	2301      	movs	r3, #1
     604:	40bb      	lsls	r3, r7
     606:	4303      	orrs	r3, r0
     608:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     60a:	a90f      	add	r1, sp, #60	; 0x3c
     60c:	272d      	movs	r7, #45	; 0x2d
     60e:	5df3      	ldrb	r3, [r6, r7]
     610:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     612:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     614:	b2d3      	uxtb	r3, r2
     616:	9302      	str	r3, [sp, #8]
     618:	0018      	movs	r0, r3
     61a:	4bac      	ldr	r3, [pc, #688]	; (8cc <usart_init+0x30c>)
     61c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     61e:	9802      	ldr	r0, [sp, #8]
     620:	4bab      	ldr	r3, [pc, #684]	; (8d0 <usart_init+0x310>)
     622:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     624:	5df0      	ldrb	r0, [r6, r7]
     626:	2100      	movs	r1, #0
     628:	4baa      	ldr	r3, [pc, #680]	; (8d4 <usart_init+0x314>)
     62a:	4798      	blx	r3
	module->character_size = config->character_size;
     62c:	7af3      	ldrb	r3, [r6, #11]
     62e:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     630:	2324      	movs	r3, #36	; 0x24
     632:	5cf3      	ldrb	r3, [r6, r3]
     634:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     636:	2325      	movs	r3, #37	; 0x25
     638:	5cf3      	ldrb	r3, [r6, r3]
     63a:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     63c:	7ef3      	ldrb	r3, [r6, #27]
     63e:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     640:	7f33      	ldrb	r3, [r6, #28]
     642:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     644:	682b      	ldr	r3, [r5, #0]
     646:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     648:	0018      	movs	r0, r3
     64a:	4b9e      	ldr	r3, [pc, #632]	; (8c4 <usart_init+0x304>)
     64c:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     64e:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     650:	2200      	movs	r2, #0
     652:	230e      	movs	r3, #14
     654:	a906      	add	r1, sp, #24
     656:	468c      	mov	ip, r1
     658:	4463      	add	r3, ip
     65a:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     65c:	8a32      	ldrh	r2, [r6, #16]
     65e:	9202      	str	r2, [sp, #8]
     660:	2380      	movs	r3, #128	; 0x80
     662:	01db      	lsls	r3, r3, #7
     664:	429a      	cmp	r2, r3
     666:	d100      	bne.n	66a <usart_init+0xaa>
     668:	e09a      	b.n	7a0 <usart_init+0x1e0>
     66a:	d90f      	bls.n	68c <usart_init+0xcc>
     66c:	23c0      	movs	r3, #192	; 0xc0
     66e:	01db      	lsls	r3, r3, #7
     670:	9a02      	ldr	r2, [sp, #8]
     672:	429a      	cmp	r2, r3
     674:	d100      	bne.n	678 <usart_init+0xb8>
     676:	e08e      	b.n	796 <usart_init+0x1d6>
     678:	2380      	movs	r3, #128	; 0x80
     67a:	021b      	lsls	r3, r3, #8
     67c:	429a      	cmp	r2, r3
     67e:	d000      	beq.n	682 <usart_init+0xc2>
     680:	e11b      	b.n	8ba <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     682:	2303      	movs	r3, #3
     684:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     686:	2300      	movs	r3, #0
     688:	9307      	str	r3, [sp, #28]
     68a:	e008      	b.n	69e <usart_init+0xde>
	switch (config->sample_rate) {
     68c:	2380      	movs	r3, #128	; 0x80
     68e:	019b      	lsls	r3, r3, #6
     690:	429a      	cmp	r2, r3
     692:	d000      	beq.n	696 <usart_init+0xd6>
     694:	e111      	b.n	8ba <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     696:	2310      	movs	r3, #16
     698:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     69a:	3b0f      	subs	r3, #15
     69c:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     69e:	6833      	ldr	r3, [r6, #0]
     6a0:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     6a2:	68f3      	ldr	r3, [r6, #12]
     6a4:	469b      	mov	fp, r3
		config->sample_adjustment |
     6a6:	6973      	ldr	r3, [r6, #20]
     6a8:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     6aa:	7e33      	ldrb	r3, [r6, #24]
     6ac:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     6ae:	2326      	movs	r3, #38	; 0x26
     6b0:	5cf3      	ldrb	r3, [r6, r3]
     6b2:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     6b4:	6873      	ldr	r3, [r6, #4]
     6b6:	4699      	mov	r9, r3
	switch (transfer_mode)
     6b8:	2b00      	cmp	r3, #0
     6ba:	d100      	bne.n	6be <usart_init+0xfe>
     6bc:	e09c      	b.n	7f8 <usart_init+0x238>
     6be:	2380      	movs	r3, #128	; 0x80
     6c0:	055b      	lsls	r3, r3, #21
     6c2:	4599      	cmp	r9, r3
     6c4:	d100      	bne.n	6c8 <usart_init+0x108>
     6c6:	e080      	b.n	7ca <usart_init+0x20a>
	if(config->encoding_format_enable) {
     6c8:	7e73      	ldrb	r3, [r6, #25]
     6ca:	2b00      	cmp	r3, #0
     6cc:	d002      	beq.n	6d4 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     6ce:	7eb3      	ldrb	r3, [r6, #26]
     6d0:	4642      	mov	r2, r8
     6d2:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
     6d4:	230e      	movs	r3, #14
     6d6:	aa06      	add	r2, sp, #24
     6d8:	4694      	mov	ip, r2
     6da:	4463      	add	r3, ip
     6dc:	881b      	ldrh	r3, [r3, #0]
     6de:	4642      	mov	r2, r8
     6e0:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     6e2:	9b05      	ldr	r3, [sp, #20]
     6e4:	465a      	mov	r2, fp
     6e6:	4313      	orrs	r3, r2
     6e8:	9a03      	ldr	r2, [sp, #12]
     6ea:	4313      	orrs	r3, r2
     6ec:	464a      	mov	r2, r9
     6ee:	4313      	orrs	r3, r2
     6f0:	9f02      	ldr	r7, [sp, #8]
     6f2:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     6f4:	9b04      	ldr	r3, [sp, #16]
     6f6:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     6f8:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     6fa:	4653      	mov	r3, sl
     6fc:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     6fe:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     700:	2327      	movs	r3, #39	; 0x27
     702:	5cf3      	ldrb	r3, [r6, r3]
     704:	2b00      	cmp	r3, #0
     706:	d101      	bne.n	70c <usart_init+0x14c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     708:	3304      	adds	r3, #4
     70a:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     70c:	7e73      	ldrb	r3, [r6, #25]
     70e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     710:	7f32      	ldrb	r2, [r6, #28]
     712:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     714:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     716:	7f72      	ldrb	r2, [r6, #29]
     718:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     71a:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     71c:	2224      	movs	r2, #36	; 0x24
     71e:	5cb2      	ldrb	r2, [r6, r2]
     720:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     722:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     724:	2225      	movs	r2, #37	; 0x25
     726:	5cb2      	ldrb	r2, [r6, r2]
     728:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     72a:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     72c:	7ab1      	ldrb	r1, [r6, #10]
     72e:	7af2      	ldrb	r2, [r6, #11]
     730:	4311      	orrs	r1, r2
     732:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     734:	8933      	ldrh	r3, [r6, #8]
     736:	2bff      	cmp	r3, #255	; 0xff
     738:	d100      	bne.n	73c <usart_init+0x17c>
     73a:	e081      	b.n	840 <usart_init+0x280>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     73c:	2280      	movs	r2, #128	; 0x80
     73e:	0452      	lsls	r2, r2, #17
     740:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     742:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     744:	232c      	movs	r3, #44	; 0x2c
     746:	5cf3      	ldrb	r3, [r6, r3]
     748:	2b00      	cmp	r3, #0
     74a:	d103      	bne.n	754 <usart_init+0x194>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     74c:	4b62      	ldr	r3, [pc, #392]	; (8d8 <usart_init+0x318>)
     74e:	789b      	ldrb	r3, [r3, #2]
     750:	079b      	lsls	r3, r3, #30
     752:	d501      	bpl.n	758 <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     754:	2380      	movs	r3, #128	; 0x80
     756:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     758:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     75a:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     75c:	2b00      	cmp	r3, #0
     75e:	d1fc      	bne.n	75a <usart_init+0x19a>
	usart_hw->CTRLB.reg = ctrlb;
     760:	4643      	mov	r3, r8
     762:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     764:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     766:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     768:	2b00      	cmp	r3, #0
     76a:	d1fc      	bne.n	766 <usart_init+0x1a6>
	usart_hw->CTRLA.reg = ctrla;
     76c:	4643      	mov	r3, r8
     76e:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     770:	ab0e      	add	r3, sp, #56	; 0x38
     772:	2280      	movs	r2, #128	; 0x80
     774:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     776:	2200      	movs	r2, #0
     778:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     77a:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     77c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     77e:	6b33      	ldr	r3, [r6, #48]	; 0x30
     780:	930a      	str	r3, [sp, #40]	; 0x28
     782:	6b73      	ldr	r3, [r6, #52]	; 0x34
     784:	930b      	str	r3, [sp, #44]	; 0x2c
     786:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     788:	930c      	str	r3, [sp, #48]	; 0x30
     78a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     78c:	9302      	str	r3, [sp, #8]
     78e:	930d      	str	r3, [sp, #52]	; 0x34
     790:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     792:	ae0a      	add	r6, sp, #40	; 0x28
     794:	e063      	b.n	85e <usart_init+0x29e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     796:	2308      	movs	r3, #8
     798:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     79a:	3b07      	subs	r3, #7
     79c:	9307      	str	r3, [sp, #28]
     79e:	e77e      	b.n	69e <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     7a0:	6833      	ldr	r3, [r6, #0]
     7a2:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     7a4:	68f3      	ldr	r3, [r6, #12]
     7a6:	469b      	mov	fp, r3
		config->sample_adjustment |
     7a8:	6973      	ldr	r3, [r6, #20]
     7aa:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     7ac:	7e33      	ldrb	r3, [r6, #24]
     7ae:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     7b0:	2326      	movs	r3, #38	; 0x26
     7b2:	5cf3      	ldrb	r3, [r6, r3]
     7b4:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     7b6:	6873      	ldr	r3, [r6, #4]
     7b8:	4699      	mov	r9, r3
	switch (transfer_mode)
     7ba:	2b00      	cmp	r3, #0
     7bc:	d018      	beq.n	7f0 <usart_init+0x230>
     7be:	2380      	movs	r3, #128	; 0x80
     7c0:	055b      	lsls	r3, r3, #21
     7c2:	4599      	cmp	r9, r3
     7c4:	d001      	beq.n	7ca <usart_init+0x20a>
	enum status_code status_code = STATUS_OK;
     7c6:	2000      	movs	r0, #0
     7c8:	e025      	b.n	816 <usart_init+0x256>
			if (!config->use_external_clock) {
     7ca:	2327      	movs	r3, #39	; 0x27
     7cc:	5cf3      	ldrb	r3, [r6, r3]
     7ce:	2b00      	cmp	r3, #0
     7d0:	d000      	beq.n	7d4 <usart_init+0x214>
     7d2:	e779      	b.n	6c8 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     7d4:	6a33      	ldr	r3, [r6, #32]
     7d6:	001f      	movs	r7, r3
     7d8:	b2c0      	uxtb	r0, r0
     7da:	4b40      	ldr	r3, [pc, #256]	; (8dc <usart_init+0x31c>)
     7dc:	4798      	blx	r3
     7de:	0001      	movs	r1, r0
     7e0:	220e      	movs	r2, #14
     7e2:	ab06      	add	r3, sp, #24
     7e4:	469c      	mov	ip, r3
     7e6:	4462      	add	r2, ip
     7e8:	0038      	movs	r0, r7
     7ea:	4b3d      	ldr	r3, [pc, #244]	; (8e0 <usart_init+0x320>)
     7ec:	4798      	blx	r3
     7ee:	e012      	b.n	816 <usart_init+0x256>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     7f0:	2308      	movs	r3, #8
     7f2:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     7f4:	2300      	movs	r3, #0
     7f6:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     7f8:	2327      	movs	r3, #39	; 0x27
     7fa:	5cf3      	ldrb	r3, [r6, r3]
     7fc:	2b00      	cmp	r3, #0
     7fe:	d00e      	beq.n	81e <usart_init+0x25e>
				status_code =
     800:	9b06      	ldr	r3, [sp, #24]
     802:	9300      	str	r3, [sp, #0]
     804:	9b07      	ldr	r3, [sp, #28]
     806:	220e      	movs	r2, #14
     808:	a906      	add	r1, sp, #24
     80a:	468c      	mov	ip, r1
     80c:	4462      	add	r2, ip
     80e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     810:	6a30      	ldr	r0, [r6, #32]
     812:	4f34      	ldr	r7, [pc, #208]	; (8e4 <usart_init+0x324>)
     814:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     816:	2800      	cmp	r0, #0
     818:	d000      	beq.n	81c <usart_init+0x25c>
     81a:	e6e4      	b.n	5e6 <usart_init+0x26>
     81c:	e754      	b.n	6c8 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
     81e:	6a33      	ldr	r3, [r6, #32]
     820:	001f      	movs	r7, r3
     822:	b2c0      	uxtb	r0, r0
     824:	4b2d      	ldr	r3, [pc, #180]	; (8dc <usart_init+0x31c>)
     826:	4798      	blx	r3
     828:	0001      	movs	r1, r0
				status_code =
     82a:	9b06      	ldr	r3, [sp, #24]
     82c:	9300      	str	r3, [sp, #0]
     82e:	9b07      	ldr	r3, [sp, #28]
     830:	220e      	movs	r2, #14
     832:	a806      	add	r0, sp, #24
     834:	4684      	mov	ip, r0
     836:	4462      	add	r2, ip
     838:	0038      	movs	r0, r7
     83a:	4f2a      	ldr	r7, [pc, #168]	; (8e4 <usart_init+0x324>)
     83c:	47b8      	blx	r7
     83e:	e7ea      	b.n	816 <usart_init+0x256>
		if(config->lin_slave_enable) {
     840:	7ef3      	ldrb	r3, [r6, #27]
     842:	2b00      	cmp	r3, #0
     844:	d100      	bne.n	848 <usart_init+0x288>
     846:	e77d      	b.n	744 <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     848:	2380      	movs	r3, #128	; 0x80
     84a:	04db      	lsls	r3, r3, #19
     84c:	431f      	orrs	r7, r3
     84e:	e779      	b.n	744 <usart_init+0x184>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     850:	0020      	movs	r0, r4
     852:	4b25      	ldr	r3, [pc, #148]	; (8e8 <usart_init+0x328>)
     854:	4798      	blx	r3
     856:	e007      	b.n	868 <usart_init+0x2a8>
     858:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     85a:	2f04      	cmp	r7, #4
     85c:	d00d      	beq.n	87a <usart_init+0x2ba>
     85e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     860:	00bb      	lsls	r3, r7, #2
     862:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     864:	2800      	cmp	r0, #0
     866:	d0f3      	beq.n	850 <usart_init+0x290>
		if (current_pinmux != PINMUX_UNUSED) {
     868:	1c43      	adds	r3, r0, #1
     86a:	d0f5      	beq.n	858 <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     86c:	a90e      	add	r1, sp, #56	; 0x38
     86e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     870:	0c00      	lsrs	r0, r0, #16
     872:	b2c0      	uxtb	r0, r0
     874:	4b1d      	ldr	r3, [pc, #116]	; (8ec <usart_init+0x32c>)
     876:	4798      	blx	r3
     878:	e7ee      	b.n	858 <usart_init+0x298>
		module->callback[i]            = NULL;
     87a:	2300      	movs	r3, #0
     87c:	60eb      	str	r3, [r5, #12]
     87e:	612b      	str	r3, [r5, #16]
     880:	616b      	str	r3, [r5, #20]
     882:	61ab      	str	r3, [r5, #24]
     884:	61eb      	str	r3, [r5, #28]
     886:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     888:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     88a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     88c:	2200      	movs	r2, #0
     88e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     890:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     892:	3330      	adds	r3, #48	; 0x30
     894:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     896:	3301      	adds	r3, #1
     898:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     89a:	3301      	adds	r3, #1
     89c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     89e:	3301      	adds	r3, #1
     8a0:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     8a2:	6828      	ldr	r0, [r5, #0]
     8a4:	4b07      	ldr	r3, [pc, #28]	; (8c4 <usart_init+0x304>)
     8a6:	4798      	blx	r3
     8a8:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     8aa:	4911      	ldr	r1, [pc, #68]	; (8f0 <usart_init+0x330>)
     8ac:	4b11      	ldr	r3, [pc, #68]	; (8f4 <usart_init+0x334>)
     8ae:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     8b0:	00a4      	lsls	r4, r4, #2
     8b2:	4b11      	ldr	r3, [pc, #68]	; (8f8 <usart_init+0x338>)
     8b4:	50e5      	str	r5, [r4, r3]
	return status_code;
     8b6:	2000      	movs	r0, #0
     8b8:	e695      	b.n	5e6 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     8ba:	2310      	movs	r3, #16
     8bc:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     8be:	2300      	movs	r3, #0
     8c0:	9307      	str	r3, [sp, #28]
     8c2:	e6ec      	b.n	69e <usart_init+0xde>
     8c4:	00000451 	.word	0x00000451
     8c8:	40000400 	.word	0x40000400
     8cc:	00002c8d 	.word	0x00002c8d
     8d0:	00002c01 	.word	0x00002c01
     8d4:	0000028d 	.word	0x0000028d
     8d8:	41002000 	.word	0x41002000
     8dc:	00002ca9 	.word	0x00002ca9
     8e0:	000001cf 	.word	0x000001cf
     8e4:	000001f9 	.word	0x000001f9
     8e8:	000002d9 	.word	0x000002d9
     8ec:	00002d85 	.word	0x00002d85
     8f0:	000009fd 	.word	0x000009fd
     8f4:	00000b95 	.word	0x00000b95
     8f8:	20003268 	.word	0x20003268

000008fc <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
     8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8fe:	0006      	movs	r6, r0
     900:	000c      	movs	r4, r1
     902:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     904:	6807      	ldr	r7, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     906:	4b0a      	ldr	r3, [pc, #40]	; (930 <_usart_write_buffer+0x34>)
     908:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
     90a:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
     90c:	b29b      	uxth	r3, r3
     90e:	2b00      	cmp	r3, #0
     910:	d003      	beq.n	91a <_usart_write_buffer+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     912:	4b08      	ldr	r3, [pc, #32]	; (934 <_usart_write_buffer+0x38>)
     914:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
     916:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
     918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
     91a:	85f5      	strh	r5, [r6, #46]	; 0x2e
     91c:	4b05      	ldr	r3, [pc, #20]	; (934 <_usart_write_buffer+0x38>)
     91e:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
     920:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
     922:	2205      	movs	r2, #5
     924:	2333      	movs	r3, #51	; 0x33
     926:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
     928:	3b32      	subs	r3, #50	; 0x32
     92a:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
     92c:	2000      	movs	r0, #0
     92e:	e7f3      	b.n	918 <_usart_write_buffer+0x1c>
     930:	00002579 	.word	0x00002579
     934:	000025b9 	.word	0x000025b9

00000938 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     93a:	0004      	movs	r4, r0
     93c:	000d      	movs	r5, r1
     93e:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     940:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
     942:	4b0f      	ldr	r3, [pc, #60]	; (980 <_usart_read_buffer+0x48>)
     944:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
     946:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
     948:	b29b      	uxth	r3, r3
     94a:	2b00      	cmp	r3, #0
     94c:	d003      	beq.n	956 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
     94e:	4b0d      	ldr	r3, [pc, #52]	; (984 <_usart_read_buffer+0x4c>)
     950:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
     952:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
     954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
     956:	85a6      	strh	r6, [r4, #44]	; 0x2c
     958:	4b0a      	ldr	r3, [pc, #40]	; (984 <_usart_read_buffer+0x4c>)
     95a:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
     95c:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
     95e:	2205      	movs	r2, #5
     960:	2332      	movs	r3, #50	; 0x32
     962:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
     964:	3b2e      	subs	r3, #46	; 0x2e
     966:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
     968:	7a23      	ldrb	r3, [r4, #8]
     96a:	2b00      	cmp	r3, #0
     96c:	d001      	beq.n	972 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
     96e:	2320      	movs	r3, #32
     970:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
     972:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
     974:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
     976:	2b00      	cmp	r3, #0
     978:	d0ec      	beq.n	954 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
     97a:	2308      	movs	r3, #8
     97c:	75bb      	strb	r3, [r7, #22]
     97e:	e7e9      	b.n	954 <_usart_read_buffer+0x1c>
     980:	00002579 	.word	0x00002579
     984:	000025b9 	.word	0x000025b9

00000988 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     988:	1c93      	adds	r3, r2, #2
     98a:	009b      	lsls	r3, r3, #2
     98c:	18c3      	adds	r3, r0, r3
     98e:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
     990:	2130      	movs	r1, #48	; 0x30
     992:	2301      	movs	r3, #1
     994:	4093      	lsls	r3, r2
     996:	001a      	movs	r2, r3
     998:	5c43      	ldrb	r3, [r0, r1]
     99a:	4313      	orrs	r3, r2
     99c:	5443      	strb	r3, [r0, r1]
}
     99e:	4770      	bx	lr

000009a0 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
     9a0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     9a2:	2317      	movs	r3, #23
	if (length == 0) {
     9a4:	2a00      	cmp	r2, #0
     9a6:	d101      	bne.n	9ac <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
     9a8:	0018      	movs	r0, r3
     9aa:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
     9ac:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
     9ae:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
     9b0:	2c00      	cmp	r4, #0
     9b2:	d0f9      	beq.n	9a8 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
     9b4:	4b01      	ldr	r3, [pc, #4]	; (9bc <usart_write_buffer_job+0x1c>)
     9b6:	4798      	blx	r3
     9b8:	0003      	movs	r3, r0
     9ba:	e7f5      	b.n	9a8 <usart_write_buffer_job+0x8>
     9bc:	000008fd 	.word	0x000008fd

000009c0 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     9c0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     9c2:	2317      	movs	r3, #23
	if (length == 0) {
     9c4:	2a00      	cmp	r2, #0
     9c6:	d101      	bne.n	9cc <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
     9c8:	0018      	movs	r0, r3
     9ca:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
     9cc:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
     9ce:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
     9d0:	2c00      	cmp	r4, #0
     9d2:	d0f9      	beq.n	9c8 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
     9d4:	4b01      	ldr	r3, [pc, #4]	; (9dc <usart_read_buffer_job+0x1c>)
     9d6:	4798      	blx	r3
     9d8:	0003      	movs	r3, r0
     9da:	e7f5      	b.n	9c8 <usart_read_buffer_job+0x8>
     9dc:	00000939 	.word	0x00000939

000009e0 <usart_get_job_status>:
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
     9e0:	2900      	cmp	r1, #0
     9e2:	d003      	beq.n	9ec <usart_get_job_status+0xc>
     9e4:	2901      	cmp	r1, #1
     9e6:	d005      	beq.n	9f4 <usart_get_job_status+0x14>
	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
			break;

	default:
			status_code = STATUS_ERR_INVALID_ARG;
     9e8:	2017      	movs	r0, #23
     9ea:	e002      	b.n	9f2 <usart_get_job_status+0x12>
			status_code = module->rx_status;
     9ec:	2332      	movs	r3, #50	; 0x32
     9ee:	5cc0      	ldrb	r0, [r0, r3]
     9f0:	b2c0      	uxtb	r0, r0
			break;
	}

	return status_code;
}
     9f2:	4770      	bx	lr
			status_code = module->tx_status;
     9f4:	2333      	movs	r3, #51	; 0x33
     9f6:	5cc0      	ldrb	r0, [r0, r3]
     9f8:	b2c0      	uxtb	r0, r0
			break;
     9fa:	e7fa      	b.n	9f2 <usart_get_job_status+0x12>

000009fc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     9fe:	0080      	lsls	r0, r0, #2
     a00:	4b62      	ldr	r3, [pc, #392]	; (b8c <_usart_interrupt_handler+0x190>)
     a02:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     a04:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     a06:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     a08:	2b00      	cmp	r3, #0
     a0a:	d1fc      	bne.n	a06 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     a0c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     a0e:	7da6      	ldrb	r6, [r4, #22]
     a10:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     a12:	2330      	movs	r3, #48	; 0x30
     a14:	5ceb      	ldrb	r3, [r5, r3]
     a16:	2231      	movs	r2, #49	; 0x31
     a18:	5caf      	ldrb	r7, [r5, r2]
     a1a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     a1c:	07f3      	lsls	r3, r6, #31
     a1e:	d522      	bpl.n	a66 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     a20:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     a22:	b29b      	uxth	r3, r3
     a24:	2b00      	cmp	r3, #0
     a26:	d01c      	beq.n	a62 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     a28:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     a2a:	7813      	ldrb	r3, [r2, #0]
     a2c:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     a2e:	1c51      	adds	r1, r2, #1
     a30:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     a32:	7969      	ldrb	r1, [r5, #5]
     a34:	2901      	cmp	r1, #1
     a36:	d00e      	beq.n	a56 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     a38:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     a3a:	05db      	lsls	r3, r3, #23
     a3c:	0ddb      	lsrs	r3, r3, #23
     a3e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     a40:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     a42:	3b01      	subs	r3, #1
     a44:	b29b      	uxth	r3, r3
     a46:	85eb      	strh	r3, [r5, #46]	; 0x2e
     a48:	2b00      	cmp	r3, #0
     a4a:	d10c      	bne.n	a66 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     a4c:	3301      	adds	r3, #1
     a4e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     a50:	3301      	adds	r3, #1
     a52:	75a3      	strb	r3, [r4, #22]
     a54:	e007      	b.n	a66 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     a56:	7851      	ldrb	r1, [r2, #1]
     a58:	0209      	lsls	r1, r1, #8
     a5a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     a5c:	3202      	adds	r2, #2
     a5e:	62aa      	str	r2, [r5, #40]	; 0x28
     a60:	e7eb      	b.n	a3a <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     a62:	2301      	movs	r3, #1
     a64:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     a66:	07b3      	lsls	r3, r6, #30
     a68:	d506      	bpl.n	a78 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     a6a:	2302      	movs	r3, #2
     a6c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     a6e:	2200      	movs	r2, #0
     a70:	3331      	adds	r3, #49	; 0x31
     a72:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     a74:	07fb      	lsls	r3, r7, #31
     a76:	d41a      	bmi.n	aae <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     a78:	0773      	lsls	r3, r6, #29
     a7a:	d565      	bpl.n	b48 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
     a7c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     a7e:	b29b      	uxth	r3, r3
     a80:	2b00      	cmp	r3, #0
     a82:	d05f      	beq.n	b44 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     a84:	8b63      	ldrh	r3, [r4, #26]
     a86:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     a88:	071a      	lsls	r2, r3, #28
     a8a:	d414      	bmi.n	ab6 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     a8c:	223f      	movs	r2, #63	; 0x3f
     a8e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     a90:	2b00      	cmp	r3, #0
     a92:	d034      	beq.n	afe <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     a94:	079a      	lsls	r2, r3, #30
     a96:	d511      	bpl.n	abc <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     a98:	221a      	movs	r2, #26
     a9a:	2332      	movs	r3, #50	; 0x32
     a9c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     a9e:	3b30      	subs	r3, #48	; 0x30
     aa0:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     aa2:	077b      	lsls	r3, r7, #29
     aa4:	d550      	bpl.n	b48 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     aa6:	0028      	movs	r0, r5
     aa8:	696b      	ldr	r3, [r5, #20]
     aaa:	4798      	blx	r3
     aac:	e04c      	b.n	b48 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     aae:	0028      	movs	r0, r5
     ab0:	68eb      	ldr	r3, [r5, #12]
     ab2:	4798      	blx	r3
     ab4:	e7e0      	b.n	a78 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     ab6:	2237      	movs	r2, #55	; 0x37
     ab8:	4013      	ands	r3, r2
     aba:	e7e9      	b.n	a90 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     abc:	075a      	lsls	r2, r3, #29
     abe:	d505      	bpl.n	acc <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
     ac0:	221e      	movs	r2, #30
     ac2:	2332      	movs	r3, #50	; 0x32
     ac4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     ac6:	3b2e      	subs	r3, #46	; 0x2e
     ac8:	8363      	strh	r3, [r4, #26]
     aca:	e7ea      	b.n	aa2 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     acc:	07da      	lsls	r2, r3, #31
     ace:	d505      	bpl.n	adc <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
     ad0:	2213      	movs	r2, #19
     ad2:	2332      	movs	r3, #50	; 0x32
     ad4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     ad6:	3b31      	subs	r3, #49	; 0x31
     ad8:	8363      	strh	r3, [r4, #26]
     ada:	e7e2      	b.n	aa2 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     adc:	06da      	lsls	r2, r3, #27
     ade:	d505      	bpl.n	aec <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
     ae0:	2242      	movs	r2, #66	; 0x42
     ae2:	2332      	movs	r3, #50	; 0x32
     ae4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     ae6:	3b22      	subs	r3, #34	; 0x22
     ae8:	8363      	strh	r3, [r4, #26]
     aea:	e7da      	b.n	aa2 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     aec:	2220      	movs	r2, #32
     aee:	421a      	tst	r2, r3
     af0:	d0d7      	beq.n	aa2 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     af2:	3221      	adds	r2, #33	; 0x21
     af4:	2332      	movs	r3, #50	; 0x32
     af6:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     af8:	3b12      	subs	r3, #18
     afa:	8363      	strh	r3, [r4, #26]
     afc:	e7d1      	b.n	aa2 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     afe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     b00:	05db      	lsls	r3, r3, #23
     b02:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     b04:	b2da      	uxtb	r2, r3
     b06:	6a69      	ldr	r1, [r5, #36]	; 0x24
     b08:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     b0a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     b0c:	1c51      	adds	r1, r2, #1
     b0e:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     b10:	7969      	ldrb	r1, [r5, #5]
     b12:	2901      	cmp	r1, #1
     b14:	d010      	beq.n	b38 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     b16:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     b18:	3b01      	subs	r3, #1
     b1a:	b29b      	uxth	r3, r3
     b1c:	85ab      	strh	r3, [r5, #44]	; 0x2c
     b1e:	2b00      	cmp	r3, #0
     b20:	d112      	bne.n	b48 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     b22:	3304      	adds	r3, #4
     b24:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     b26:	2200      	movs	r2, #0
     b28:	332e      	adds	r3, #46	; 0x2e
     b2a:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     b2c:	07bb      	lsls	r3, r7, #30
     b2e:	d50b      	bpl.n	b48 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     b30:	0028      	movs	r0, r5
     b32:	692b      	ldr	r3, [r5, #16]
     b34:	4798      	blx	r3
     b36:	e007      	b.n	b48 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     b38:	0a1b      	lsrs	r3, r3, #8
     b3a:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     b3c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     b3e:	3301      	adds	r3, #1
     b40:	626b      	str	r3, [r5, #36]	; 0x24
     b42:	e7e8      	b.n	b16 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     b44:	2304      	movs	r3, #4
     b46:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     b48:	06f3      	lsls	r3, r6, #27
     b4a:	d504      	bpl.n	b56 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     b4c:	2310      	movs	r3, #16
     b4e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     b50:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     b52:	06fb      	lsls	r3, r7, #27
     b54:	d40e      	bmi.n	b74 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     b56:	06b3      	lsls	r3, r6, #26
     b58:	d504      	bpl.n	b64 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     b5a:	2320      	movs	r3, #32
     b5c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     b5e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     b60:	073b      	lsls	r3, r7, #28
     b62:	d40b      	bmi.n	b7c <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     b64:	0733      	lsls	r3, r6, #28
     b66:	d504      	bpl.n	b72 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     b68:	2308      	movs	r3, #8
     b6a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     b6c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     b6e:	06bb      	lsls	r3, r7, #26
     b70:	d408      	bmi.n	b84 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     b74:	0028      	movs	r0, r5
     b76:	69eb      	ldr	r3, [r5, #28]
     b78:	4798      	blx	r3
     b7a:	e7ec      	b.n	b56 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     b7c:	0028      	movs	r0, r5
     b7e:	69ab      	ldr	r3, [r5, #24]
     b80:	4798      	blx	r3
     b82:	e7ef      	b.n	b64 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     b84:	6a2b      	ldr	r3, [r5, #32]
     b86:	0028      	movs	r0, r5
     b88:	4798      	blx	r3
}
     b8a:	e7f2      	b.n	b72 <_usart_interrupt_handler+0x176>
     b8c:	20003268 	.word	0x20003268

00000b90 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     b90:	4770      	bx	lr
	...

00000b94 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     b94:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     b96:	4b0a      	ldr	r3, [pc, #40]	; (bc0 <_sercom_set_handler+0x2c>)
     b98:	781b      	ldrb	r3, [r3, #0]
     b9a:	2b00      	cmp	r3, #0
     b9c:	d10c      	bne.n	bb8 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     b9e:	4f09      	ldr	r7, [pc, #36]	; (bc4 <_sercom_set_handler+0x30>)
     ba0:	4e09      	ldr	r6, [pc, #36]	; (bc8 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     ba2:	4d0a      	ldr	r5, [pc, #40]	; (bcc <_sercom_set_handler+0x38>)
     ba4:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     ba6:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     ba8:	195a      	adds	r2, r3, r5
     baa:	6014      	str	r4, [r2, #0]
     bac:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     bae:	2b18      	cmp	r3, #24
     bb0:	d1f9      	bne.n	ba6 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     bb2:	2201      	movs	r2, #1
     bb4:	4b02      	ldr	r3, [pc, #8]	; (bc0 <_sercom_set_handler+0x2c>)
     bb6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     bb8:	0080      	lsls	r0, r0, #2
     bba:	4b02      	ldr	r3, [pc, #8]	; (bc4 <_sercom_set_handler+0x30>)
     bbc:	50c1      	str	r1, [r0, r3]
}
     bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bc0:	200001f6 	.word	0x200001f6
     bc4:	200001f8 	.word	0x200001f8
     bc8:	00000b91 	.word	0x00000b91
     bcc:	20003268 	.word	0x20003268

00000bd0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     bd0:	b500      	push	{lr}
     bd2:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     bd4:	2309      	movs	r3, #9
     bd6:	466a      	mov	r2, sp
     bd8:	7013      	strb	r3, [r2, #0]
     bda:	3301      	adds	r3, #1
     bdc:	7053      	strb	r3, [r2, #1]
     bde:	3301      	adds	r3, #1
     be0:	7093      	strb	r3, [r2, #2]
     be2:	3301      	adds	r3, #1
     be4:	70d3      	strb	r3, [r2, #3]
     be6:	3301      	adds	r3, #1
     be8:	7113      	strb	r3, [r2, #4]
     bea:	3301      	adds	r3, #1
     bec:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     bee:	4b03      	ldr	r3, [pc, #12]	; (bfc <_sercom_get_interrupt_vector+0x2c>)
     bf0:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     bf2:	466b      	mov	r3, sp
     bf4:	5618      	ldrsb	r0, [r3, r0]
}
     bf6:	b003      	add	sp, #12
     bf8:	bd00      	pop	{pc}
     bfa:	46c0      	nop			; (mov r8, r8)
     bfc:	00000451 	.word	0x00000451

00000c00 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     c00:	b510      	push	{r4, lr}
     c02:	4b02      	ldr	r3, [pc, #8]	; (c0c <SERCOM0_Handler+0xc>)
     c04:	681b      	ldr	r3, [r3, #0]
     c06:	2000      	movs	r0, #0
     c08:	4798      	blx	r3
     c0a:	bd10      	pop	{r4, pc}
     c0c:	200001f8 	.word	0x200001f8

00000c10 <SERCOM1_Handler>:
     c10:	b510      	push	{r4, lr}
     c12:	4b02      	ldr	r3, [pc, #8]	; (c1c <SERCOM1_Handler+0xc>)
     c14:	685b      	ldr	r3, [r3, #4]
     c16:	2001      	movs	r0, #1
     c18:	4798      	blx	r3
     c1a:	bd10      	pop	{r4, pc}
     c1c:	200001f8 	.word	0x200001f8

00000c20 <SERCOM2_Handler>:
     c20:	b510      	push	{r4, lr}
     c22:	4b02      	ldr	r3, [pc, #8]	; (c2c <SERCOM2_Handler+0xc>)
     c24:	689b      	ldr	r3, [r3, #8]
     c26:	2002      	movs	r0, #2
     c28:	4798      	blx	r3
     c2a:	bd10      	pop	{r4, pc}
     c2c:	200001f8 	.word	0x200001f8

00000c30 <SERCOM3_Handler>:
     c30:	b510      	push	{r4, lr}
     c32:	4b02      	ldr	r3, [pc, #8]	; (c3c <SERCOM3_Handler+0xc>)
     c34:	68db      	ldr	r3, [r3, #12]
     c36:	2003      	movs	r0, #3
     c38:	4798      	blx	r3
     c3a:	bd10      	pop	{r4, pc}
     c3c:	200001f8 	.word	0x200001f8

00000c40 <SERCOM4_Handler>:
     c40:	b510      	push	{r4, lr}
     c42:	4b02      	ldr	r3, [pc, #8]	; (c4c <SERCOM4_Handler+0xc>)
     c44:	691b      	ldr	r3, [r3, #16]
     c46:	2004      	movs	r0, #4
     c48:	4798      	blx	r3
     c4a:	bd10      	pop	{r4, pc}
     c4c:	200001f8 	.word	0x200001f8

00000c50 <SERCOM5_Handler>:
     c50:	b510      	push	{r4, lr}
     c52:	4b02      	ldr	r3, [pc, #8]	; (c5c <SERCOM5_Handler+0xc>)
     c54:	695b      	ldr	r3, [r3, #20]
     c56:	2005      	movs	r0, #5
     c58:	4798      	blx	r3
     c5a:	bd10      	pop	{r4, pc}
     c5c:	200001f8 	.word	0x200001f8

00000c60 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
     c60:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
     c62:	2300      	movs	r3, #0
     c64:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
     c66:	4b06      	ldr	r3, [pc, #24]	; (c80 <prvTaskExitError+0x20>)
     c68:	681b      	ldr	r3, [r3, #0]
     c6a:	3301      	adds	r3, #1
     c6c:	d001      	beq.n	c72 <prvTaskExitError+0x12>
     c6e:	b672      	cpsid	i
     c70:	e7fe      	b.n	c70 <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
     c72:	b672      	cpsid	i
	while( ulDummy == 0 )
     c74:	9b01      	ldr	r3, [sp, #4]
     c76:	2b00      	cmp	r3, #0
     c78:	d0fc      	beq.n	c74 <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
     c7a:	b002      	add	sp, #8
     c7c:	4770      	bx	lr
     c7e:	46c0      	nop			; (mov r8, r8)
     c80:	20000000 	.word	0x20000000
	...

00000c90 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
     c90:	4a0b      	ldr	r2, [pc, #44]	; (cc0 <pxCurrentTCBConst2>)
     c92:	6813      	ldr	r3, [r2, #0]
     c94:	6818      	ldr	r0, [r3, #0]
     c96:	3020      	adds	r0, #32
     c98:	f380 8809 	msr	PSP, r0
     c9c:	2002      	movs	r0, #2
     c9e:	f380 8814 	msr	CONTROL, r0
     ca2:	f3bf 8f6f 	isb	sy
     ca6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
     ca8:	46ae      	mov	lr, r5
     caa:	bc08      	pop	{r3}
     cac:	bc04      	pop	{r2}
     cae:	b662      	cpsie	i
     cb0:	4718      	bx	r3
     cb2:	46c0      	nop			; (mov r8, r8)
     cb4:	46c0      	nop			; (mov r8, r8)
     cb6:	46c0      	nop			; (mov r8, r8)
     cb8:	46c0      	nop			; (mov r8, r8)
     cba:	46c0      	nop			; (mov r8, r8)
     cbc:	46c0      	nop			; (mov r8, r8)
     cbe:	46c0      	nop			; (mov r8, r8)

00000cc0 <pxCurrentTCBConst2>:
     cc0:	200030f8 	.word	0x200030f8

00000cc4 <pxPortInitialiseStack>:
{
     cc4:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
     cc6:	1f03      	subs	r3, r0, #4
     cc8:	2480      	movs	r4, #128	; 0x80
     cca:	0464      	lsls	r4, r4, #17
     ccc:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
     cce:	3b04      	subs	r3, #4
     cd0:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
     cd2:	3b04      	subs	r3, #4
     cd4:	4902      	ldr	r1, [pc, #8]	; (ce0 <pxPortInitialiseStack+0x1c>)
     cd6:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
     cd8:	3b14      	subs	r3, #20
     cda:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
     cdc:	3840      	subs	r0, #64	; 0x40
}
     cde:	bd10      	pop	{r4, pc}
     ce0:	00000c61 	.word	0x00000c61

00000ce4 <SVC_Handler>:
}
     ce4:	4770      	bx	lr
	...

00000ce8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
     ce8:	b570      	push	{r4, r5, r6, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
     cea:	4b13      	ldr	r3, [pc, #76]	; (d38 <xPortStartScheduler+0x50>)
     cec:	6819      	ldr	r1, [r3, #0]
     cee:	22ff      	movs	r2, #255	; 0xff
     cf0:	0412      	lsls	r2, r2, #16
     cf2:	430a      	orrs	r2, r1
     cf4:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
     cf6:	6819      	ldr	r1, [r3, #0]
     cf8:	22ff      	movs	r2, #255	; 0xff
     cfa:	0612      	lsls	r2, r2, #24
     cfc:	430a      	orrs	r2, r1
     cfe:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
     d00:	4d0e      	ldr	r5, [pc, #56]	; (d3c <xPortStartScheduler+0x54>)
     d02:	2400      	movs	r4, #0
     d04:	602c      	str	r4, [r5, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
     d06:	4b0e      	ldr	r3, [pc, #56]	; (d40 <xPortStartScheduler+0x58>)
     d08:	601c      	str	r4, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
     d0a:	2000      	movs	r0, #0
     d0c:	4b0d      	ldr	r3, [pc, #52]	; (d44 <xPortStartScheduler+0x5c>)
     d0e:	4798      	blx	r3
     d10:	21fa      	movs	r1, #250	; 0xfa
     d12:	0089      	lsls	r1, r1, #2
     d14:	4b0c      	ldr	r3, [pc, #48]	; (d48 <xPortStartScheduler+0x60>)
     d16:	4798      	blx	r3
     d18:	3801      	subs	r0, #1
     d1a:	4b0c      	ldr	r3, [pc, #48]	; (d4c <xPortStartScheduler+0x64>)
     d1c:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
     d1e:	2307      	movs	r3, #7
     d20:	602b      	str	r3, [r5, #0]
	uxCriticalNesting = 0;
     d22:	4b0b      	ldr	r3, [pc, #44]	; (d50 <xPortStartScheduler+0x68>)
     d24:	601c      	str	r4, [r3, #0]
	vPortStartFirstTask();
     d26:	4b0b      	ldr	r3, [pc, #44]	; (d54 <xPortStartScheduler+0x6c>)
     d28:	4798      	blx	r3
	vTaskSwitchContext();
     d2a:	4b0b      	ldr	r3, [pc, #44]	; (d58 <xPortStartScheduler+0x70>)
     d2c:	4798      	blx	r3
	prvTaskExitError();
     d2e:	4b0b      	ldr	r3, [pc, #44]	; (d5c <xPortStartScheduler+0x74>)
     d30:	4798      	blx	r3
}
     d32:	2000      	movs	r0, #0
     d34:	bd70      	pop	{r4, r5, r6, pc}
     d36:	46c0      	nop			; (mov r8, r8)
     d38:	e000ed20 	.word	0xe000ed20
     d3c:	e000e010 	.word	0xe000e010
     d40:	e000e018 	.word	0xe000e018
     d44:	00002b75 	.word	0x00002b75
     d48:	00002fe9 	.word	0x00002fe9
     d4c:	e000e014 	.word	0xe000e014
     d50:	20000000 	.word	0x20000000
     d54:	00000c91 	.word	0x00000c91
     d58:	00001efd 	.word	0x00001efd
     d5c:	00000c61 	.word	0x00000c61

00000d60 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
     d60:	2280      	movs	r2, #128	; 0x80
     d62:	0552      	lsls	r2, r2, #21
     d64:	4b03      	ldr	r3, [pc, #12]	; (d74 <vPortYield+0x14>)
     d66:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
     d68:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
     d6c:	f3bf 8f6f 	isb	sy
}
     d70:	4770      	bx	lr
     d72:	46c0      	nop			; (mov r8, r8)
     d74:	e000ed04 	.word	0xe000ed04

00000d78 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
     d78:	b672      	cpsid	i
    uxCriticalNesting++;
     d7a:	4a04      	ldr	r2, [pc, #16]	; (d8c <vPortEnterCritical+0x14>)
     d7c:	6813      	ldr	r3, [r2, #0]
     d7e:	3301      	adds	r3, #1
     d80:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
     d82:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
     d86:	f3bf 8f6f 	isb	sy
}
     d8a:	4770      	bx	lr
     d8c:	20000000 	.word	0x20000000

00000d90 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
     d90:	4b06      	ldr	r3, [pc, #24]	; (dac <vPortExitCritical+0x1c>)
     d92:	681b      	ldr	r3, [r3, #0]
     d94:	2b00      	cmp	r3, #0
     d96:	d101      	bne.n	d9c <vPortExitCritical+0xc>
     d98:	b672      	cpsid	i
     d9a:	e7fe      	b.n	d9a <vPortExitCritical+0xa>
    uxCriticalNesting--;
     d9c:	3b01      	subs	r3, #1
     d9e:	4a03      	ldr	r2, [pc, #12]	; (dac <vPortExitCritical+0x1c>)
     da0:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
     da2:	2b00      	cmp	r3, #0
     da4:	d100      	bne.n	da8 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
     da6:	b662      	cpsie	i
}
     da8:	4770      	bx	lr
     daa:	46c0      	nop			; (mov r8, r8)
     dac:	20000000 	.word	0x20000000

00000db0 <ulSetInterruptMaskFromISR>:
	__asm volatile(
     db0:	f3ef 8010 	mrs	r0, PRIMASK
     db4:	b672      	cpsid	i
     db6:	4770      	bx	lr

00000db8 <vClearInterruptMaskFromISR>:
	__asm volatile(
     db8:	f380 8810 	msr	PRIMASK, r0
     dbc:	4770      	bx	lr
	...

00000dc0 <PendSV_Handler>:
	__asm volatile
     dc0:	f3ef 8009 	mrs	r0, PSP
     dc4:	4b0e      	ldr	r3, [pc, #56]	; (e00 <pxCurrentTCBConst>)
     dc6:	681a      	ldr	r2, [r3, #0]
     dc8:	3820      	subs	r0, #32
     dca:	6010      	str	r0, [r2, #0]
     dcc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
     dce:	4644      	mov	r4, r8
     dd0:	464d      	mov	r5, r9
     dd2:	4656      	mov	r6, sl
     dd4:	465f      	mov	r7, fp
     dd6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
     dd8:	b508      	push	{r3, lr}
     dda:	b672      	cpsid	i
     ddc:	f001 f88e 	bl	1efc <vTaskSwitchContext>
     de0:	b662      	cpsie	i
     de2:	bc0c      	pop	{r2, r3}
     de4:	6811      	ldr	r1, [r2, #0]
     de6:	6808      	ldr	r0, [r1, #0]
     de8:	3010      	adds	r0, #16
     dea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     dec:	46a0      	mov	r8, r4
     dee:	46a9      	mov	r9, r5
     df0:	46b2      	mov	sl, r6
     df2:	46bb      	mov	fp, r7
     df4:	f380 8809 	msr	PSP, r0
     df8:	3820      	subs	r0, #32
     dfa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     dfc:	4718      	bx	r3
     dfe:	46c0      	nop			; (mov r8, r8)

00000e00 <pxCurrentTCBConst>:
     e00:	200030f8 	.word	0x200030f8

00000e04 <SysTick_Handler>:
{
     e04:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
     e06:	4b07      	ldr	r3, [pc, #28]	; (e24 <SysTick_Handler+0x20>)
     e08:	4798      	blx	r3
     e0a:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
     e0c:	4b06      	ldr	r3, [pc, #24]	; (e28 <SysTick_Handler+0x24>)
     e0e:	4798      	blx	r3
     e10:	2800      	cmp	r0, #0
     e12:	d003      	beq.n	e1c <SysTick_Handler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
     e14:	2280      	movs	r2, #128	; 0x80
     e16:	0552      	lsls	r2, r2, #21
     e18:	4b04      	ldr	r3, [pc, #16]	; (e2c <SysTick_Handler+0x28>)
     e1a:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
     e1c:	0020      	movs	r0, r4
     e1e:	4b04      	ldr	r3, [pc, #16]	; (e30 <SysTick_Handler+0x2c>)
     e20:	4798      	blx	r3
}
     e22:	bd10      	pop	{r4, pc}
     e24:	00000db1 	.word	0x00000db1
     e28:	00001c9d 	.word	0x00001c9d
     e2c:	e000ed04 	.word	0xe000ed04
     e30:	00000db9 	.word	0x00000db9

00000e34 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     e34:	b570      	push	{r4, r5, r6, lr}
     e36:	0004      	movs	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
     e38:	0743      	lsls	r3, r0, #29
     e3a:	d002      	beq.n	e42 <pvPortMalloc+0xe>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
     e3c:	2307      	movs	r3, #7
     e3e:	439c      	bics	r4, r3
     e40:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
     e42:	4b13      	ldr	r3, [pc, #76]	; (e90 <pvPortMalloc+0x5c>)
     e44:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
     e46:	4b13      	ldr	r3, [pc, #76]	; (e94 <pvPortMalloc+0x60>)
     e48:	681b      	ldr	r3, [r3, #0]
     e4a:	2b00      	cmp	r3, #0
     e4c:	d012      	beq.n	e74 <pvPortMalloc+0x40>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     e4e:	4b12      	ldr	r3, [pc, #72]	; (e98 <pvPortMalloc+0x64>)
     e50:	681b      	ldr	r3, [r3, #0]
     e52:	18e4      	adds	r4, r4, r3
     e54:	4a11      	ldr	r2, [pc, #68]	; (e9c <pvPortMalloc+0x68>)
     e56:	4294      	cmp	r4, r2
     e58:	d813      	bhi.n	e82 <pvPortMalloc+0x4e>
     e5a:	42a3      	cmp	r3, r4
     e5c:	d211      	bcs.n	e82 <pvPortMalloc+0x4e>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     e5e:	4a0d      	ldr	r2, [pc, #52]	; (e94 <pvPortMalloc+0x60>)
     e60:	6815      	ldr	r5, [r2, #0]
     e62:	18ed      	adds	r5, r5, r3
			xNextFreeByte += xWantedSize;
     e64:	4b0c      	ldr	r3, [pc, #48]	; (e98 <pvPortMalloc+0x64>)
     e66:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     e68:	4b0d      	ldr	r3, [pc, #52]	; (ea0 <pvPortMalloc+0x6c>)
     e6a:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
     e6c:	2d00      	cmp	r5, #0
     e6e:	d00a      	beq.n	e86 <pvPortMalloc+0x52>
		}
	}
	#endif

	return pvReturn;
}
     e70:	0028      	movs	r0, r5
     e72:	bd70      	pop	{r4, r5, r6, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
     e74:	2207      	movs	r2, #7
     e76:	4b0b      	ldr	r3, [pc, #44]	; (ea4 <pvPortMalloc+0x70>)
     e78:	3308      	adds	r3, #8
     e7a:	4393      	bics	r3, r2
     e7c:	4a05      	ldr	r2, [pc, #20]	; (e94 <pvPortMalloc+0x60>)
     e7e:	6013      	str	r3, [r2, #0]
     e80:	e7e5      	b.n	e4e <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
     e82:	4b07      	ldr	r3, [pc, #28]	; (ea0 <pvPortMalloc+0x6c>)
     e84:	4798      	blx	r3
			vApplicationMallocFailedHook();
     e86:	4b08      	ldr	r3, [pc, #32]	; (ea8 <pvPortMalloc+0x74>)
     e88:	4798      	blx	r3
     e8a:	2500      	movs	r5, #0
	return pvReturn;
     e8c:	e7f0      	b.n	e70 <pvPortMalloc+0x3c>
     e8e:	46c0      	nop			; (mov r8, r8)
     e90:	00001c81 	.word	0x00001c81
     e94:	20000210 	.word	0x20000210
     e98:	200030f4 	.word	0x200030f4
     e9c:	00002ed7 	.word	0x00002ed7
     ea0:	00001dbd 	.word	0x00001dbd
     ea4:	20000214 	.word	0x20000214
     ea8:	00002fe3 	.word	0x00002fe3

00000eac <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
     eac:	2800      	cmp	r0, #0
     eae:	d001      	beq.n	eb4 <vPortFree+0x8>
     eb0:	b672      	cpsid	i
     eb2:	e7fe      	b.n	eb2 <vPortFree+0x6>
}
     eb4:	4770      	bx	lr
	...

00000eb8 <dUART_WriteCallback>:
* @param[out]	N/A
* @return		N/A
* @note
*****************************************************************************/
void dUART_WriteCallback(struct usart_module *const usart_module)
{
     eb8:	b510      	push	{r4, lr}
    // Only continue if there are more characters to send
	if (circular_buf_get(cbufTx, (uint8_t *)&latestTx) != -1)  
     eba:	4b06      	ldr	r3, [pc, #24]	; (ed4 <dUART_WriteCallback+0x1c>)
     ebc:	6818      	ldr	r0, [r3, #0]
     ebe:	4906      	ldr	r1, [pc, #24]	; (ed8 <dUART_WriteCallback+0x20>)
     ec0:	4b06      	ldr	r3, [pc, #24]	; (edc <dUART_WriteCallback+0x24>)
     ec2:	4798      	blx	r3
     ec4:	1c43      	adds	r3, r0, #1
     ec6:	d004      	beq.n	ed2 <dUART_WriteCallback+0x1a>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
     ec8:	2201      	movs	r2, #1
     eca:	4903      	ldr	r1, [pc, #12]	; (ed8 <dUART_WriteCallback+0x20>)
     ecc:	4804      	ldr	r0, [pc, #16]	; (ee0 <dUART_WriteCallback+0x28>)
     ece:	4b05      	ldr	r3, [pc, #20]	; (ee4 <dUART_WriteCallback+0x2c>)
     ed0:	4798      	blx	r3
    }
     ed2:	bd10      	pop	{r4, pc}
     ed4:	200036d8 	.word	0x200036d8
     ed8:	200036c0 	.word	0x200036c0
     edc:	00000515 	.word	0x00000515
     ee0:	20003280 	.word	0x20003280
     ee4:	000009a1 	.word	0x000009a1

00000ee8 <dUART_WriteString>:
{
     ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
     eea:	46c6      	mov	lr, r8
     eec:	b500      	push	{lr}
     eee:	0005      	movs	r5, r0
     ef0:	2400      	movs	r4, #0
    if (string != NULL) {
     ef2:	2800      	cmp	r0, #0
     ef4:	d012      	beq.n	f1c <dUART_WriteString+0x34>
        for (size_t iter = 0; iter < strlen(string); iter++) {
     ef6:	4e11      	ldr	r6, [pc, #68]	; (f3c <dUART_WriteString+0x54>)
            circular_buf_put(cbufTx, string[iter]);
     ef8:	4f11      	ldr	r7, [pc, #68]	; (f40 <dUART_WriteString+0x58>)
     efa:	4b12      	ldr	r3, [pc, #72]	; (f44 <dUART_WriteString+0x5c>)
     efc:	4698      	mov	r8, r3
     efe:	e003      	b.n	f08 <dUART_WriteString+0x20>
     f00:	5d29      	ldrb	r1, [r5, r4]
     f02:	6838      	ldr	r0, [r7, #0]
     f04:	47c0      	blx	r8
        for (size_t iter = 0; iter < strlen(string); iter++) {
     f06:	3401      	adds	r4, #1
     f08:	0028      	movs	r0, r5
     f0a:	47b0      	blx	r6
     f0c:	4284      	cmp	r4, r0
     f0e:	d3f7      	bcc.n	f00 <dUART_WriteString+0x18>
        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
     f10:	2101      	movs	r1, #1
     f12:	480d      	ldr	r0, [pc, #52]	; (f48 <dUART_WriteString+0x60>)
     f14:	4b0d      	ldr	r3, [pc, #52]	; (f4c <dUART_WriteString+0x64>)
     f16:	4798      	blx	r3
     f18:	2800      	cmp	r0, #0
     f1a:	d002      	beq.n	f22 <dUART_WriteString+0x3a>
}
     f1c:	bc04      	pop	{r2}
     f1e:	4690      	mov	r8, r2
     f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
            circular_buf_get(cbufTx, (uint8_t *)&latestTx);  // Perform only if the SERCOM TX is free (not busy)
     f22:	4c0b      	ldr	r4, [pc, #44]	; (f50 <dUART_WriteString+0x68>)
     f24:	4b06      	ldr	r3, [pc, #24]	; (f40 <dUART_WriteString+0x58>)
     f26:	6818      	ldr	r0, [r3, #0]
     f28:	0021      	movs	r1, r4
     f2a:	4b0a      	ldr	r3, [pc, #40]	; (f54 <dUART_WriteString+0x6c>)
     f2c:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
     f2e:	2201      	movs	r2, #1
     f30:	0021      	movs	r1, r4
     f32:	4805      	ldr	r0, [pc, #20]	; (f48 <dUART_WriteString+0x60>)
     f34:	4b08      	ldr	r3, [pc, #32]	; (f58 <dUART_WriteString+0x70>)
     f36:	4798      	blx	r3
}
     f38:	e7f0      	b.n	f1c <dUART_WriteString+0x34>
     f3a:	46c0      	nop			; (mov r8, r8)
     f3c:	000033b9 	.word	0x000033b9
     f40:	200036d8 	.word	0x200036d8
     f44:	000004e9 	.word	0x000004e9
     f48:	20003280 	.word	0x20003280
     f4c:	000009e1 	.word	0x000009e1
     f50:	200036c0 	.word	0x200036c0
     f54:	00000515 	.word	0x00000515
     f58:	000009a1 	.word	0x000009a1

00000f5c <dUART_Task>:
void dUART_Task(void * parameter) {
     f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
     f5e:	b089      	sub	sp, #36	; 0x24
		if(xQueueReceive(MsgQueue, (void*)&value, 0) == pdTRUE) {
     f60:	4d1e      	ldr	r5, [pc, #120]	; (fdc <dUART_Task+0x80>)
     f62:	4c1f      	ldr	r4, [pc, #124]	; (fe0 <dUART_Task+0x84>)
			if((uint8_t)latestRx == '\r') {
     f64:	4f1f      	ldr	r7, [pc, #124]	; (fe4 <dUART_Task+0x88>)
     f66:	e026      	b.n	fb6 <dUART_Task+0x5a>
				dUART_WriteString((char *)"\r\n");
     f68:	481f      	ldr	r0, [pc, #124]	; (fe8 <dUART_Task+0x8c>)
     f6a:	4b20      	ldr	r3, [pc, #128]	; (fec <dUART_Task+0x90>)
     f6c:	4798      	blx	r3
				snprintf(Command, MAX_INPUT_LENGTH_CLI - 1, rxCharacterBuffer);
     f6e:	4e20      	ldr	r6, [pc, #128]	; (ff0 <dUART_Task+0x94>)
     f70:	4a20      	ldr	r2, [pc, #128]	; (ff4 <dUART_Task+0x98>)
     f72:	2113      	movs	r1, #19
     f74:	0030      	movs	r0, r6
     f76:	4b20      	ldr	r3, [pc, #128]	; (ff8 <dUART_Task+0x9c>)
     f78:	4798      	blx	r3
				delay = CLI_ExtractCmd(Command, MAX_INPUT_LENGTH_CLI);
     f7a:	2114      	movs	r1, #20
     f7c:	0030      	movs	r0, r6
     f7e:	4b1f      	ldr	r3, [pc, #124]	; (ffc <dUART_Task+0xa0>)
     f80:	4798      	blx	r3
     f82:	9006      	str	r0, [sp, #24]
				vTaskDelay(1000 / portTICK_PERIOD_MS);
     f84:	20fa      	movs	r0, #250	; 0xfa
     f86:	0080      	lsls	r0, r0, #2
     f88:	4b1d      	ldr	r3, [pc, #116]	; (1000 <dUART_Task+0xa4>)
     f8a:	4798      	blx	r3
				circular_buf_reset(cbufRx);
     f8c:	4b1d      	ldr	r3, [pc, #116]	; (1004 <dUART_Task+0xa8>)
     f8e:	6818      	ldr	r0, [r3, #0]
     f90:	4b1d      	ldr	r3, [pc, #116]	; (1008 <dUART_Task+0xac>)
     f92:	4798      	blx	r3
				memset(Command, 0x00, MAX_INPUT_LENGTH_CLI);
     f94:	2214      	movs	r2, #20
     f96:	2100      	movs	r1, #0
     f98:	0030      	movs	r0, r6
     f9a:	4b1c      	ldr	r3, [pc, #112]	; (100c <dUART_Task+0xb0>)
     f9c:	4798      	blx	r3
				if(xQueueSend(LEDQueue, (const void* )&delay, pdFALSE) != pdTRUE) {
     f9e:	4b1c      	ldr	r3, [pc, #112]	; (1010 <dUART_Task+0xb4>)
     fa0:	6818      	ldr	r0, [r3, #0]
     fa2:	2300      	movs	r3, #0
     fa4:	2200      	movs	r2, #0
     fa6:	a906      	add	r1, sp, #24
     fa8:	4e1a      	ldr	r6, [pc, #104]	; (1014 <dUART_Task+0xb8>)
     faa:	47b0      	blx	r6
     fac:	2801      	cmp	r0, #1
     fae:	d002      	beq.n	fb6 <dUART_Task+0x5a>
					dUART_WriteString("LED Queue Full!!\r\n");
     fb0:	4819      	ldr	r0, [pc, #100]	; (1018 <dUART_Task+0xbc>)
     fb2:	4b0e      	ldr	r3, [pc, #56]	; (fec <dUART_Task+0x90>)
     fb4:	4798      	blx	r3
		if(xQueueReceive(MsgQueue, (void*)&value, 0) == pdTRUE) {
     fb6:	2200      	movs	r2, #0
     fb8:	a907      	add	r1, sp, #28
     fba:	6828      	ldr	r0, [r5, #0]
     fbc:	47a0      	blx	r4
     fbe:	2801      	cmp	r0, #1
     fc0:	d1f9      	bne.n	fb6 <dUART_Task+0x5a>
			if((uint8_t)latestRx == '\r') {
     fc2:	783b      	ldrb	r3, [r7, #0]
     fc4:	2b0d      	cmp	r3, #13
     fc6:	d0cf      	beq.n	f68 <dUART_Task+0xc>
				snprintf(str, sizeof(str), "%c", latestRx);
     fc8:	4a14      	ldr	r2, [pc, #80]	; (101c <dUART_Task+0xc0>)
     fca:	2114      	movs	r1, #20
     fcc:	a801      	add	r0, sp, #4
     fce:	4e0a      	ldr	r6, [pc, #40]	; (ff8 <dUART_Task+0x9c>)
     fd0:	47b0      	blx	r6
				dUART_WriteString(str);
     fd2:	a801      	add	r0, sp, #4
     fd4:	4b05      	ldr	r3, [pc, #20]	; (fec <dUART_Task+0x90>)
     fd6:	4798      	blx	r3
     fd8:	e7ed      	b.n	fb6 <dUART_Task+0x5a>
     fda:	46c0      	nop			; (mov r8, r8)
     fdc:	200032b4 	.word	0x200032b4
     fe0:	0000173d 	.word	0x0000173d
     fe4:	200032bc 	.word	0x200032bc
     fe8:	00003ce8 	.word	0x00003ce8
     fec:	00000ee9 	.word	0x00000ee9
     ff0:	200036c4 	.word	0x200036c4
     ff4:	200034c0 	.word	0x200034c0
     ff8:	00003355 	.word	0x00003355
     ffc:	0000054d 	.word	0x0000054d
    1000:	00001ebd 	.word	0x00001ebd
    1004:	200032b8 	.word	0x200032b8
    1008:	000004dd 	.word	0x000004dd
    100c:	000031cf 	.word	0x000031cf
    1010:	20003264 	.word	0x20003264
    1014:	000014e1 	.word	0x000014e1
    1018:	00003cd8 	.word	0x00003cd8
    101c:	00003cec 	.word	0x00003cec

00001020 <dUART_ReadCallback>:
{
    1020:	b510      	push	{r4, lr}
	circular_buf_put(cbufRx, (uint8_t)latestRx);
    1022:	4c0c      	ldr	r4, [pc, #48]	; (1054 <dUART_ReadCallback+0x34>)
    1024:	7821      	ldrb	r1, [r4, #0]
    1026:	4b0c      	ldr	r3, [pc, #48]	; (1058 <dUART_ReadCallback+0x38>)
    1028:	6818      	ldr	r0, [r3, #0]
    102a:	4b0c      	ldr	r3, [pc, #48]	; (105c <dUART_ReadCallback+0x3c>)
    102c:	4798      	blx	r3
	if(xQueueSendFromISR(MsgQueue, (const void* )&latestRx, pdFALSE) != pdTRUE) {
    102e:	4b0c      	ldr	r3, [pc, #48]	; (1060 <dUART_ReadCallback+0x40>)
    1030:	6818      	ldr	r0, [r3, #0]
    1032:	2300      	movs	r3, #0
    1034:	2200      	movs	r2, #0
    1036:	0021      	movs	r1, r4
    1038:	4c0a      	ldr	r4, [pc, #40]	; (1064 <dUART_ReadCallback+0x44>)
    103a:	47a0      	blx	r4
    103c:	2801      	cmp	r0, #1
    103e:	d002      	beq.n	1046 <dUART_ReadCallback+0x26>
		dUART_WriteString("Queue Full!!\r\n");
    1040:	4809      	ldr	r0, [pc, #36]	; (1068 <dUART_ReadCallback+0x48>)
    1042:	4b0a      	ldr	r3, [pc, #40]	; (106c <dUART_ReadCallback+0x4c>)
    1044:	4798      	blx	r3
	usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  
    1046:	2201      	movs	r2, #1
    1048:	4902      	ldr	r1, [pc, #8]	; (1054 <dUART_ReadCallback+0x34>)
    104a:	4809      	ldr	r0, [pc, #36]	; (1070 <dUART_ReadCallback+0x50>)
    104c:	4b09      	ldr	r3, [pc, #36]	; (1074 <dUART_ReadCallback+0x54>)
    104e:	4798      	blx	r3
}
    1050:	bd10      	pop	{r4, pc}
    1052:	46c0      	nop			; (mov r8, r8)
    1054:	200032bc 	.word	0x200032bc
    1058:	200032b8 	.word	0x200032b8
    105c:	000004e9 	.word	0x000004e9
    1060:	200032b4 	.word	0x200032b4
    1064:	0000166d 	.word	0x0000166d
    1068:	00003cdc 	.word	0x00003cdc
    106c:	00000ee9 	.word	0x00000ee9
    1070:	20003280 	.word	0x20003280
    1074:	000009c1 	.word	0x000009c1

00001078 <dUART_Initialize>:
{
    1078:	b530      	push	{r4, r5, lr}
    107a:	b091      	sub	sp, #68	; 0x44
    cbufRx = circular_buf_init((uint8_t *)rxCharacterBuffer, RX_BUFFER_SIZE);
    107c:	2580      	movs	r5, #128	; 0x80
    107e:	00ad      	lsls	r5, r5, #2
    1080:	0029      	movs	r1, r5
    1082:	4839      	ldr	r0, [pc, #228]	; (1168 <dUART_Initialize+0xf0>)
    1084:	4c39      	ldr	r4, [pc, #228]	; (116c <dUART_Initialize+0xf4>)
    1086:	47a0      	blx	r4
    1088:	4b39      	ldr	r3, [pc, #228]	; (1170 <dUART_Initialize+0xf8>)
    108a:	6018      	str	r0, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *)txCharacterBuffer, RX_BUFFER_SIZE);
    108c:	0029      	movs	r1, r5
    108e:	4839      	ldr	r0, [pc, #228]	; (1174 <dUART_Initialize+0xfc>)
    1090:	47a0      	blx	r4
    1092:	4b39      	ldr	r3, [pc, #228]	; (1178 <dUART_Initialize+0x100>)
    1094:	6018      	str	r0, [r3, #0]
	MsgQueue = xQueueCreate(QUEUE_LENGTH, sizeof(char));
    1096:	2200      	movs	r2, #0
    1098:	2101      	movs	r1, #1
    109a:	2014      	movs	r0, #20
    109c:	4b37      	ldr	r3, [pc, #220]	; (117c <dUART_Initialize+0x104>)
    109e:	4798      	blx	r3
    10a0:	4b37      	ldr	r3, [pc, #220]	; (1180 <dUART_Initialize+0x108>)
    10a2:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    10a4:	2380      	movs	r3, #128	; 0x80
    10a6:	05db      	lsls	r3, r3, #23
    10a8:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    10aa:	2300      	movs	r3, #0
    10ac:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    10ae:	22ff      	movs	r2, #255	; 0xff
    10b0:	4669      	mov	r1, sp
    10b2:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    10b4:	2200      	movs	r2, #0
    10b6:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    10b8:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    10ba:	2101      	movs	r1, #1
    10bc:	2024      	movs	r0, #36	; 0x24
    10be:	466c      	mov	r4, sp
    10c0:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    10c2:	3001      	adds	r0, #1
    10c4:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    10c6:	3125      	adds	r1, #37	; 0x25
    10c8:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    10ca:	3101      	adds	r1, #1
    10cc:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    10ce:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    10d0:	3105      	adds	r1, #5
    10d2:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    10d4:	3101      	adds	r1, #1
    10d6:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    10d8:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    10da:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    10dc:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    10de:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    10e0:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    10e2:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    10e4:	2313      	movs	r3, #19
    10e6:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    10e8:	7762      	strb	r2, [r4, #29]
    config_usart.baudrate = 115200;
    10ea:	23e1      	movs	r3, #225	; 0xe1
    10ec:	025b      	lsls	r3, r3, #9
    10ee:	9308      	str	r3, [sp, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    10f0:	23c4      	movs	r3, #196	; 0xc4
    10f2:	039b      	lsls	r3, r3, #14
    10f4:	9303      	str	r3, [sp, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    10f6:	2301      	movs	r3, #1
    10f8:	425b      	negs	r3, r3
    10fa:	930c      	str	r3, [sp, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    10fc:	930d      	str	r3, [sp, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    10fe:	4b21      	ldr	r3, [pc, #132]	; (1184 <dUART_Initialize+0x10c>)
    1100:	930e      	str	r3, [sp, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    1102:	4b21      	ldr	r3, [pc, #132]	; (1188 <dUART_Initialize+0x110>)
    1104:	930f      	str	r3, [sp, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
    1106:	4d21      	ldr	r5, [pc, #132]	; (118c <dUART_Initialize+0x114>)
    1108:	4c21      	ldr	r4, [pc, #132]	; (1190 <dUART_Initialize+0x118>)
    110a:	466a      	mov	r2, sp
    110c:	4921      	ldr	r1, [pc, #132]	; (1194 <dUART_Initialize+0x11c>)
    110e:	0028      	movs	r0, r5
    1110:	47a0      	blx	r4
    1112:	2800      	cmp	r0, #0
    1114:	d1f9      	bne.n	110a <dUART_Initialize+0x92>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1116:	4d1d      	ldr	r5, [pc, #116]	; (118c <dUART_Initialize+0x114>)
    1118:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    111a:	0020      	movs	r0, r4
    111c:	4b1e      	ldr	r3, [pc, #120]	; (1198 <dUART_Initialize+0x120>)
    111e:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1120:	231f      	movs	r3, #31
    1122:	4018      	ands	r0, r3
    1124:	3b1e      	subs	r3, #30
    1126:	4083      	lsls	r3, r0
    1128:	4a1c      	ldr	r2, [pc, #112]	; (119c <dUART_Initialize+0x124>)
    112a:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    112c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    112e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1130:	2b00      	cmp	r3, #0
    1132:	d1fc      	bne.n	112e <dUART_Initialize+0xb6>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1134:	6823      	ldr	r3, [r4, #0]
    1136:	2202      	movs	r2, #2
    1138:	4313      	orrs	r3, r2
    113a:	6023      	str	r3, [r4, #0]
    usart_register_callback(&usart_instance, dUART_WriteCallback, USART_CALLBACK_BUFFER_TRANSMITTED);
    113c:	4c13      	ldr	r4, [pc, #76]	; (118c <dUART_Initialize+0x114>)
    113e:	2200      	movs	r2, #0
    1140:	4917      	ldr	r1, [pc, #92]	; (11a0 <dUART_Initialize+0x128>)
    1142:	0020      	movs	r0, r4
    1144:	4d17      	ldr	r5, [pc, #92]	; (11a4 <dUART_Initialize+0x12c>)
    1146:	47a8      	blx	r5
    usart_register_callback(&usart_instance, dUART_ReadCallback, USART_CALLBACK_BUFFER_RECEIVED);
    1148:	2201      	movs	r2, #1
    114a:	4917      	ldr	r1, [pc, #92]	; (11a8 <dUART_Initialize+0x130>)
    114c:	0020      	movs	r0, r4
    114e:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    1150:	2231      	movs	r2, #49	; 0x31
    1152:	5ca3      	ldrb	r3, [r4, r2]
    1154:	2103      	movs	r1, #3
    1156:	430b      	orrs	r3, r1
    1158:	54a3      	strb	r3, [r4, r2]
    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Kicks off constant reading of characters
    115a:	3a30      	subs	r2, #48	; 0x30
    115c:	4913      	ldr	r1, [pc, #76]	; (11ac <dUART_Initialize+0x134>)
    115e:	0020      	movs	r0, r4
    1160:	4b13      	ldr	r3, [pc, #76]	; (11b0 <dUART_Initialize+0x138>)
    1162:	4798      	blx	r3
}
    1164:	b011      	add	sp, #68	; 0x44
    1166:	bd30      	pop	{r4, r5, pc}
    1168:	200034c0 	.word	0x200034c0
    116c:	000004bd 	.word	0x000004bd
    1170:	200032b8 	.word	0x200032b8
    1174:	200032c0 	.word	0x200032c0
    1178:	200036d8 	.word	0x200036d8
    117c:	00001495 	.word	0x00001495
    1180:	200032b4 	.word	0x200032b4
    1184:	002a0003 	.word	0x002a0003
    1188:	002b0003 	.word	0x002b0003
    118c:	20003280 	.word	0x20003280
    1190:	000005c1 	.word	0x000005c1
    1194:	42001800 	.word	0x42001800
    1198:	00000bd1 	.word	0x00000bd1
    119c:	e000e100 	.word	0xe000e100
    11a0:	00000eb9 	.word	0x00000eb9
    11a4:	00000989 	.word	0x00000989
    11a8:	00001021 	.word	0x00001021
    11ac:	200032bc 	.word	0x200032bc
    11b0:	000009c1 	.word	0x000009c1

000011b4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    11b4:	0003      	movs	r3, r0
    11b6:	3308      	adds	r3, #8
    11b8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    11ba:	2201      	movs	r2, #1
    11bc:	4252      	negs	r2, r2
    11be:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    11c0:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    11c2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    11c4:	2300      	movs	r3, #0
    11c6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    11c8:	4770      	bx	lr

000011ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    11ca:	2300      	movs	r3, #0
    11cc:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    11ce:	4770      	bx	lr

000011d0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
    11d0:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    11d2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    11d4:	689a      	ldr	r2, [r3, #8]
    11d6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    11d8:	689a      	ldr	r2, [r3, #8]
    11da:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
    11dc:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    11de:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    11e0:	6803      	ldr	r3, [r0, #0]
    11e2:	3301      	adds	r3, #1
    11e4:	6003      	str	r3, [r0, #0]
}
    11e6:	4770      	bx	lr

000011e8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    11e8:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    11ea:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    11ec:	0002      	movs	r2, r0
    11ee:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
    11f0:	1c63      	adds	r3, r4, #1
    11f2:	d102      	bne.n	11fa <vListInsert+0x12>
		pxIterator = pxList->xListEnd.pxPrevious;
    11f4:	6902      	ldr	r2, [r0, #16]
    11f6:	e004      	b.n	1202 <vListInsert+0x1a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    11f8:	001a      	movs	r2, r3
    11fa:	6853      	ldr	r3, [r2, #4]
    11fc:	681d      	ldr	r5, [r3, #0]
    11fe:	42ac      	cmp	r4, r5
    1200:	d2fa      	bcs.n	11f8 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1202:	6853      	ldr	r3, [r2, #4]
    1204:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1206:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    1208:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
    120a:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    120c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    120e:	6803      	ldr	r3, [r0, #0]
    1210:	3301      	adds	r3, #1
    1212:	6003      	str	r3, [r0, #0]
}
    1214:	bd30      	pop	{r4, r5, pc}

00001216 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    1216:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1218:	6842      	ldr	r2, [r0, #4]
    121a:	6881      	ldr	r1, [r0, #8]
    121c:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    121e:	6882      	ldr	r2, [r0, #8]
    1220:	6841      	ldr	r1, [r0, #4]
    1222:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1224:	685a      	ldr	r2, [r3, #4]
    1226:	4290      	cmp	r0, r2
    1228:	d006      	beq.n	1238 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    122a:	2200      	movs	r2, #0
    122c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
    122e:	681a      	ldr	r2, [r3, #0]
    1230:	3a01      	subs	r2, #1
    1232:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    1234:	6818      	ldr	r0, [r3, #0]
}
    1236:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1238:	6882      	ldr	r2, [r0, #8]
    123a:	605a      	str	r2, [r3, #4]
    123c:	e7f5      	b.n	122a <uxListRemove+0x14>
	...

00001240 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    1240:	b510      	push	{r4, lr}
    1242:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1244:	4b03      	ldr	r3, [pc, #12]	; (1254 <prvIsQueueEmpty+0x14>)
    1246:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    1248:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    124a:	4b03      	ldr	r3, [pc, #12]	; (1258 <prvIsQueueEmpty+0x18>)
    124c:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    124e:	4260      	negs	r0, r4
    1250:	4160      	adcs	r0, r4

	return xReturn;
}
    1252:	bd10      	pop	{r4, pc}
    1254:	00000d79 	.word	0x00000d79
    1258:	00000d91 	.word	0x00000d91

0000125c <prvCopyDataToQueue>:
{
    125c:	b570      	push	{r4, r5, r6, lr}
    125e:	0004      	movs	r4, r0
    1260:	0016      	movs	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    1262:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    1264:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1266:	2a00      	cmp	r2, #0
    1268:	d10b      	bne.n	1282 <prvCopyDataToQueue+0x26>
BaseType_t xReturn = pdFALSE;
    126a:	2000      	movs	r0, #0
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    126c:	6823      	ldr	r3, [r4, #0]
    126e:	4283      	cmp	r3, r0
    1270:	d104      	bne.n	127c <prvCopyDataToQueue+0x20>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    1272:	6860      	ldr	r0, [r4, #4]
    1274:	4b16      	ldr	r3, [pc, #88]	; (12d0 <prvCopyDataToQueue+0x74>)
    1276:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    1278:	2300      	movs	r3, #0
    127a:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    127c:	3501      	adds	r5, #1
    127e:	63a5      	str	r5, [r4, #56]	; 0x38
}
    1280:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
    1282:	2e00      	cmp	r6, #0
    1284:	d10e      	bne.n	12a4 <prvCopyDataToQueue+0x48>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    1286:	6880      	ldr	r0, [r0, #8]
    1288:	4b12      	ldr	r3, [pc, #72]	; (12d4 <prvCopyDataToQueue+0x78>)
    128a:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    128c:	68a3      	ldr	r3, [r4, #8]
    128e:	6c22      	ldr	r2, [r4, #64]	; 0x40
    1290:	4694      	mov	ip, r2
    1292:	4463      	add	r3, ip
    1294:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
    1296:	2000      	movs	r0, #0
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    1298:	6862      	ldr	r2, [r4, #4]
    129a:	4293      	cmp	r3, r2
    129c:	d3ee      	bcc.n	127c <prvCopyDataToQueue+0x20>
			pxQueue->pcWriteTo = pxQueue->pcHead;
    129e:	6823      	ldr	r3, [r4, #0]
    12a0:	60a3      	str	r3, [r4, #8]
    12a2:	e7eb      	b.n	127c <prvCopyDataToQueue+0x20>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    12a4:	68c0      	ldr	r0, [r0, #12]
    12a6:	4b0b      	ldr	r3, [pc, #44]	; (12d4 <prvCopyDataToQueue+0x78>)
    12a8:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    12aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
    12ac:	425b      	negs	r3, r3
    12ae:	68e2      	ldr	r2, [r4, #12]
    12b0:	18d2      	adds	r2, r2, r3
    12b2:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    12b4:	6821      	ldr	r1, [r4, #0]
    12b6:	428a      	cmp	r2, r1
    12b8:	d203      	bcs.n	12c2 <prvCopyDataToQueue+0x66>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    12ba:	6862      	ldr	r2, [r4, #4]
    12bc:	4694      	mov	ip, r2
    12be:	4463      	add	r3, ip
    12c0:	60e3      	str	r3, [r4, #12]
BaseType_t xReturn = pdFALSE;
    12c2:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
    12c4:	2e02      	cmp	r6, #2
    12c6:	d1d9      	bne.n	127c <prvCopyDataToQueue+0x20>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    12c8:	4285      	cmp	r5, r0
    12ca:	d0d7      	beq.n	127c <prvCopyDataToQueue+0x20>
				--uxMessagesWaiting;
    12cc:	3d01      	subs	r5, #1
    12ce:	e7d5      	b.n	127c <prvCopyDataToQueue+0x20>
    12d0:	00002159 	.word	0x00002159
    12d4:	000031bd 	.word	0x000031bd

000012d8 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    12d8:	b570      	push	{r4, r5, r6, lr}
    12da:	b082      	sub	sp, #8
    12dc:	9001      	str	r0, [sp, #4]
    12de:	000a      	movs	r2, r1
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    12e0:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    12e2:	2c00      	cmp	r4, #0
    12e4:	d005      	beq.n	12f2 <prvNotifyQueueSetContainer+0x1a>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    12e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    12e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    12ea:	4299      	cmp	r1, r3
    12ec:	d303      	bcc.n	12f6 <prvNotifyQueueSetContainer+0x1e>
    12ee:	b672      	cpsid	i
    12f0:	e7fe      	b.n	12f0 <prvNotifyQueueSetContainer+0x18>
		configASSERT( pxQueueSetContainer );
    12f2:	b672      	cpsid	i
    12f4:	e7fe      	b.n	12f4 <prvNotifyQueueSetContainer+0x1c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    12f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
	BaseType_t xReturn = pdFALSE;
    12f8:	2600      	movs	r6, #0
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    12fa:	428b      	cmp	r3, r1
    12fc:	d802      	bhi.n	1304 <prvNotifyQueueSetContainer+0x2c>
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
    12fe:	0030      	movs	r0, r6
    1300:	b002      	add	sp, #8
    1302:	bd70      	pop	{r4, r5, r6, pc}
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    1304:	2345      	movs	r3, #69	; 0x45
    1306:	5ce5      	ldrb	r5, [r4, r3]
    1308:	b26d      	sxtb	r5, r5
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    130a:	a901      	add	r1, sp, #4
    130c:	0020      	movs	r0, r4
    130e:	4b0a      	ldr	r3, [pc, #40]	; (1338 <prvNotifyQueueSetContainer+0x60>)
    1310:	4798      	blx	r3
    1312:	0006      	movs	r6, r0
			if( cTxLock == queueUNLOCKED )
    1314:	1c6b      	adds	r3, r5, #1
    1316:	d10a      	bne.n	132e <prvNotifyQueueSetContainer+0x56>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    1318:	6a63      	ldr	r3, [r4, #36]	; 0x24
    131a:	2b00      	cmp	r3, #0
    131c:	d0ef      	beq.n	12fe <prvNotifyQueueSetContainer+0x26>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    131e:	0020      	movs	r0, r4
    1320:	3024      	adds	r0, #36	; 0x24
    1322:	4b06      	ldr	r3, [pc, #24]	; (133c <prvNotifyQueueSetContainer+0x64>)
    1324:	4798      	blx	r3
    1326:	2800      	cmp	r0, #0
    1328:	d0e9      	beq.n	12fe <prvNotifyQueueSetContainer+0x26>
						xReturn = pdTRUE;
    132a:	2601      	movs	r6, #1
    132c:	e7e7      	b.n	12fe <prvNotifyQueueSetContainer+0x26>
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
    132e:	3501      	adds	r5, #1
    1330:	b26d      	sxtb	r5, r5
    1332:	2345      	movs	r3, #69	; 0x45
    1334:	54e5      	strb	r5, [r4, r3]
    1336:	e7e2      	b.n	12fe <prvNotifyQueueSetContainer+0x26>
    1338:	0000125d 	.word	0x0000125d
    133c:	0000201d 	.word	0x0000201d

00001340 <prvCopyDataFromQueue>:
{
    1340:	b510      	push	{r4, lr}
    1342:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    1344:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1346:	2a00      	cmp	r2, #0
    1348:	d00b      	beq.n	1362 <prvCopyDataFromQueue+0x22>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    134a:	68c3      	ldr	r3, [r0, #12]
    134c:	189b      	adds	r3, r3, r2
    134e:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    1350:	6841      	ldr	r1, [r0, #4]
    1352:	428b      	cmp	r3, r1
    1354:	d301      	bcc.n	135a <prvCopyDataFromQueue+0x1a>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    1356:	6803      	ldr	r3, [r0, #0]
    1358:	60c3      	str	r3, [r0, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    135a:	68c1      	ldr	r1, [r0, #12]
    135c:	0020      	movs	r0, r4
    135e:	4b01      	ldr	r3, [pc, #4]	; (1364 <prvCopyDataFromQueue+0x24>)
    1360:	4798      	blx	r3
}
    1362:	bd10      	pop	{r4, pc}
    1364:	000031bd 	.word	0x000031bd

00001368 <prvUnlockQueue>:
{
    1368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    136a:	0007      	movs	r7, r0
	taskENTER_CRITICAL();
    136c:	4b25      	ldr	r3, [pc, #148]	; (1404 <prvUnlockQueue+0x9c>)
    136e:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
    1370:	2345      	movs	r3, #69	; 0x45
    1372:	5cfc      	ldrb	r4, [r7, r3]
    1374:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
    1376:	2c00      	cmp	r4, #0
    1378:	dd1c      	ble.n	13b4 <prvUnlockQueue+0x4c>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    137a:	4e23      	ldr	r6, [pc, #140]	; (1408 <prvUnlockQueue+0xa0>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    137c:	4d23      	ldr	r5, [pc, #140]	; (140c <prvUnlockQueue+0xa4>)
    137e:	e00b      	b.n	1398 <prvUnlockQueue+0x30>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1382:	2b00      	cmp	r3, #0
    1384:	d016      	beq.n	13b4 <prvUnlockQueue+0x4c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1386:	0038      	movs	r0, r7
    1388:	3024      	adds	r0, #36	; 0x24
    138a:	47a8      	blx	r5
    138c:	2800      	cmp	r0, #0
    138e:	d10e      	bne.n	13ae <prvUnlockQueue+0x46>
    1390:	3c01      	subs	r4, #1
    1392:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
    1394:	2c00      	cmp	r4, #0
    1396:	d00d      	beq.n	13b4 <prvUnlockQueue+0x4c>
				if( pxQueue->pxQueueSetContainer != NULL )
    1398:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    139a:	2b00      	cmp	r3, #0
    139c:	d0f0      	beq.n	1380 <prvUnlockQueue+0x18>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    139e:	2100      	movs	r1, #0
    13a0:	0038      	movs	r0, r7
    13a2:	47b0      	blx	r6
    13a4:	2800      	cmp	r0, #0
    13a6:	d0f3      	beq.n	1390 <prvUnlockQueue+0x28>
						vTaskMissedYield();
    13a8:	4b19      	ldr	r3, [pc, #100]	; (1410 <prvUnlockQueue+0xa8>)
    13aa:	4798      	blx	r3
    13ac:	e7f0      	b.n	1390 <prvUnlockQueue+0x28>
							vTaskMissedYield();
    13ae:	4b18      	ldr	r3, [pc, #96]	; (1410 <prvUnlockQueue+0xa8>)
    13b0:	4798      	blx	r3
    13b2:	e7ed      	b.n	1390 <prvUnlockQueue+0x28>
		pxQueue->cTxLock = queueUNLOCKED;
    13b4:	22ff      	movs	r2, #255	; 0xff
    13b6:	2345      	movs	r3, #69	; 0x45
    13b8:	54fa      	strb	r2, [r7, r3]
	taskEXIT_CRITICAL();
    13ba:	4b16      	ldr	r3, [pc, #88]	; (1414 <prvUnlockQueue+0xac>)
    13bc:	4798      	blx	r3
	taskENTER_CRITICAL();
    13be:	4b11      	ldr	r3, [pc, #68]	; (1404 <prvUnlockQueue+0x9c>)
    13c0:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
    13c2:	2344      	movs	r3, #68	; 0x44
    13c4:	5cfc      	ldrb	r4, [r7, r3]
    13c6:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
    13c8:	2c00      	cmp	r4, #0
    13ca:	dd14      	ble.n	13f6 <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    13cc:	693b      	ldr	r3, [r7, #16]
    13ce:	2b00      	cmp	r3, #0
    13d0:	d011      	beq.n	13f6 <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    13d2:	003d      	movs	r5, r7
    13d4:	3510      	adds	r5, #16
    13d6:	4e0d      	ldr	r6, [pc, #52]	; (140c <prvUnlockQueue+0xa4>)
    13d8:	e006      	b.n	13e8 <prvUnlockQueue+0x80>
    13da:	3c01      	subs	r4, #1
    13dc:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
    13de:	2c00      	cmp	r4, #0
    13e0:	d009      	beq.n	13f6 <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    13e2:	693b      	ldr	r3, [r7, #16]
    13e4:	2b00      	cmp	r3, #0
    13e6:	d006      	beq.n	13f6 <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    13e8:	0028      	movs	r0, r5
    13ea:	47b0      	blx	r6
    13ec:	2800      	cmp	r0, #0
    13ee:	d0f4      	beq.n	13da <prvUnlockQueue+0x72>
					vTaskMissedYield();
    13f0:	4b07      	ldr	r3, [pc, #28]	; (1410 <prvUnlockQueue+0xa8>)
    13f2:	4798      	blx	r3
    13f4:	e7f1      	b.n	13da <prvUnlockQueue+0x72>
		pxQueue->cRxLock = queueUNLOCKED;
    13f6:	22ff      	movs	r2, #255	; 0xff
    13f8:	2344      	movs	r3, #68	; 0x44
    13fa:	54fa      	strb	r2, [r7, r3]
	taskEXIT_CRITICAL();
    13fc:	4b05      	ldr	r3, [pc, #20]	; (1414 <prvUnlockQueue+0xac>)
    13fe:	4798      	blx	r3
}
    1400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1402:	46c0      	nop			; (mov r8, r8)
    1404:	00000d79 	.word	0x00000d79
    1408:	000012d9 	.word	0x000012d9
    140c:	0000201d 	.word	0x0000201d
    1410:	0000212d 	.word	0x0000212d
    1414:	00000d91 	.word	0x00000d91

00001418 <xQueueGenericReset>:
{
    1418:	b570      	push	{r4, r5, r6, lr}
    141a:	0004      	movs	r4, r0
    141c:	000d      	movs	r5, r1
	configASSERT( pxQueue );
    141e:	2800      	cmp	r0, #0
    1420:	d021      	beq.n	1466 <xQueueGenericReset+0x4e>
	taskENTER_CRITICAL();
    1422:	4b17      	ldr	r3, [pc, #92]	; (1480 <xQueueGenericReset+0x68>)
    1424:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    1426:	6822      	ldr	r2, [r4, #0]
    1428:	6c21      	ldr	r1, [r4, #64]	; 0x40
    142a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    142c:	434b      	muls	r3, r1
    142e:	18d0      	adds	r0, r2, r3
    1430:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    1432:	2000      	movs	r0, #0
    1434:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    1436:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    1438:	1a5b      	subs	r3, r3, r1
    143a:	18d3      	adds	r3, r2, r3
    143c:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    143e:	23ff      	movs	r3, #255	; 0xff
    1440:	2244      	movs	r2, #68	; 0x44
    1442:	54a3      	strb	r3, [r4, r2]
		pxQueue->cTxLock = queueUNLOCKED;
    1444:	3201      	adds	r2, #1
    1446:	54a3      	strb	r3, [r4, r2]
		if( xNewQueue == pdFALSE )
    1448:	2d00      	cmp	r5, #0
    144a:	d111      	bne.n	1470 <xQueueGenericReset+0x58>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    144c:	6923      	ldr	r3, [r4, #16]
    144e:	2b00      	cmp	r3, #0
    1450:	d005      	beq.n	145e <xQueueGenericReset+0x46>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1452:	0020      	movs	r0, r4
    1454:	3010      	adds	r0, #16
    1456:	4b0b      	ldr	r3, [pc, #44]	; (1484 <xQueueGenericReset+0x6c>)
    1458:	4798      	blx	r3
    145a:	2800      	cmp	r0, #0
    145c:	d105      	bne.n	146a <xQueueGenericReset+0x52>
	taskEXIT_CRITICAL();
    145e:	4b0a      	ldr	r3, [pc, #40]	; (1488 <xQueueGenericReset+0x70>)
    1460:	4798      	blx	r3
}
    1462:	2001      	movs	r0, #1
    1464:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
    1466:	b672      	cpsid	i
    1468:	e7fe      	b.n	1468 <xQueueGenericReset+0x50>
					queueYIELD_IF_USING_PREEMPTION();
    146a:	4b08      	ldr	r3, [pc, #32]	; (148c <xQueueGenericReset+0x74>)
    146c:	4798      	blx	r3
    146e:	e7f6      	b.n	145e <xQueueGenericReset+0x46>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    1470:	0020      	movs	r0, r4
    1472:	3010      	adds	r0, #16
    1474:	4d06      	ldr	r5, [pc, #24]	; (1490 <xQueueGenericReset+0x78>)
    1476:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    1478:	0020      	movs	r0, r4
    147a:	3024      	adds	r0, #36	; 0x24
    147c:	47a8      	blx	r5
    147e:	e7ee      	b.n	145e <xQueueGenericReset+0x46>
    1480:	00000d79 	.word	0x00000d79
    1484:	0000201d 	.word	0x0000201d
    1488:	00000d91 	.word	0x00000d91
    148c:	00000d61 	.word	0x00000d61
    1490:	000011b5 	.word	0x000011b5

00001494 <xQueueGenericCreate>:
	{
    1494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1496:	0006      	movs	r6, r0
    1498:	000d      	movs	r5, r1
    149a:	0017      	movs	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    149c:	2800      	cmp	r0, #0
    149e:	d101      	bne.n	14a4 <xQueueGenericCreate+0x10>
    14a0:	b672      	cpsid	i
    14a2:	e7fe      	b.n	14a2 <xQueueGenericCreate+0xe>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    14a4:	0008      	movs	r0, r1
    14a6:	4370      	muls	r0, r6
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    14a8:	3054      	adds	r0, #84	; 0x54
    14aa:	4b0b      	ldr	r3, [pc, #44]	; (14d8 <xQueueGenericCreate+0x44>)
    14ac:	4798      	blx	r3
    14ae:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    14b0:	d010      	beq.n	14d4 <xQueueGenericCreate+0x40>
	if( uxItemSize == ( UBaseType_t ) 0 )
    14b2:	2d00      	cmp	r5, #0
    14b4:	d003      	beq.n	14be <xQueueGenericCreate+0x2a>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    14b6:	0003      	movs	r3, r0
    14b8:	3354      	adds	r3, #84	; 0x54
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    14ba:	6003      	str	r3, [r0, #0]
    14bc:	e000      	b.n	14c0 <xQueueGenericCreate+0x2c>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    14be:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
    14c0:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    14c2:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    14c4:	2101      	movs	r1, #1
    14c6:	0020      	movs	r0, r4
    14c8:	4b04      	ldr	r3, [pc, #16]	; (14dc <xQueueGenericCreate+0x48>)
    14ca:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
    14cc:	2350      	movs	r3, #80	; 0x50
    14ce:	54e7      	strb	r7, [r4, r3]
		pxNewQueue->pxQueueSetContainer = NULL;
    14d0:	2300      	movs	r3, #0
    14d2:	64a3      	str	r3, [r4, #72]	; 0x48
	}
    14d4:	0020      	movs	r0, r4
    14d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    14d8:	00000e35 	.word	0x00000e35
    14dc:	00001419 	.word	0x00001419

000014e0 <xQueueGenericSend>:
{
    14e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    14e2:	46ce      	mov	lr, r9
    14e4:	4647      	mov	r7, r8
    14e6:	b580      	push	{r7, lr}
    14e8:	b085      	sub	sp, #20
    14ea:	0004      	movs	r4, r0
    14ec:	000f      	movs	r7, r1
    14ee:	9201      	str	r2, [sp, #4]
    14f0:	001d      	movs	r5, r3
	configASSERT( pxQueue );
    14f2:	2800      	cmp	r0, #0
    14f4:	d00c      	beq.n	1510 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    14f6:	2900      	cmp	r1, #0
    14f8:	d00c      	beq.n	1514 <xQueueGenericSend+0x34>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    14fa:	2d02      	cmp	r5, #2
    14fc:	d00f      	beq.n	151e <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    14fe:	4b4e      	ldr	r3, [pc, #312]	; (1638 <xQueueGenericSend+0x158>)
    1500:	4798      	blx	r3
    1502:	2800      	cmp	r0, #0
    1504:	d110      	bne.n	1528 <xQueueGenericSend+0x48>
    1506:	9b01      	ldr	r3, [sp, #4]
    1508:	2b00      	cmp	r3, #0
    150a:	d011      	beq.n	1530 <xQueueGenericSend+0x50>
    150c:	b672      	cpsid	i
    150e:	e7fe      	b.n	150e <xQueueGenericSend+0x2e>
	configASSERT( pxQueue );
    1510:	b672      	cpsid	i
    1512:	e7fe      	b.n	1512 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    1514:	6c03      	ldr	r3, [r0, #64]	; 0x40
    1516:	2b00      	cmp	r3, #0
    1518:	d0ef      	beq.n	14fa <xQueueGenericSend+0x1a>
    151a:	b672      	cpsid	i
    151c:	e7fe      	b.n	151c <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    151e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1520:	2b01      	cmp	r3, #1
    1522:	d0ec      	beq.n	14fe <xQueueGenericSend+0x1e>
    1524:	b672      	cpsid	i
    1526:	e7fe      	b.n	1526 <xQueueGenericSend+0x46>
    1528:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
    152a:	4b44      	ldr	r3, [pc, #272]	; (163c <xQueueGenericSend+0x15c>)
    152c:	4698      	mov	r8, r3
    152e:	e04c      	b.n	15ca <xQueueGenericSend+0xea>
    1530:	2600      	movs	r6, #0
    1532:	e7fa      	b.n	152a <xQueueGenericSend+0x4a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1534:	002a      	movs	r2, r5
    1536:	0039      	movs	r1, r7
    1538:	0020      	movs	r0, r4
    153a:	4b41      	ldr	r3, [pc, #260]	; (1640 <xQueueGenericSend+0x160>)
    153c:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
    153e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1540:	2b00      	cmp	r3, #0
    1542:	d00f      	beq.n	1564 <xQueueGenericSend+0x84>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    1544:	0029      	movs	r1, r5
    1546:	0020      	movs	r0, r4
    1548:	4b3e      	ldr	r3, [pc, #248]	; (1644 <xQueueGenericSend+0x164>)
    154a:	4798      	blx	r3
    154c:	2800      	cmp	r0, #0
    154e:	d001      	beq.n	1554 <xQueueGenericSend+0x74>
							queueYIELD_IF_USING_PREEMPTION();
    1550:	4b3d      	ldr	r3, [pc, #244]	; (1648 <xQueueGenericSend+0x168>)
    1552:	4798      	blx	r3
				taskEXIT_CRITICAL();
    1554:	4b3d      	ldr	r3, [pc, #244]	; (164c <xQueueGenericSend+0x16c>)
    1556:	4798      	blx	r3
				return pdPASS;
    1558:	2001      	movs	r0, #1
}
    155a:	b005      	add	sp, #20
    155c:	bc0c      	pop	{r2, r3}
    155e:	4690      	mov	r8, r2
    1560:	4699      	mov	r9, r3
    1562:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1564:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1566:	2b00      	cmp	r3, #0
    1568:	d008      	beq.n	157c <xQueueGenericSend+0x9c>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    156a:	0020      	movs	r0, r4
    156c:	3024      	adds	r0, #36	; 0x24
    156e:	4b38      	ldr	r3, [pc, #224]	; (1650 <xQueueGenericSend+0x170>)
    1570:	4798      	blx	r3
    1572:	2800      	cmp	r0, #0
    1574:	d0ee      	beq.n	1554 <xQueueGenericSend+0x74>
								queueYIELD_IF_USING_PREEMPTION();
    1576:	4b34      	ldr	r3, [pc, #208]	; (1648 <xQueueGenericSend+0x168>)
    1578:	4798      	blx	r3
    157a:	e7eb      	b.n	1554 <xQueueGenericSend+0x74>
						else if( xYieldRequired != pdFALSE )
    157c:	2800      	cmp	r0, #0
    157e:	d0e9      	beq.n	1554 <xQueueGenericSend+0x74>
							queueYIELD_IF_USING_PREEMPTION();
    1580:	4b31      	ldr	r3, [pc, #196]	; (1648 <xQueueGenericSend+0x168>)
    1582:	4798      	blx	r3
    1584:	e7e6      	b.n	1554 <xQueueGenericSend+0x74>
					taskEXIT_CRITICAL();
    1586:	4b31      	ldr	r3, [pc, #196]	; (164c <xQueueGenericSend+0x16c>)
    1588:	4798      	blx	r3
					return errQUEUE_FULL;
    158a:	2000      	movs	r0, #0
    158c:	e7e5      	b.n	155a <xQueueGenericSend+0x7a>
		prvLockQueue( pxQueue );
    158e:	4b2f      	ldr	r3, [pc, #188]	; (164c <xQueueGenericSend+0x16c>)
    1590:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1592:	a901      	add	r1, sp, #4
    1594:	a802      	add	r0, sp, #8
    1596:	4b2f      	ldr	r3, [pc, #188]	; (1654 <xQueueGenericSend+0x174>)
    1598:	4798      	blx	r3
    159a:	2800      	cmp	r0, #0
    159c:	d144      	bne.n	1628 <xQueueGenericSend+0x148>
	taskENTER_CRITICAL();
    159e:	4b27      	ldr	r3, [pc, #156]	; (163c <xQueueGenericSend+0x15c>)
    15a0:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    15a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    15a4:	4699      	mov	r9, r3
    15a6:	6be6      	ldr	r6, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
    15a8:	4b28      	ldr	r3, [pc, #160]	; (164c <xQueueGenericSend+0x16c>)
    15aa:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    15ac:	45b1      	cmp	r9, r6
    15ae:	d135      	bne.n	161c <xQueueGenericSend+0x13c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    15b0:	0020      	movs	r0, r4
    15b2:	3010      	adds	r0, #16
    15b4:	9901      	ldr	r1, [sp, #4]
    15b6:	4b28      	ldr	r3, [pc, #160]	; (1658 <xQueueGenericSend+0x178>)
    15b8:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    15ba:	0020      	movs	r0, r4
    15bc:	4b27      	ldr	r3, [pc, #156]	; (165c <xQueueGenericSend+0x17c>)
    15be:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    15c0:	4b27      	ldr	r3, [pc, #156]	; (1660 <xQueueGenericSend+0x180>)
    15c2:	4798      	blx	r3
    15c4:	2800      	cmp	r0, #0
    15c6:	d026      	beq.n	1616 <xQueueGenericSend+0x136>
    15c8:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
    15ca:	47c0      	blx	r8
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    15cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    15ce:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    15d0:	4293      	cmp	r3, r2
    15d2:	d3af      	bcc.n	1534 <xQueueGenericSend+0x54>
    15d4:	2d02      	cmp	r5, #2
    15d6:	d0ad      	beq.n	1534 <xQueueGenericSend+0x54>
				if( xTicksToWait == ( TickType_t ) 0 )
    15d8:	9b01      	ldr	r3, [sp, #4]
    15da:	2b00      	cmp	r3, #0
    15dc:	d0d3      	beq.n	1586 <xQueueGenericSend+0xa6>
				else if( xEntryTimeSet == pdFALSE )
    15de:	2e00      	cmp	r6, #0
    15e0:	d102      	bne.n	15e8 <xQueueGenericSend+0x108>
					vTaskInternalSetTimeOutState( &xTimeOut );
    15e2:	a802      	add	r0, sp, #8
    15e4:	4b1f      	ldr	r3, [pc, #124]	; (1664 <xQueueGenericSend+0x184>)
    15e6:	4798      	blx	r3
		taskEXIT_CRITICAL();
    15e8:	4b18      	ldr	r3, [pc, #96]	; (164c <xQueueGenericSend+0x16c>)
    15ea:	4798      	blx	r3
		vTaskSuspendAll();
    15ec:	4b1e      	ldr	r3, [pc, #120]	; (1668 <xQueueGenericSend+0x188>)
    15ee:	4798      	blx	r3
		prvLockQueue( pxQueue );
    15f0:	4b12      	ldr	r3, [pc, #72]	; (163c <xQueueGenericSend+0x15c>)
    15f2:	4798      	blx	r3
    15f4:	2344      	movs	r3, #68	; 0x44
    15f6:	5ce3      	ldrb	r3, [r4, r3]
    15f8:	b25b      	sxtb	r3, r3
    15fa:	3301      	adds	r3, #1
    15fc:	d102      	bne.n	1604 <xQueueGenericSend+0x124>
    15fe:	2200      	movs	r2, #0
    1600:	2344      	movs	r3, #68	; 0x44
    1602:	54e2      	strb	r2, [r4, r3]
    1604:	2345      	movs	r3, #69	; 0x45
    1606:	5ce3      	ldrb	r3, [r4, r3]
    1608:	b25b      	sxtb	r3, r3
    160a:	3301      	adds	r3, #1
    160c:	d1bf      	bne.n	158e <xQueueGenericSend+0xae>
    160e:	2200      	movs	r2, #0
    1610:	2345      	movs	r3, #69	; 0x45
    1612:	54e2      	strb	r2, [r4, r3]
    1614:	e7bb      	b.n	158e <xQueueGenericSend+0xae>
					portYIELD_WITHIN_API();
    1616:	4b0c      	ldr	r3, [pc, #48]	; (1648 <xQueueGenericSend+0x168>)
    1618:	4798      	blx	r3
    161a:	e7d5      	b.n	15c8 <xQueueGenericSend+0xe8>
				prvUnlockQueue( pxQueue );
    161c:	0020      	movs	r0, r4
    161e:	4b0f      	ldr	r3, [pc, #60]	; (165c <xQueueGenericSend+0x17c>)
    1620:	4798      	blx	r3
				( void ) xTaskResumeAll();
    1622:	4b0f      	ldr	r3, [pc, #60]	; (1660 <xQueueGenericSend+0x180>)
    1624:	4798      	blx	r3
    1626:	e7cf      	b.n	15c8 <xQueueGenericSend+0xe8>
			prvUnlockQueue( pxQueue );
    1628:	0020      	movs	r0, r4
    162a:	4b0c      	ldr	r3, [pc, #48]	; (165c <xQueueGenericSend+0x17c>)
    162c:	4798      	blx	r3
			( void ) xTaskResumeAll();
    162e:	4b0c      	ldr	r3, [pc, #48]	; (1660 <xQueueGenericSend+0x180>)
    1630:	4798      	blx	r3
			return errQUEUE_FULL;
    1632:	2000      	movs	r0, #0
    1634:	e791      	b.n	155a <xQueueGenericSend+0x7a>
    1636:	46c0      	nop			; (mov r8, r8)
    1638:	00002139 	.word	0x00002139
    163c:	00000d79 	.word	0x00000d79
    1640:	0000125d 	.word	0x0000125d
    1644:	000012d9 	.word	0x000012d9
    1648:	00000d61 	.word	0x00000d61
    164c:	00000d91 	.word	0x00000d91
    1650:	0000201d 	.word	0x0000201d
    1654:	000020bd 	.word	0x000020bd
    1658:	00001fb9 	.word	0x00001fb9
    165c:	00001369 	.word	0x00001369
    1660:	00001dbd 	.word	0x00001dbd
    1664:	000020a5 	.word	0x000020a5
    1668:	00001c81 	.word	0x00001c81

0000166c <xQueueGenericSendFromISR>:
{
    166c:	b5f0      	push	{r4, r5, r6, r7, lr}
    166e:	b083      	sub	sp, #12
    1670:	0004      	movs	r4, r0
    1672:	9101      	str	r1, [sp, #4]
    1674:	0016      	movs	r6, r2
    1676:	001d      	movs	r5, r3
	configASSERT( pxQueue );
    1678:	2800      	cmp	r0, #0
    167a:	d012      	beq.n	16a2 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    167c:	9b01      	ldr	r3, [sp, #4]
    167e:	2b00      	cmp	r3, #0
    1680:	d011      	beq.n	16a6 <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    1682:	2d02      	cmp	r5, #2
    1684:	d014      	beq.n	16b0 <xQueueGenericSendFromISR+0x44>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1686:	4b28      	ldr	r3, [pc, #160]	; (1728 <xQueueGenericSendFromISR+0xbc>)
    1688:	4798      	blx	r3
    168a:	9000      	str	r0, [sp, #0]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    168c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    168e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    1690:	429a      	cmp	r2, r3
    1692:	d82f      	bhi.n	16f4 <xQueueGenericSendFromISR+0x88>
			xReturn = errQUEUE_FULL;
    1694:	2500      	movs	r5, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    1696:	9800      	ldr	r0, [sp, #0]
    1698:	4b24      	ldr	r3, [pc, #144]	; (172c <xQueueGenericSendFromISR+0xc0>)
    169a:	4798      	blx	r3
}
    169c:	0028      	movs	r0, r5
    169e:	b003      	add	sp, #12
    16a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pxQueue );
    16a2:	b672      	cpsid	i
    16a4:	e7fe      	b.n	16a4 <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    16a6:	6c03      	ldr	r3, [r0, #64]	; 0x40
    16a8:	2b00      	cmp	r3, #0
    16aa:	d0ea      	beq.n	1682 <xQueueGenericSendFromISR+0x16>
    16ac:	b672      	cpsid	i
    16ae:	e7fe      	b.n	16ae <xQueueGenericSendFromISR+0x42>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    16b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    16b2:	2b01      	cmp	r3, #1
    16b4:	d01a      	beq.n	16ec <xQueueGenericSendFromISR+0x80>
    16b6:	b672      	cpsid	i
    16b8:	e7fe      	b.n	16b8 <xQueueGenericSendFromISR+0x4c>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    16ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
    16bc:	2501      	movs	r5, #1
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    16be:	2b00      	cmp	r3, #0
    16c0:	d0e9      	beq.n	1696 <xQueueGenericSendFromISR+0x2a>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    16c2:	0020      	movs	r0, r4
    16c4:	3024      	adds	r0, #36	; 0x24
    16c6:	4b1a      	ldr	r3, [pc, #104]	; (1730 <xQueueGenericSendFromISR+0xc4>)
    16c8:	4798      	blx	r3
    16ca:	2800      	cmp	r0, #0
    16cc:	d0e3      	beq.n	1696 <xQueueGenericSendFromISR+0x2a>
								if( pxHigherPriorityTaskWoken != NULL )
    16ce:	2e00      	cmp	r6, #0
    16d0:	d00a      	beq.n	16e8 <xQueueGenericSendFromISR+0x7c>
									*pxHigherPriorityTaskWoken = pdTRUE;
    16d2:	2301      	movs	r3, #1
    16d4:	6033      	str	r3, [r6, #0]
    16d6:	e7de      	b.n	1696 <xQueueGenericSendFromISR+0x2a>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    16d8:	1c7b      	adds	r3, r7, #1
    16da:	b25b      	sxtb	r3, r3
    16dc:	2245      	movs	r2, #69	; 0x45
    16de:	54a3      	strb	r3, [r4, r2]
			xReturn = pdPASS;
    16e0:	2501      	movs	r5, #1
    16e2:	e7d8      	b.n	1696 <xQueueGenericSendFromISR+0x2a>
    16e4:	2501      	movs	r5, #1
    16e6:	e7d6      	b.n	1696 <xQueueGenericSendFromISR+0x2a>
    16e8:	2501      	movs	r5, #1
    16ea:	e7d4      	b.n	1696 <xQueueGenericSendFromISR+0x2a>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    16ec:	4b0e      	ldr	r3, [pc, #56]	; (1728 <xQueueGenericSendFromISR+0xbc>)
    16ee:	4798      	blx	r3
    16f0:	9000      	str	r0, [sp, #0]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    16f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
    16f4:	2345      	movs	r3, #69	; 0x45
    16f6:	5ce7      	ldrb	r7, [r4, r3]
    16f8:	b27f      	sxtb	r7, r7
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    16fa:	002a      	movs	r2, r5
    16fc:	9901      	ldr	r1, [sp, #4]
    16fe:	0020      	movs	r0, r4
    1700:	4b0c      	ldr	r3, [pc, #48]	; (1734 <xQueueGenericSendFromISR+0xc8>)
    1702:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
    1704:	1c7b      	adds	r3, r7, #1
    1706:	d1e7      	bne.n	16d8 <xQueueGenericSendFromISR+0x6c>
					if( pxQueue->pxQueueSetContainer != NULL )
    1708:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    170a:	2b00      	cmp	r3, #0
    170c:	d0d5      	beq.n	16ba <xQueueGenericSendFromISR+0x4e>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    170e:	0029      	movs	r1, r5
    1710:	0020      	movs	r0, r4
    1712:	4b09      	ldr	r3, [pc, #36]	; (1738 <xQueueGenericSendFromISR+0xcc>)
    1714:	4798      	blx	r3
			xReturn = pdPASS;
    1716:	2501      	movs	r5, #1
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    1718:	2800      	cmp	r0, #0
    171a:	d0bc      	beq.n	1696 <xQueueGenericSendFromISR+0x2a>
							if( pxHigherPriorityTaskWoken != NULL )
    171c:	2e00      	cmp	r6, #0
    171e:	d0e1      	beq.n	16e4 <xQueueGenericSendFromISR+0x78>
								*pxHigherPriorityTaskWoken = pdTRUE;
    1720:	2301      	movs	r3, #1
    1722:	6033      	str	r3, [r6, #0]
    1724:	e7b7      	b.n	1696 <xQueueGenericSendFromISR+0x2a>
    1726:	46c0      	nop			; (mov r8, r8)
    1728:	00000db1 	.word	0x00000db1
    172c:	00000db9 	.word	0x00000db9
    1730:	0000201d 	.word	0x0000201d
    1734:	0000125d 	.word	0x0000125d
    1738:	000012d9 	.word	0x000012d9

0000173c <xQueueReceive>:
{
    173c:	b5f0      	push	{r4, r5, r6, r7, lr}
    173e:	46c6      	mov	lr, r8
    1740:	b500      	push	{lr}
    1742:	b084      	sub	sp, #16
    1744:	0004      	movs	r4, r0
    1746:	000f      	movs	r7, r1
    1748:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
    174a:	2800      	cmp	r0, #0
    174c:	d00a      	beq.n	1764 <xQueueReceive+0x28>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    174e:	2900      	cmp	r1, #0
    1750:	d00a      	beq.n	1768 <xQueueReceive+0x2c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    1752:	4b42      	ldr	r3, [pc, #264]	; (185c <xQueueReceive+0x120>)
    1754:	4798      	blx	r3
    1756:	2800      	cmp	r0, #0
    1758:	d10b      	bne.n	1772 <xQueueReceive+0x36>
    175a:	9b01      	ldr	r3, [sp, #4]
    175c:	2b00      	cmp	r3, #0
    175e:	d00c      	beq.n	177a <xQueueReceive+0x3e>
    1760:	b672      	cpsid	i
    1762:	e7fe      	b.n	1762 <xQueueReceive+0x26>
	configASSERT( ( pxQueue ) );
    1764:	b672      	cpsid	i
    1766:	e7fe      	b.n	1766 <xQueueReceive+0x2a>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    1768:	6c03      	ldr	r3, [r0, #64]	; 0x40
    176a:	2b00      	cmp	r3, #0
    176c:	d0f1      	beq.n	1752 <xQueueReceive+0x16>
    176e:	b672      	cpsid	i
    1770:	e7fe      	b.n	1770 <xQueueReceive+0x34>
    1772:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
    1774:	4b3a      	ldr	r3, [pc, #232]	; (1860 <xQueueReceive+0x124>)
    1776:	4698      	mov	r8, r3
    1778:	e02f      	b.n	17da <xQueueReceive+0x9e>
    177a:	2600      	movs	r6, #0
    177c:	e7fa      	b.n	1774 <xQueueReceive+0x38>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    177e:	0039      	movs	r1, r7
    1780:	0020      	movs	r0, r4
    1782:	4b38      	ldr	r3, [pc, #224]	; (1864 <xQueueReceive+0x128>)
    1784:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    1786:	3d01      	subs	r5, #1
    1788:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    178a:	6923      	ldr	r3, [r4, #16]
    178c:	2b00      	cmp	r3, #0
    178e:	d007      	beq.n	17a0 <xQueueReceive+0x64>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1790:	0020      	movs	r0, r4
    1792:	3010      	adds	r0, #16
    1794:	4b34      	ldr	r3, [pc, #208]	; (1868 <xQueueReceive+0x12c>)
    1796:	4798      	blx	r3
    1798:	2800      	cmp	r0, #0
    179a:	d001      	beq.n	17a0 <xQueueReceive+0x64>
						queueYIELD_IF_USING_PREEMPTION();
    179c:	4b33      	ldr	r3, [pc, #204]	; (186c <xQueueReceive+0x130>)
    179e:	4798      	blx	r3
				taskEXIT_CRITICAL();
    17a0:	4b33      	ldr	r3, [pc, #204]	; (1870 <xQueueReceive+0x134>)
    17a2:	4798      	blx	r3
				return pdPASS;
    17a4:	2001      	movs	r0, #1
}
    17a6:	b004      	add	sp, #16
    17a8:	bc04      	pop	{r2}
    17aa:	4690      	mov	r8, r2
    17ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
    17ae:	4b30      	ldr	r3, [pc, #192]	; (1870 <xQueueReceive+0x134>)
    17b0:	4798      	blx	r3
					return errQUEUE_EMPTY;
    17b2:	2000      	movs	r0, #0
    17b4:	e7f7      	b.n	17a6 <xQueueReceive+0x6a>
					vTaskInternalSetTimeOutState( &xTimeOut );
    17b6:	a802      	add	r0, sp, #8
    17b8:	4b2e      	ldr	r3, [pc, #184]	; (1874 <xQueueReceive+0x138>)
    17ba:	4798      	blx	r3
    17bc:	e016      	b.n	17ec <xQueueReceive+0xb0>
		prvLockQueue( pxQueue );
    17be:	2200      	movs	r2, #0
    17c0:	2344      	movs	r3, #68	; 0x44
    17c2:	54e2      	strb	r2, [r4, r3]
    17c4:	e01d      	b.n	1802 <xQueueReceive+0xc6>
    17c6:	2200      	movs	r2, #0
    17c8:	2345      	movs	r3, #69	; 0x45
    17ca:	54e2      	strb	r2, [r4, r3]
    17cc:	e01e      	b.n	180c <xQueueReceive+0xd0>
				prvUnlockQueue( pxQueue );
    17ce:	0020      	movs	r0, r4
    17d0:	4b29      	ldr	r3, [pc, #164]	; (1878 <xQueueReceive+0x13c>)
    17d2:	4798      	blx	r3
				( void ) xTaskResumeAll();
    17d4:	4b29      	ldr	r3, [pc, #164]	; (187c <xQueueReceive+0x140>)
    17d6:	4798      	blx	r3
    17d8:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
    17da:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    17dc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    17de:	2d00      	cmp	r5, #0
    17e0:	d1cd      	bne.n	177e <xQueueReceive+0x42>
				if( xTicksToWait == ( TickType_t ) 0 )
    17e2:	9b01      	ldr	r3, [sp, #4]
    17e4:	2b00      	cmp	r3, #0
    17e6:	d0e2      	beq.n	17ae <xQueueReceive+0x72>
				else if( xEntryTimeSet == pdFALSE )
    17e8:	2e00      	cmp	r6, #0
    17ea:	d0e4      	beq.n	17b6 <xQueueReceive+0x7a>
		taskEXIT_CRITICAL();
    17ec:	4b20      	ldr	r3, [pc, #128]	; (1870 <xQueueReceive+0x134>)
    17ee:	4798      	blx	r3
		vTaskSuspendAll();
    17f0:	4b23      	ldr	r3, [pc, #140]	; (1880 <xQueueReceive+0x144>)
    17f2:	4798      	blx	r3
		prvLockQueue( pxQueue );
    17f4:	4b1a      	ldr	r3, [pc, #104]	; (1860 <xQueueReceive+0x124>)
    17f6:	4798      	blx	r3
    17f8:	2344      	movs	r3, #68	; 0x44
    17fa:	5ce3      	ldrb	r3, [r4, r3]
    17fc:	b25b      	sxtb	r3, r3
    17fe:	3301      	adds	r3, #1
    1800:	d0dd      	beq.n	17be <xQueueReceive+0x82>
    1802:	2345      	movs	r3, #69	; 0x45
    1804:	5ce3      	ldrb	r3, [r4, r3]
    1806:	b25b      	sxtb	r3, r3
    1808:	3301      	adds	r3, #1
    180a:	d0dc      	beq.n	17c6 <xQueueReceive+0x8a>
    180c:	4b18      	ldr	r3, [pc, #96]	; (1870 <xQueueReceive+0x134>)
    180e:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1810:	a901      	add	r1, sp, #4
    1812:	a802      	add	r0, sp, #8
    1814:	4b1b      	ldr	r3, [pc, #108]	; (1884 <xQueueReceive+0x148>)
    1816:	4798      	blx	r3
    1818:	2800      	cmp	r0, #0
    181a:	d113      	bne.n	1844 <xQueueReceive+0x108>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    181c:	0020      	movs	r0, r4
    181e:	4b1a      	ldr	r3, [pc, #104]	; (1888 <xQueueReceive+0x14c>)
    1820:	4798      	blx	r3
    1822:	2800      	cmp	r0, #0
    1824:	d0d3      	beq.n	17ce <xQueueReceive+0x92>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1826:	0020      	movs	r0, r4
    1828:	3024      	adds	r0, #36	; 0x24
    182a:	9901      	ldr	r1, [sp, #4]
    182c:	4b17      	ldr	r3, [pc, #92]	; (188c <xQueueReceive+0x150>)
    182e:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    1830:	0020      	movs	r0, r4
    1832:	4b11      	ldr	r3, [pc, #68]	; (1878 <xQueueReceive+0x13c>)
    1834:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    1836:	4b11      	ldr	r3, [pc, #68]	; (187c <xQueueReceive+0x140>)
    1838:	4798      	blx	r3
    183a:	2800      	cmp	r0, #0
    183c:	d1cc      	bne.n	17d8 <xQueueReceive+0x9c>
					portYIELD_WITHIN_API();
    183e:	4b0b      	ldr	r3, [pc, #44]	; (186c <xQueueReceive+0x130>)
    1840:	4798      	blx	r3
    1842:	e7c9      	b.n	17d8 <xQueueReceive+0x9c>
			prvUnlockQueue( pxQueue );
    1844:	0020      	movs	r0, r4
    1846:	4b0c      	ldr	r3, [pc, #48]	; (1878 <xQueueReceive+0x13c>)
    1848:	4798      	blx	r3
			( void ) xTaskResumeAll();
    184a:	4b0c      	ldr	r3, [pc, #48]	; (187c <xQueueReceive+0x140>)
    184c:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    184e:	0020      	movs	r0, r4
    1850:	4b0d      	ldr	r3, [pc, #52]	; (1888 <xQueueReceive+0x14c>)
    1852:	4798      	blx	r3
    1854:	2800      	cmp	r0, #0
    1856:	d0bf      	beq.n	17d8 <xQueueReceive+0x9c>
				return errQUEUE_EMPTY;
    1858:	2000      	movs	r0, #0
    185a:	e7a4      	b.n	17a6 <xQueueReceive+0x6a>
    185c:	00002139 	.word	0x00002139
    1860:	00000d79 	.word	0x00000d79
    1864:	00001341 	.word	0x00001341
    1868:	0000201d 	.word	0x0000201d
    186c:	00000d61 	.word	0x00000d61
    1870:	00000d91 	.word	0x00000d91
    1874:	000020a5 	.word	0x000020a5
    1878:	00001369 	.word	0x00001369
    187c:	00001dbd 	.word	0x00001dbd
    1880:	00001c81 	.word	0x00001c81
    1884:	000020bd 	.word	0x000020bd
    1888:	00001241 	.word	0x00001241
    188c:	00001fb9 	.word	0x00001fb9

00001890 <vQueueWaitForMessageRestricted>:
	{
    1890:	b570      	push	{r4, r5, r6, lr}
    1892:	0004      	movs	r4, r0
    1894:	000d      	movs	r5, r1
    1896:	0016      	movs	r6, r2
		prvLockQueue( pxQueue );
    1898:	4b11      	ldr	r3, [pc, #68]	; (18e0 <vQueueWaitForMessageRestricted+0x50>)
    189a:	4798      	blx	r3
    189c:	2344      	movs	r3, #68	; 0x44
    189e:	5ce3      	ldrb	r3, [r4, r3]
    18a0:	b25b      	sxtb	r3, r3
    18a2:	3301      	adds	r3, #1
    18a4:	d00d      	beq.n	18c2 <vQueueWaitForMessageRestricted+0x32>
    18a6:	2345      	movs	r3, #69	; 0x45
    18a8:	5ce3      	ldrb	r3, [r4, r3]
    18aa:	b25b      	sxtb	r3, r3
    18ac:	3301      	adds	r3, #1
    18ae:	d00c      	beq.n	18ca <vQueueWaitForMessageRestricted+0x3a>
    18b0:	4b0c      	ldr	r3, [pc, #48]	; (18e4 <vQueueWaitForMessageRestricted+0x54>)
    18b2:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    18b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    18b6:	2b00      	cmp	r3, #0
    18b8:	d00b      	beq.n	18d2 <vQueueWaitForMessageRestricted+0x42>
		prvUnlockQueue( pxQueue );
    18ba:	0020      	movs	r0, r4
    18bc:	4b0a      	ldr	r3, [pc, #40]	; (18e8 <vQueueWaitForMessageRestricted+0x58>)
    18be:	4798      	blx	r3
	}
    18c0:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
    18c2:	2200      	movs	r2, #0
    18c4:	2344      	movs	r3, #68	; 0x44
    18c6:	54e2      	strb	r2, [r4, r3]
    18c8:	e7ed      	b.n	18a6 <vQueueWaitForMessageRestricted+0x16>
    18ca:	2200      	movs	r2, #0
    18cc:	2345      	movs	r3, #69	; 0x45
    18ce:	54e2      	strb	r2, [r4, r3]
    18d0:	e7ee      	b.n	18b0 <vQueueWaitForMessageRestricted+0x20>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    18d2:	0020      	movs	r0, r4
    18d4:	3024      	adds	r0, #36	; 0x24
    18d6:	0032      	movs	r2, r6
    18d8:	0029      	movs	r1, r5
    18da:	4b04      	ldr	r3, [pc, #16]	; (18ec <vQueueWaitForMessageRestricted+0x5c>)
    18dc:	4798      	blx	r3
    18de:	e7ec      	b.n	18ba <vQueueWaitForMessageRestricted+0x2a>
    18e0:	00000d79 	.word	0x00000d79
    18e4:	00000d91 	.word	0x00000d91
    18e8:	00001369 	.word	0x00001369
    18ec:	00001fe5 	.word	0x00001fe5

000018f0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    18f0:	4b08      	ldr	r3, [pc, #32]	; (1914 <prvResetNextTaskUnblockTime+0x24>)
    18f2:	681b      	ldr	r3, [r3, #0]
    18f4:	681b      	ldr	r3, [r3, #0]
    18f6:	2b00      	cmp	r3, #0
    18f8:	d007      	beq.n	190a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    18fa:	4b06      	ldr	r3, [pc, #24]	; (1914 <prvResetNextTaskUnblockTime+0x24>)
    18fc:	681b      	ldr	r3, [r3, #0]
    18fe:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    1900:	68db      	ldr	r3, [r3, #12]
    1902:	685a      	ldr	r2, [r3, #4]
    1904:	4b04      	ldr	r3, [pc, #16]	; (1918 <prvResetNextTaskUnblockTime+0x28>)
    1906:	601a      	str	r2, [r3, #0]
	}
}
    1908:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
    190a:	2201      	movs	r2, #1
    190c:	4252      	negs	r2, r2
    190e:	4b02      	ldr	r3, [pc, #8]	; (1918 <prvResetNextTaskUnblockTime+0x28>)
    1910:	601a      	str	r2, [r3, #0]
    1912:	e7f9      	b.n	1908 <prvResetNextTaskUnblockTime+0x18>
    1914:	200030fc 	.word	0x200030fc
    1918:	200031ac 	.word	0x200031ac

0000191c <prvIdleTask>:
{
    191c:	b5f0      	push	{r4, r5, r6, r7, lr}
    191e:	46d6      	mov	lr, sl
    1920:	464f      	mov	r7, r9
    1922:	4646      	mov	r6, r8
    1924:	b5c0      	push	{r6, r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    1926:	4b14      	ldr	r3, [pc, #80]	; (1978 <prvIdleTask+0x5c>)
    1928:	4699      	mov	r9, r3
			taskENTER_CRITICAL();
    192a:	4b14      	ldr	r3, [pc, #80]	; (197c <prvIdleTask+0x60>)
    192c:	4698      	mov	r8, r3
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    192e:	4f14      	ldr	r7, [pc, #80]	; (1980 <prvIdleTask+0x64>)
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1930:	4b14      	ldr	r3, [pc, #80]	; (1984 <prvIdleTask+0x68>)
    1932:	469a      	mov	sl, r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    1934:	464b      	mov	r3, r9
    1936:	681b      	ldr	r3, [r3, #0]
    1938:	2b00      	cmp	r3, #0
    193a:	d016      	beq.n	196a <prvIdleTask+0x4e>
			taskENTER_CRITICAL();
    193c:	47c0      	blx	r8
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    193e:	68fb      	ldr	r3, [r7, #12]
    1940:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1942:	1d28      	adds	r0, r5, #4
    1944:	47d0      	blx	sl
				--uxCurrentNumberOfTasks;
    1946:	4a10      	ldr	r2, [pc, #64]	; (1988 <prvIdleTask+0x6c>)
    1948:	6813      	ldr	r3, [r2, #0]
    194a:	3b01      	subs	r3, #1
    194c:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
    194e:	4c0a      	ldr	r4, [pc, #40]	; (1978 <prvIdleTask+0x5c>)
    1950:	6823      	ldr	r3, [r4, #0]
    1952:	3b01      	subs	r3, #1
    1954:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
    1956:	4b0d      	ldr	r3, [pc, #52]	; (198c <prvIdleTask+0x70>)
    1958:	4798      	blx	r3
			vPortFree( pxTCB->pxStack );
    195a:	6b28      	ldr	r0, [r5, #48]	; 0x30
    195c:	4e0c      	ldr	r6, [pc, #48]	; (1990 <prvIdleTask+0x74>)
    195e:	47b0      	blx	r6
			vPortFree( pxTCB );
    1960:	0028      	movs	r0, r5
    1962:	47b0      	blx	r6
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    1964:	6823      	ldr	r3, [r4, #0]
    1966:	2b00      	cmp	r3, #0
    1968:	d1e8      	bne.n	193c <prvIdleTask+0x20>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    196a:	4b0a      	ldr	r3, [pc, #40]	; (1994 <prvIdleTask+0x78>)
    196c:	681b      	ldr	r3, [r3, #0]
    196e:	2b01      	cmp	r3, #1
    1970:	d9e0      	bls.n	1934 <prvIdleTask+0x18>
				taskYIELD();
    1972:	4b09      	ldr	r3, [pc, #36]	; (1998 <prvIdleTask+0x7c>)
    1974:	4798      	blx	r3
    1976:	e7dd      	b.n	1934 <prvIdleTask+0x18>
    1978:	2000316c 	.word	0x2000316c
    197c:	00000d79 	.word	0x00000d79
    1980:	200031e0 	.word	0x200031e0
    1984:	00001217 	.word	0x00001217
    1988:	20003168 	.word	0x20003168
    198c:	00000d91 	.word	0x00000d91
    1990:	00000ead 	.word	0x00000ead
    1994:	20003104 	.word	0x20003104
    1998:	00000d61 	.word	0x00000d61

0000199c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    199c:	b570      	push	{r4, r5, r6, lr}
    199e:	0004      	movs	r4, r0
    19a0:	000d      	movs	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    19a2:	4b17      	ldr	r3, [pc, #92]	; (1a00 <prvAddCurrentTaskToDelayedList+0x64>)
    19a4:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    19a6:	4b17      	ldr	r3, [pc, #92]	; (1a04 <prvAddCurrentTaskToDelayedList+0x68>)
    19a8:	6818      	ldr	r0, [r3, #0]
    19aa:	3004      	adds	r0, #4
    19ac:	4b16      	ldr	r3, [pc, #88]	; (1a08 <prvAddCurrentTaskToDelayedList+0x6c>)
    19ae:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    19b0:	1c63      	adds	r3, r4, #1
    19b2:	d013      	beq.n	19dc <prvAddCurrentTaskToDelayedList+0x40>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    19b4:	1934      	adds	r4, r6, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    19b6:	4b13      	ldr	r3, [pc, #76]	; (1a04 <prvAddCurrentTaskToDelayedList+0x68>)
    19b8:	681b      	ldr	r3, [r3, #0]
    19ba:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
    19bc:	42a6      	cmp	r6, r4
    19be:	d816      	bhi.n	19ee <prvAddCurrentTaskToDelayedList+0x52>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    19c0:	4b12      	ldr	r3, [pc, #72]	; (1a0c <prvAddCurrentTaskToDelayedList+0x70>)
    19c2:	6818      	ldr	r0, [r3, #0]
    19c4:	4b0f      	ldr	r3, [pc, #60]	; (1a04 <prvAddCurrentTaskToDelayedList+0x68>)
    19c6:	6819      	ldr	r1, [r3, #0]
    19c8:	3104      	adds	r1, #4
    19ca:	4b11      	ldr	r3, [pc, #68]	; (1a10 <prvAddCurrentTaskToDelayedList+0x74>)
    19cc:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    19ce:	4b11      	ldr	r3, [pc, #68]	; (1a14 <prvAddCurrentTaskToDelayedList+0x78>)
    19d0:	681b      	ldr	r3, [r3, #0]
    19d2:	429c      	cmp	r4, r3
    19d4:	d212      	bcs.n	19fc <prvAddCurrentTaskToDelayedList+0x60>
				{
					xNextTaskUnblockTime = xTimeToWake;
    19d6:	4b0f      	ldr	r3, [pc, #60]	; (1a14 <prvAddCurrentTaskToDelayedList+0x78>)
    19d8:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    19da:	e00f      	b.n	19fc <prvAddCurrentTaskToDelayedList+0x60>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    19dc:	2d00      	cmp	r5, #0
    19de:	d0e9      	beq.n	19b4 <prvAddCurrentTaskToDelayedList+0x18>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    19e0:	4b08      	ldr	r3, [pc, #32]	; (1a04 <prvAddCurrentTaskToDelayedList+0x68>)
    19e2:	6819      	ldr	r1, [r3, #0]
    19e4:	3104      	adds	r1, #4
    19e6:	480c      	ldr	r0, [pc, #48]	; (1a18 <prvAddCurrentTaskToDelayedList+0x7c>)
    19e8:	4b0c      	ldr	r3, [pc, #48]	; (1a1c <prvAddCurrentTaskToDelayedList+0x80>)
    19ea:	4798      	blx	r3
    19ec:	e006      	b.n	19fc <prvAddCurrentTaskToDelayedList+0x60>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    19ee:	4b0c      	ldr	r3, [pc, #48]	; (1a20 <prvAddCurrentTaskToDelayedList+0x84>)
    19f0:	6818      	ldr	r0, [r3, #0]
    19f2:	4b04      	ldr	r3, [pc, #16]	; (1a04 <prvAddCurrentTaskToDelayedList+0x68>)
    19f4:	6819      	ldr	r1, [r3, #0]
    19f6:	3104      	adds	r1, #4
    19f8:	4b05      	ldr	r3, [pc, #20]	; (1a10 <prvAddCurrentTaskToDelayedList+0x74>)
    19fa:	4798      	blx	r3
}
    19fc:	bd70      	pop	{r4, r5, r6, pc}
    19fe:	46c0      	nop			; (mov r8, r8)
    1a00:	200031f4 	.word	0x200031f4
    1a04:	200030f8 	.word	0x200030f8
    1a08:	00001217 	.word	0x00001217
    1a0c:	200030fc 	.word	0x200030fc
    1a10:	000011e9 	.word	0x000011e9
    1a14:	200031ac 	.word	0x200031ac
    1a18:	200031cc 	.word	0x200031cc
    1a1c:	000011d1 	.word	0x000011d1
    1a20:	20003100 	.word	0x20003100

00001a24 <xTaskCreate>:
	{
    1a24:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a26:	46c6      	mov	lr, r8
    1a28:	b500      	push	{lr}
    1a2a:	b084      	sub	sp, #16
    1a2c:	9001      	str	r0, [sp, #4]
    1a2e:	000d      	movs	r5, r1
    1a30:	9302      	str	r3, [sp, #8]
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1a32:	0097      	lsls	r7, r2, #2
    1a34:	0038      	movs	r0, r7
    1a36:	4b5f      	ldr	r3, [pc, #380]	; (1bb4 <xTaskCreate+0x190>)
    1a38:	4798      	blx	r3
    1a3a:	1e06      	subs	r6, r0, #0
			if( pxStack != NULL )
    1a3c:	d100      	bne.n	1a40 <xTaskCreate+0x1c>
    1a3e:	e089      	b.n	1b54 <xTaskCreate+0x130>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    1a40:	2054      	movs	r0, #84	; 0x54
    1a42:	4b5c      	ldr	r3, [pc, #368]	; (1bb4 <xTaskCreate+0x190>)
    1a44:	4798      	blx	r3
    1a46:	1e04      	subs	r4, r0, #0
				if( pxNewTCB != NULL )
    1a48:	d100      	bne.n	1a4c <xTaskCreate+0x28>
    1a4a:	e080      	b.n	1b4e <xTaskCreate+0x12a>
					pxNewTCB->pxStack = pxStack;
    1a4c:	6306      	str	r6, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    1a4e:	003a      	movs	r2, r7
    1a50:	21a5      	movs	r1, #165	; 0xa5
    1a52:	0030      	movs	r0, r6
    1a54:	4b58      	ldr	r3, [pc, #352]	; (1bb8 <xTaskCreate+0x194>)
    1a56:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    1a58:	1f3a      	subs	r2, r7, #4
    1a5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    1a5c:	469c      	mov	ip, r3
    1a5e:	4462      	add	r2, ip
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    1a60:	2307      	movs	r3, #7
    1a62:	439a      	bics	r2, r3
    1a64:	4690      	mov	r8, r2
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    1a66:	782a      	ldrb	r2, [r5, #0]
    1a68:	332d      	adds	r3, #45	; 0x2d
    1a6a:	54e2      	strb	r2, [r4, r3]
		if( pcName[ x ] == 0x00 )
    1a6c:	782b      	ldrb	r3, [r5, #0]
    1a6e:	2b00      	cmp	r3, #0
    1a70:	d00d      	beq.n	1a8e <xTaskCreate+0x6a>
    1a72:	3501      	adds	r5, #1
    1a74:	0023      	movs	r3, r4
    1a76:	3335      	adds	r3, #53	; 0x35
    1a78:	0020      	movs	r0, r4
    1a7a:	303c      	adds	r0, #60	; 0x3c
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    1a7c:	782a      	ldrb	r2, [r5, #0]
    1a7e:	701a      	strb	r2, [r3, #0]
		if( pcName[ x ] == 0x00 )
    1a80:	782a      	ldrb	r2, [r5, #0]
    1a82:	2a00      	cmp	r2, #0
    1a84:	d003      	beq.n	1a8e <xTaskCreate+0x6a>
    1a86:	3501      	adds	r5, #1
    1a88:	3301      	adds	r3, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    1a8a:	4283      	cmp	r3, r0
    1a8c:	d1f6      	bne.n	1a7c <xTaskCreate+0x58>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    1a8e:	2200      	movs	r2, #0
    1a90:	233b      	movs	r3, #59	; 0x3b
    1a92:	54e2      	strb	r2, [r4, r3]
    1a94:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    1a96:	2f04      	cmp	r7, #4
    1a98:	d900      	bls.n	1a9c <xTaskCreate+0x78>
    1a9a:	2704      	movs	r7, #4
	pxNewTCB->uxPriority = uxPriority;
    1a9c:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
    1a9e:	6467      	str	r7, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
    1aa0:	2600      	movs	r6, #0
    1aa2:	64a6      	str	r6, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    1aa4:	1d23      	adds	r3, r4, #4
    1aa6:	9303      	str	r3, [sp, #12]
    1aa8:	0018      	movs	r0, r3
    1aaa:	4d44      	ldr	r5, [pc, #272]	; (1bbc <xTaskCreate+0x198>)
    1aac:	47a8      	blx	r5
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    1aae:	0020      	movs	r0, r4
    1ab0:	3018      	adds	r0, #24
    1ab2:	47a8      	blx	r5
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    1ab4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1ab6:	2305      	movs	r3, #5
    1ab8:	1bdb      	subs	r3, r3, r7
    1aba:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    1abc:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
    1abe:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    1ac0:	2350      	movs	r3, #80	; 0x50
    1ac2:	54e6      	strb	r6, [r4, r3]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    1ac4:	9a02      	ldr	r2, [sp, #8]
    1ac6:	9901      	ldr	r1, [sp, #4]
    1ac8:	4640      	mov	r0, r8
    1aca:	4b3d      	ldr	r3, [pc, #244]	; (1bc0 <xTaskCreate+0x19c>)
    1acc:	4798      	blx	r3
    1ace:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
    1ad0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1ad2:	2b00      	cmp	r3, #0
    1ad4:	d000      	beq.n	1ad8 <xTaskCreate+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    1ad6:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
    1ad8:	4b3a      	ldr	r3, [pc, #232]	; (1bc4 <xTaskCreate+0x1a0>)
    1ada:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
    1adc:	4a3a      	ldr	r2, [pc, #232]	; (1bc8 <xTaskCreate+0x1a4>)
    1ade:	6813      	ldr	r3, [r2, #0]
    1ae0:	3301      	adds	r3, #1
    1ae2:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
    1ae4:	4b39      	ldr	r3, [pc, #228]	; (1bcc <xTaskCreate+0x1a8>)
    1ae6:	681b      	ldr	r3, [r3, #0]
    1ae8:	2b00      	cmp	r3, #0
    1aea:	d036      	beq.n	1b5a <xTaskCreate+0x136>
			if( xSchedulerRunning == pdFALSE )
    1aec:	4b38      	ldr	r3, [pc, #224]	; (1bd0 <xTaskCreate+0x1ac>)
    1aee:	681b      	ldr	r3, [r3, #0]
    1af0:	2b00      	cmp	r3, #0
    1af2:	d107      	bne.n	1b04 <xTaskCreate+0xe0>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    1af4:	4b35      	ldr	r3, [pc, #212]	; (1bcc <xTaskCreate+0x1a8>)
    1af6:	681b      	ldr	r3, [r3, #0]
    1af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1afa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1afc:	4293      	cmp	r3, r2
    1afe:	d801      	bhi.n	1b04 <xTaskCreate+0xe0>
					pxCurrentTCB = pxNewTCB;
    1b00:	4b32      	ldr	r3, [pc, #200]	; (1bcc <xTaskCreate+0x1a8>)
    1b02:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
    1b04:	4a33      	ldr	r2, [pc, #204]	; (1bd4 <xTaskCreate+0x1b0>)
    1b06:	6813      	ldr	r3, [r2, #0]
    1b08:	3301      	adds	r3, #1
    1b0a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    1b0c:	63e3      	str	r3, [r4, #60]	; 0x3c
		prvAddTaskToReadyList( pxNewTCB );
    1b0e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1b10:	4a31      	ldr	r2, [pc, #196]	; (1bd8 <xTaskCreate+0x1b4>)
    1b12:	6812      	ldr	r2, [r2, #0]
    1b14:	4293      	cmp	r3, r2
    1b16:	d901      	bls.n	1b1c <xTaskCreate+0xf8>
    1b18:	4a2f      	ldr	r2, [pc, #188]	; (1bd8 <xTaskCreate+0x1b4>)
    1b1a:	6013      	str	r3, [r2, #0]
    1b1c:	0098      	lsls	r0, r3, #2
    1b1e:	18c0      	adds	r0, r0, r3
    1b20:	0080      	lsls	r0, r0, #2
    1b22:	4b2e      	ldr	r3, [pc, #184]	; (1bdc <xTaskCreate+0x1b8>)
    1b24:	1818      	adds	r0, r3, r0
    1b26:	9903      	ldr	r1, [sp, #12]
    1b28:	4b2d      	ldr	r3, [pc, #180]	; (1be0 <xTaskCreate+0x1bc>)
    1b2a:	4798      	blx	r3
	taskEXIT_CRITICAL();
    1b2c:	4b2d      	ldr	r3, [pc, #180]	; (1be4 <xTaskCreate+0x1c0>)
    1b2e:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
    1b30:	4b27      	ldr	r3, [pc, #156]	; (1bd0 <xTaskCreate+0x1ac>)
    1b32:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
    1b34:	2001      	movs	r0, #1
	if( xSchedulerRunning != pdFALSE )
    1b36:	2b00      	cmp	r3, #0
    1b38:	d005      	beq.n	1b46 <xTaskCreate+0x122>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    1b3a:	4b24      	ldr	r3, [pc, #144]	; (1bcc <xTaskCreate+0x1a8>)
    1b3c:	681b      	ldr	r3, [r3, #0]
    1b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1b40:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1b42:	429a      	cmp	r2, r3
    1b44:	d331      	bcc.n	1baa <xTaskCreate+0x186>
	}
    1b46:	b004      	add	sp, #16
    1b48:	bc04      	pop	{r2}
    1b4a:	4690      	mov	r8, r2
    1b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vPortFree( pxStack );
    1b4e:	0030      	movs	r0, r6
    1b50:	4b25      	ldr	r3, [pc, #148]	; (1be8 <xTaskCreate+0x1c4>)
    1b52:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    1b54:	2001      	movs	r0, #1
    1b56:	4240      	negs	r0, r0
    1b58:	e7f5      	b.n	1b46 <xTaskCreate+0x122>
			pxCurrentTCB = pxNewTCB;
    1b5a:	4b1c      	ldr	r3, [pc, #112]	; (1bcc <xTaskCreate+0x1a8>)
    1b5c:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    1b5e:	6813      	ldr	r3, [r2, #0]
    1b60:	2b01      	cmp	r3, #1
    1b62:	d1cf      	bne.n	1b04 <xTaskCreate+0xe0>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    1b64:	4f1d      	ldr	r7, [pc, #116]	; (1bdc <xTaskCreate+0x1b8>)
    1b66:	0038      	movs	r0, r7
    1b68:	4e20      	ldr	r6, [pc, #128]	; (1bec <xTaskCreate+0x1c8>)
    1b6a:	47b0      	blx	r6
    1b6c:	0038      	movs	r0, r7
    1b6e:	3014      	adds	r0, #20
    1b70:	47b0      	blx	r6
    1b72:	0038      	movs	r0, r7
    1b74:	3028      	adds	r0, #40	; 0x28
    1b76:	47b0      	blx	r6
    1b78:	0038      	movs	r0, r7
    1b7a:	303c      	adds	r0, #60	; 0x3c
    1b7c:	47b0      	blx	r6
    1b7e:	0038      	movs	r0, r7
    1b80:	3050      	adds	r0, #80	; 0x50
    1b82:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
    1b84:	4b1a      	ldr	r3, [pc, #104]	; (1bf0 <xTaskCreate+0x1cc>)
    1b86:	4698      	mov	r8, r3
    1b88:	0018      	movs	r0, r3
    1b8a:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
    1b8c:	4f19      	ldr	r7, [pc, #100]	; (1bf4 <xTaskCreate+0x1d0>)
    1b8e:	0038      	movs	r0, r7
    1b90:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
    1b92:	4819      	ldr	r0, [pc, #100]	; (1bf8 <xTaskCreate+0x1d4>)
    1b94:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
    1b96:	4819      	ldr	r0, [pc, #100]	; (1bfc <xTaskCreate+0x1d8>)
    1b98:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
    1b9a:	4819      	ldr	r0, [pc, #100]	; (1c00 <xTaskCreate+0x1dc>)
    1b9c:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
    1b9e:	4b19      	ldr	r3, [pc, #100]	; (1c04 <xTaskCreate+0x1e0>)
    1ba0:	4642      	mov	r2, r8
    1ba2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    1ba4:	4b18      	ldr	r3, [pc, #96]	; (1c08 <xTaskCreate+0x1e4>)
    1ba6:	601f      	str	r7, [r3, #0]
    1ba8:	e7ac      	b.n	1b04 <xTaskCreate+0xe0>
			taskYIELD_IF_USING_PREEMPTION();
    1baa:	4b18      	ldr	r3, [pc, #96]	; (1c0c <xTaskCreate+0x1e8>)
    1bac:	4798      	blx	r3
			xReturn = pdPASS;
    1bae:	2001      	movs	r0, #1
    1bb0:	e7c9      	b.n	1b46 <xTaskCreate+0x122>
    1bb2:	46c0      	nop			; (mov r8, r8)
    1bb4:	00000e35 	.word	0x00000e35
    1bb8:	000031cf 	.word	0x000031cf
    1bbc:	000011cb 	.word	0x000011cb
    1bc0:	00000cc5 	.word	0x00000cc5
    1bc4:	00000d79 	.word	0x00000d79
    1bc8:	20003168 	.word	0x20003168
    1bcc:	200030f8 	.word	0x200030f8
    1bd0:	200031c8 	.word	0x200031c8
    1bd4:	20003178 	.word	0x20003178
    1bd8:	2000317c 	.word	0x2000317c
    1bdc:	20003104 	.word	0x20003104
    1be0:	000011d1 	.word	0x000011d1
    1be4:	00000d91 	.word	0x00000d91
    1be8:	00000ead 	.word	0x00000ead
    1bec:	000011b5 	.word	0x000011b5
    1bf0:	20003180 	.word	0x20003180
    1bf4:	20003194 	.word	0x20003194
    1bf8:	200031b4 	.word	0x200031b4
    1bfc:	200031e0 	.word	0x200031e0
    1c00:	200031cc 	.word	0x200031cc
    1c04:	200030fc 	.word	0x200030fc
    1c08:	20003100 	.word	0x20003100
    1c0c:	00000d61 	.word	0x00000d61

00001c10 <vTaskStartScheduler>:
{
    1c10:	b510      	push	{r4, lr}
    1c12:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
    1c14:	4b11      	ldr	r3, [pc, #68]	; (1c5c <vTaskStartScheduler+0x4c>)
    1c16:	9301      	str	r3, [sp, #4]
    1c18:	2300      	movs	r3, #0
    1c1a:	9300      	str	r3, [sp, #0]
    1c1c:	2264      	movs	r2, #100	; 0x64
    1c1e:	4910      	ldr	r1, [pc, #64]	; (1c60 <vTaskStartScheduler+0x50>)
    1c20:	4810      	ldr	r0, [pc, #64]	; (1c64 <vTaskStartScheduler+0x54>)
    1c22:	4c11      	ldr	r4, [pc, #68]	; (1c68 <vTaskStartScheduler+0x58>)
    1c24:	47a0      	blx	r4
		if( xReturn == pdPASS )
    1c26:	2801      	cmp	r0, #1
    1c28:	d003      	beq.n	1c32 <vTaskStartScheduler+0x22>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    1c2a:	1c43      	adds	r3, r0, #1
    1c2c:	d013      	beq.n	1c56 <vTaskStartScheduler+0x46>
}
    1c2e:	b002      	add	sp, #8
    1c30:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
    1c32:	4b0e      	ldr	r3, [pc, #56]	; (1c6c <vTaskStartScheduler+0x5c>)
    1c34:	4798      	blx	r3
	if( xReturn == pdPASS )
    1c36:	2801      	cmp	r0, #1
    1c38:	d1f7      	bne.n	1c2a <vTaskStartScheduler+0x1a>
		portDISABLE_INTERRUPTS();
    1c3a:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
    1c3c:	2201      	movs	r2, #1
    1c3e:	4252      	negs	r2, r2
    1c40:	4b0b      	ldr	r3, [pc, #44]	; (1c70 <vTaskStartScheduler+0x60>)
    1c42:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    1c44:	3202      	adds	r2, #2
    1c46:	4b0b      	ldr	r3, [pc, #44]	; (1c74 <vTaskStartScheduler+0x64>)
    1c48:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    1c4a:	2200      	movs	r2, #0
    1c4c:	4b0a      	ldr	r3, [pc, #40]	; (1c78 <vTaskStartScheduler+0x68>)
    1c4e:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
    1c50:	4b0a      	ldr	r3, [pc, #40]	; (1c7c <vTaskStartScheduler+0x6c>)
    1c52:	4798      	blx	r3
    1c54:	e7eb      	b.n	1c2e <vTaskStartScheduler+0x1e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    1c56:	b672      	cpsid	i
    1c58:	e7fe      	b.n	1c58 <vTaskStartScheduler+0x48>
    1c5a:	46c0      	nop			; (mov r8, r8)
    1c5c:	200031a8 	.word	0x200031a8
    1c60:	00003cf0 	.word	0x00003cf0
    1c64:	0000191d 	.word	0x0000191d
    1c68:	00001a25 	.word	0x00001a25
    1c6c:	0000227d 	.word	0x0000227d
    1c70:	200031ac 	.word	0x200031ac
    1c74:	200031c8 	.word	0x200031c8
    1c78:	200031f4 	.word	0x200031f4
    1c7c:	00000ce9 	.word	0x00000ce9

00001c80 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    1c80:	4a02      	ldr	r2, [pc, #8]	; (1c8c <vTaskSuspendAll+0xc>)
    1c82:	6813      	ldr	r3, [r2, #0]
    1c84:	3301      	adds	r3, #1
    1c86:	6013      	str	r3, [r2, #0]
}
    1c88:	4770      	bx	lr
    1c8a:	46c0      	nop			; (mov r8, r8)
    1c8c:	20003174 	.word	0x20003174

00001c90 <xTaskGetTickCount>:
		xTicks = xTickCount;
    1c90:	4b01      	ldr	r3, [pc, #4]	; (1c98 <xTaskGetTickCount+0x8>)
    1c92:	6818      	ldr	r0, [r3, #0]
}
    1c94:	4770      	bx	lr
    1c96:	46c0      	nop			; (mov r8, r8)
    1c98:	200031f4 	.word	0x200031f4

00001c9c <xTaskIncrementTick>:
{
    1c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c9e:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1ca0:	4b38      	ldr	r3, [pc, #224]	; (1d84 <xTaskIncrementTick+0xe8>)
    1ca2:	681b      	ldr	r3, [r3, #0]
    1ca4:	2b00      	cmp	r3, #0
    1ca6:	d160      	bne.n	1d6a <xTaskIncrementTick+0xce>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    1ca8:	4b37      	ldr	r3, [pc, #220]	; (1d88 <xTaskIncrementTick+0xec>)
    1caa:	681d      	ldr	r5, [r3, #0]
    1cac:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
    1cae:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    1cb0:	2d00      	cmp	r5, #0
    1cb2:	d112      	bne.n	1cda <xTaskIncrementTick+0x3e>
			taskSWITCH_DELAYED_LISTS();
    1cb4:	4b35      	ldr	r3, [pc, #212]	; (1d8c <xTaskIncrementTick+0xf0>)
    1cb6:	681b      	ldr	r3, [r3, #0]
    1cb8:	681b      	ldr	r3, [r3, #0]
    1cba:	2b00      	cmp	r3, #0
    1cbc:	d001      	beq.n	1cc2 <xTaskIncrementTick+0x26>
    1cbe:	b672      	cpsid	i
    1cc0:	e7fe      	b.n	1cc0 <xTaskIncrementTick+0x24>
    1cc2:	4a32      	ldr	r2, [pc, #200]	; (1d8c <xTaskIncrementTick+0xf0>)
    1cc4:	6811      	ldr	r1, [r2, #0]
    1cc6:	4b32      	ldr	r3, [pc, #200]	; (1d90 <xTaskIncrementTick+0xf4>)
    1cc8:	6818      	ldr	r0, [r3, #0]
    1cca:	6010      	str	r0, [r2, #0]
    1ccc:	6019      	str	r1, [r3, #0]
    1cce:	4a31      	ldr	r2, [pc, #196]	; (1d94 <xTaskIncrementTick+0xf8>)
    1cd0:	6813      	ldr	r3, [r2, #0]
    1cd2:	3301      	adds	r3, #1
    1cd4:	6013      	str	r3, [r2, #0]
    1cd6:	4b30      	ldr	r3, [pc, #192]	; (1d98 <xTaskIncrementTick+0xfc>)
    1cd8:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
    1cda:	4b30      	ldr	r3, [pc, #192]	; (1d9c <xTaskIncrementTick+0x100>)
    1cdc:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
    1cde:	2400      	movs	r4, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
    1ce0:	429d      	cmp	r5, r3
    1ce2:	d333      	bcc.n	1d4c <xTaskIncrementTick+0xb0>
    1ce4:	2400      	movs	r4, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    1ce6:	4f29      	ldr	r7, [pc, #164]	; (1d8c <xTaskIncrementTick+0xf0>)
    1ce8:	683b      	ldr	r3, [r7, #0]
    1cea:	681b      	ldr	r3, [r3, #0]
    1cec:	2b00      	cmp	r3, #0
    1cee:	d029      	beq.n	1d44 <xTaskIncrementTick+0xa8>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    1cf0:	4b26      	ldr	r3, [pc, #152]	; (1d8c <xTaskIncrementTick+0xf0>)
    1cf2:	681b      	ldr	r3, [r3, #0]
    1cf4:	68db      	ldr	r3, [r3, #12]
    1cf6:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    1cf8:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
    1cfa:	429d      	cmp	r5, r3
    1cfc:	d332      	bcc.n	1d64 <xTaskIncrementTick+0xc8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1cfe:	1d33      	adds	r3, r6, #4
    1d00:	9301      	str	r3, [sp, #4]
    1d02:	0018      	movs	r0, r3
    1d04:	4b26      	ldr	r3, [pc, #152]	; (1da0 <xTaskIncrementTick+0x104>)
    1d06:	4798      	blx	r3
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    1d08:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1d0a:	2b00      	cmp	r3, #0
    1d0c:	d003      	beq.n	1d16 <xTaskIncrementTick+0x7a>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1d0e:	0030      	movs	r0, r6
    1d10:	3018      	adds	r0, #24
    1d12:	4b23      	ldr	r3, [pc, #140]	; (1da0 <xTaskIncrementTick+0x104>)
    1d14:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    1d16:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    1d18:	4a22      	ldr	r2, [pc, #136]	; (1da4 <xTaskIncrementTick+0x108>)
    1d1a:	6812      	ldr	r2, [r2, #0]
    1d1c:	4293      	cmp	r3, r2
    1d1e:	d901      	bls.n	1d24 <xTaskIncrementTick+0x88>
    1d20:	4a20      	ldr	r2, [pc, #128]	; (1da4 <xTaskIncrementTick+0x108>)
    1d22:	6013      	str	r3, [r2, #0]
    1d24:	0098      	lsls	r0, r3, #2
    1d26:	18c0      	adds	r0, r0, r3
    1d28:	0080      	lsls	r0, r0, #2
    1d2a:	4b1f      	ldr	r3, [pc, #124]	; (1da8 <xTaskIncrementTick+0x10c>)
    1d2c:	1818      	adds	r0, r3, r0
    1d2e:	9901      	ldr	r1, [sp, #4]
    1d30:	4b1e      	ldr	r3, [pc, #120]	; (1dac <xTaskIncrementTick+0x110>)
    1d32:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1d34:	4b1e      	ldr	r3, [pc, #120]	; (1db0 <xTaskIncrementTick+0x114>)
    1d36:	681b      	ldr	r3, [r3, #0]
    1d38:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    1d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1d3c:	429a      	cmp	r2, r3
    1d3e:	d3d3      	bcc.n	1ce8 <xTaskIncrementTick+0x4c>
							xSwitchRequired = pdTRUE;
    1d40:	2401      	movs	r4, #1
    1d42:	e7d1      	b.n	1ce8 <xTaskIncrementTick+0x4c>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1d44:	2201      	movs	r2, #1
    1d46:	4252      	negs	r2, r2
    1d48:	4b14      	ldr	r3, [pc, #80]	; (1d9c <xTaskIncrementTick+0x100>)
    1d4a:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    1d4c:	4b18      	ldr	r3, [pc, #96]	; (1db0 <xTaskIncrementTick+0x114>)
    1d4e:	681b      	ldr	r3, [r3, #0]
    1d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1d52:	0093      	lsls	r3, r2, #2
    1d54:	189b      	adds	r3, r3, r2
    1d56:	009b      	lsls	r3, r3, #2
    1d58:	4a13      	ldr	r2, [pc, #76]	; (1da8 <xTaskIncrementTick+0x10c>)
    1d5a:	589b      	ldr	r3, [r3, r2]
    1d5c:	2b01      	cmp	r3, #1
    1d5e:	d909      	bls.n	1d74 <xTaskIncrementTick+0xd8>
				xSwitchRequired = pdTRUE;
    1d60:	2401      	movs	r4, #1
    1d62:	e007      	b.n	1d74 <xTaskIncrementTick+0xd8>
						xNextTaskUnblockTime = xItemValue;
    1d64:	4a0d      	ldr	r2, [pc, #52]	; (1d9c <xTaskIncrementTick+0x100>)
    1d66:	6013      	str	r3, [r2, #0]
						break;
    1d68:	e7f0      	b.n	1d4c <xTaskIncrementTick+0xb0>
		++uxPendedTicks;
    1d6a:	4a12      	ldr	r2, [pc, #72]	; (1db4 <xTaskIncrementTick+0x118>)
    1d6c:	6813      	ldr	r3, [r2, #0]
    1d6e:	3301      	adds	r3, #1
    1d70:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
    1d72:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
    1d74:	4b10      	ldr	r3, [pc, #64]	; (1db8 <xTaskIncrementTick+0x11c>)
    1d76:	681b      	ldr	r3, [r3, #0]
    1d78:	2b00      	cmp	r3, #0
    1d7a:	d000      	beq.n	1d7e <xTaskIncrementTick+0xe2>
			xSwitchRequired = pdTRUE;
    1d7c:	2401      	movs	r4, #1
}
    1d7e:	0020      	movs	r0, r4
    1d80:	b003      	add	sp, #12
    1d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d84:	20003174 	.word	0x20003174
    1d88:	200031f4 	.word	0x200031f4
    1d8c:	200030fc 	.word	0x200030fc
    1d90:	20003100 	.word	0x20003100
    1d94:	200031b0 	.word	0x200031b0
    1d98:	000018f1 	.word	0x000018f1
    1d9c:	200031ac 	.word	0x200031ac
    1da0:	00001217 	.word	0x00001217
    1da4:	2000317c 	.word	0x2000317c
    1da8:	20003104 	.word	0x20003104
    1dac:	000011d1 	.word	0x000011d1
    1db0:	200030f8 	.word	0x200030f8
    1db4:	20003170 	.word	0x20003170
    1db8:	200031f8 	.word	0x200031f8

00001dbc <xTaskResumeAll>:
{
    1dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
    1dbe:	4b30      	ldr	r3, [pc, #192]	; (1e80 <xTaskResumeAll+0xc4>)
    1dc0:	681b      	ldr	r3, [r3, #0]
    1dc2:	2b00      	cmp	r3, #0
    1dc4:	d101      	bne.n	1dca <xTaskResumeAll+0xe>
    1dc6:	b672      	cpsid	i
    1dc8:	e7fe      	b.n	1dc8 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
    1dca:	4b2e      	ldr	r3, [pc, #184]	; (1e84 <xTaskResumeAll+0xc8>)
    1dcc:	4798      	blx	r3
		--uxSchedulerSuspended;
    1dce:	4b2c      	ldr	r3, [pc, #176]	; (1e80 <xTaskResumeAll+0xc4>)
    1dd0:	681a      	ldr	r2, [r3, #0]
    1dd2:	3a01      	subs	r2, #1
    1dd4:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1dd6:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
    1dd8:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1dda:	2b00      	cmp	r3, #0
    1ddc:	d103      	bne.n	1de6 <xTaskResumeAll+0x2a>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    1dde:	4b2a      	ldr	r3, [pc, #168]	; (1e88 <xTaskResumeAll+0xcc>)
    1de0:	681b      	ldr	r3, [r3, #0]
    1de2:	2b00      	cmp	r3, #0
    1de4:	d103      	bne.n	1dee <xTaskResumeAll+0x32>
	taskEXIT_CRITICAL();
    1de6:	4b29      	ldr	r3, [pc, #164]	; (1e8c <xTaskResumeAll+0xd0>)
    1de8:	4798      	blx	r3
}
    1dea:	0020      	movs	r0, r4
    1dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    1dee:	4d28      	ldr	r5, [pc, #160]	; (1e90 <xTaskResumeAll+0xd4>)
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    1df0:	002f      	movs	r7, r5
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    1df2:	682b      	ldr	r3, [r5, #0]
    1df4:	2b00      	cmp	r3, #0
    1df6:	d022      	beq.n	1e3e <xTaskResumeAll+0x82>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    1df8:	68fb      	ldr	r3, [r7, #12]
    1dfa:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1dfc:	0020      	movs	r0, r4
    1dfe:	3018      	adds	r0, #24
    1e00:	4b24      	ldr	r3, [pc, #144]	; (1e94 <xTaskResumeAll+0xd8>)
    1e02:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1e04:	1d26      	adds	r6, r4, #4
    1e06:	0030      	movs	r0, r6
    1e08:	4b22      	ldr	r3, [pc, #136]	; (1e94 <xTaskResumeAll+0xd8>)
    1e0a:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    1e0c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1e0e:	4a22      	ldr	r2, [pc, #136]	; (1e98 <xTaskResumeAll+0xdc>)
    1e10:	6812      	ldr	r2, [r2, #0]
    1e12:	4293      	cmp	r3, r2
    1e14:	d901      	bls.n	1e1a <xTaskResumeAll+0x5e>
    1e16:	4a20      	ldr	r2, [pc, #128]	; (1e98 <xTaskResumeAll+0xdc>)
    1e18:	6013      	str	r3, [r2, #0]
    1e1a:	0098      	lsls	r0, r3, #2
    1e1c:	18c0      	adds	r0, r0, r3
    1e1e:	0080      	lsls	r0, r0, #2
    1e20:	4b1e      	ldr	r3, [pc, #120]	; (1e9c <xTaskResumeAll+0xe0>)
    1e22:	1818      	adds	r0, r3, r0
    1e24:	0031      	movs	r1, r6
    1e26:	4b1e      	ldr	r3, [pc, #120]	; (1ea0 <xTaskResumeAll+0xe4>)
    1e28:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1e2a:	4b1e      	ldr	r3, [pc, #120]	; (1ea4 <xTaskResumeAll+0xe8>)
    1e2c:	681b      	ldr	r3, [r3, #0]
    1e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1e30:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1e32:	429a      	cmp	r2, r3
    1e34:	d3dd      	bcc.n	1df2 <xTaskResumeAll+0x36>
						xYieldPending = pdTRUE;
    1e36:	2201      	movs	r2, #1
    1e38:	4b1b      	ldr	r3, [pc, #108]	; (1ea8 <xTaskResumeAll+0xec>)
    1e3a:	601a      	str	r2, [r3, #0]
    1e3c:	e7d9      	b.n	1df2 <xTaskResumeAll+0x36>
				if( pxTCB != NULL )
    1e3e:	2c00      	cmp	r4, #0
    1e40:	d001      	beq.n	1e46 <xTaskResumeAll+0x8a>
					prvResetNextTaskUnblockTime();
    1e42:	4b1a      	ldr	r3, [pc, #104]	; (1eac <xTaskResumeAll+0xf0>)
    1e44:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    1e46:	4b1a      	ldr	r3, [pc, #104]	; (1eb0 <xTaskResumeAll+0xf4>)
    1e48:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
    1e4a:	2c00      	cmp	r4, #0
    1e4c:	d00e      	beq.n	1e6c <xTaskResumeAll+0xb0>
							if( xTaskIncrementTick() != pdFALSE )
    1e4e:	4f19      	ldr	r7, [pc, #100]	; (1eb4 <xTaskResumeAll+0xf8>)
								xYieldPending = pdTRUE;
    1e50:	4e15      	ldr	r6, [pc, #84]	; (1ea8 <xTaskResumeAll+0xec>)
    1e52:	2501      	movs	r5, #1
    1e54:	e002      	b.n	1e5c <xTaskResumeAll+0xa0>
							--uxPendedCounts;
    1e56:	3c01      	subs	r4, #1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    1e58:	2c00      	cmp	r4, #0
    1e5a:	d004      	beq.n	1e66 <xTaskResumeAll+0xaa>
							if( xTaskIncrementTick() != pdFALSE )
    1e5c:	47b8      	blx	r7
    1e5e:	2800      	cmp	r0, #0
    1e60:	d0f9      	beq.n	1e56 <xTaskResumeAll+0x9a>
								xYieldPending = pdTRUE;
    1e62:	6035      	str	r5, [r6, #0]
    1e64:	e7f7      	b.n	1e56 <xTaskResumeAll+0x9a>
						uxPendedTicks = 0;
    1e66:	2200      	movs	r2, #0
    1e68:	4b11      	ldr	r3, [pc, #68]	; (1eb0 <xTaskResumeAll+0xf4>)
    1e6a:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
    1e6c:	4b0e      	ldr	r3, [pc, #56]	; (1ea8 <xTaskResumeAll+0xec>)
    1e6e:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
    1e70:	2400      	movs	r4, #0
				if( xYieldPending != pdFALSE )
    1e72:	2b00      	cmp	r3, #0
    1e74:	d0b7      	beq.n	1de6 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
    1e76:	4b10      	ldr	r3, [pc, #64]	; (1eb8 <xTaskResumeAll+0xfc>)
    1e78:	4798      	blx	r3
						xAlreadyYielded = pdTRUE;
    1e7a:	3401      	adds	r4, #1
    1e7c:	e7b3      	b.n	1de6 <xTaskResumeAll+0x2a>
    1e7e:	46c0      	nop			; (mov r8, r8)
    1e80:	20003174 	.word	0x20003174
    1e84:	00000d79 	.word	0x00000d79
    1e88:	20003168 	.word	0x20003168
    1e8c:	00000d91 	.word	0x00000d91
    1e90:	200031b4 	.word	0x200031b4
    1e94:	00001217 	.word	0x00001217
    1e98:	2000317c 	.word	0x2000317c
    1e9c:	20003104 	.word	0x20003104
    1ea0:	000011d1 	.word	0x000011d1
    1ea4:	200030f8 	.word	0x200030f8
    1ea8:	200031f8 	.word	0x200031f8
    1eac:	000018f1 	.word	0x000018f1
    1eb0:	20003170 	.word	0x20003170
    1eb4:	00001c9d 	.word	0x00001c9d
    1eb8:	00000d61 	.word	0x00000d61

00001ebc <vTaskDelay>:
	{
    1ebc:	b510      	push	{r4, lr}
    1ebe:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
    1ec0:	d00f      	beq.n	1ee2 <vTaskDelay+0x26>
			configASSERT( uxSchedulerSuspended == 0 );
    1ec2:	4b09      	ldr	r3, [pc, #36]	; (1ee8 <vTaskDelay+0x2c>)
    1ec4:	681b      	ldr	r3, [r3, #0]
    1ec6:	2b00      	cmp	r3, #0
    1ec8:	d001      	beq.n	1ece <vTaskDelay+0x12>
    1eca:	b672      	cpsid	i
    1ecc:	e7fe      	b.n	1ecc <vTaskDelay+0x10>
			vTaskSuspendAll();
    1ece:	4b07      	ldr	r3, [pc, #28]	; (1eec <vTaskDelay+0x30>)
    1ed0:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    1ed2:	2100      	movs	r1, #0
    1ed4:	0020      	movs	r0, r4
    1ed6:	4b06      	ldr	r3, [pc, #24]	; (1ef0 <vTaskDelay+0x34>)
    1ed8:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
    1eda:	4b06      	ldr	r3, [pc, #24]	; (1ef4 <vTaskDelay+0x38>)
    1edc:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
    1ede:	2800      	cmp	r0, #0
    1ee0:	d101      	bne.n	1ee6 <vTaskDelay+0x2a>
			portYIELD_WITHIN_API();
    1ee2:	4b05      	ldr	r3, [pc, #20]	; (1ef8 <vTaskDelay+0x3c>)
    1ee4:	4798      	blx	r3
	}
    1ee6:	bd10      	pop	{r4, pc}
    1ee8:	20003174 	.word	0x20003174
    1eec:	00001c81 	.word	0x00001c81
    1ef0:	0000199d 	.word	0x0000199d
    1ef4:	00001dbd 	.word	0x00001dbd
    1ef8:	00000d61 	.word	0x00000d61

00001efc <vTaskSwitchContext>:
{
    1efc:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    1efe:	4b28      	ldr	r3, [pc, #160]	; (1fa0 <vTaskSwitchContext+0xa4>)
    1f00:	681b      	ldr	r3, [r3, #0]
    1f02:	2b00      	cmp	r3, #0
    1f04:	d125      	bne.n	1f52 <vTaskSwitchContext+0x56>
		xYieldPending = pdFALSE;
    1f06:	2200      	movs	r2, #0
    1f08:	4b26      	ldr	r3, [pc, #152]	; (1fa4 <vTaskSwitchContext+0xa8>)
    1f0a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
    1f0c:	4b26      	ldr	r3, [pc, #152]	; (1fa8 <vTaskSwitchContext+0xac>)
    1f0e:	681a      	ldr	r2, [r3, #0]
    1f10:	681b      	ldr	r3, [r3, #0]
    1f12:	6812      	ldr	r2, [r2, #0]
    1f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1f16:	429a      	cmp	r2, r3
    1f18:	d805      	bhi.n	1f26 <vTaskSwitchContext+0x2a>
    1f1a:	4b23      	ldr	r3, [pc, #140]	; (1fa8 <vTaskSwitchContext+0xac>)
    1f1c:	6818      	ldr	r0, [r3, #0]
    1f1e:	6819      	ldr	r1, [r3, #0]
    1f20:	3134      	adds	r1, #52	; 0x34
    1f22:	4b22      	ldr	r3, [pc, #136]	; (1fac <vTaskSwitchContext+0xb0>)
    1f24:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
    1f26:	4b22      	ldr	r3, [pc, #136]	; (1fb0 <vTaskSwitchContext+0xb4>)
    1f28:	681b      	ldr	r3, [r3, #0]
    1f2a:	009a      	lsls	r2, r3, #2
    1f2c:	18d2      	adds	r2, r2, r3
    1f2e:	0092      	lsls	r2, r2, #2
    1f30:	4920      	ldr	r1, [pc, #128]	; (1fb4 <vTaskSwitchContext+0xb8>)
    1f32:	5852      	ldr	r2, [r2, r1]
    1f34:	2a00      	cmp	r2, #0
    1f36:	d110      	bne.n	1f5a <vTaskSwitchContext+0x5e>
    1f38:	2b00      	cmp	r3, #0
    1f3a:	d008      	beq.n	1f4e <vTaskSwitchContext+0x52>
    1f3c:	3b01      	subs	r3, #1
    1f3e:	009a      	lsls	r2, r3, #2
    1f40:	18d2      	adds	r2, r2, r3
    1f42:	0092      	lsls	r2, r2, #2
    1f44:	5852      	ldr	r2, [r2, r1]
    1f46:	2a00      	cmp	r2, #0
    1f48:	d107      	bne.n	1f5a <vTaskSwitchContext+0x5e>
    1f4a:	2b00      	cmp	r3, #0
    1f4c:	d1f6      	bne.n	1f3c <vTaskSwitchContext+0x40>
    1f4e:	b672      	cpsid	i
    1f50:	e7fe      	b.n	1f50 <vTaskSwitchContext+0x54>
		xYieldPending = pdTRUE;
    1f52:	2201      	movs	r2, #1
    1f54:	4b13      	ldr	r3, [pc, #76]	; (1fa4 <vTaskSwitchContext+0xa8>)
    1f56:	601a      	str	r2, [r3, #0]
}
    1f58:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
    1f5a:	4816      	ldr	r0, [pc, #88]	; (1fb4 <vTaskSwitchContext+0xb8>)
    1f5c:	009a      	lsls	r2, r3, #2
    1f5e:	18d1      	adds	r1, r2, r3
    1f60:	0089      	lsls	r1, r1, #2
    1f62:	1841      	adds	r1, r0, r1
    1f64:	684c      	ldr	r4, [r1, #4]
    1f66:	6864      	ldr	r4, [r4, #4]
    1f68:	604c      	str	r4, [r1, #4]
    1f6a:	18d2      	adds	r2, r2, r3
    1f6c:	0092      	lsls	r2, r2, #2
    1f6e:	3208      	adds	r2, #8
    1f70:	1882      	adds	r2, r0, r2
    1f72:	4294      	cmp	r4, r2
    1f74:	d00b      	beq.n	1f8e <vTaskSwitchContext+0x92>
    1f76:	009a      	lsls	r2, r3, #2
    1f78:	18d2      	adds	r2, r2, r3
    1f7a:	0092      	lsls	r2, r2, #2
    1f7c:	490d      	ldr	r1, [pc, #52]	; (1fb4 <vTaskSwitchContext+0xb8>)
    1f7e:	188a      	adds	r2, r1, r2
    1f80:	6852      	ldr	r2, [r2, #4]
    1f82:	68d1      	ldr	r1, [r2, #12]
    1f84:	4a08      	ldr	r2, [pc, #32]	; (1fa8 <vTaskSwitchContext+0xac>)
    1f86:	6011      	str	r1, [r2, #0]
    1f88:	4a09      	ldr	r2, [pc, #36]	; (1fb0 <vTaskSwitchContext+0xb4>)
    1f8a:	6013      	str	r3, [r2, #0]
}
    1f8c:	e7e4      	b.n	1f58 <vTaskSwitchContext+0x5c>
		taskSELECT_HIGHEST_PRIORITY_TASK();
    1f8e:	6860      	ldr	r0, [r4, #4]
    1f90:	009a      	lsls	r2, r3, #2
    1f92:	18d2      	adds	r2, r2, r3
    1f94:	0092      	lsls	r2, r2, #2
    1f96:	4907      	ldr	r1, [pc, #28]	; (1fb4 <vTaskSwitchContext+0xb8>)
    1f98:	188a      	adds	r2, r1, r2
    1f9a:	6050      	str	r0, [r2, #4]
    1f9c:	e7eb      	b.n	1f76 <vTaskSwitchContext+0x7a>
    1f9e:	46c0      	nop			; (mov r8, r8)
    1fa0:	20003174 	.word	0x20003174
    1fa4:	200031f8 	.word	0x200031f8
    1fa8:	200030f8 	.word	0x200030f8
    1fac:	00002fe5 	.word	0x00002fe5
    1fb0:	2000317c 	.word	0x2000317c
    1fb4:	20003104 	.word	0x20003104

00001fb8 <vTaskPlaceOnEventList>:
{
    1fb8:	b510      	push	{r4, lr}
    1fba:	000c      	movs	r4, r1
	configASSERT( pxEventList );
    1fbc:	2800      	cmp	r0, #0
    1fbe:	d101      	bne.n	1fc4 <vTaskPlaceOnEventList+0xc>
    1fc0:	b672      	cpsid	i
    1fc2:	e7fe      	b.n	1fc2 <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1fc4:	4b04      	ldr	r3, [pc, #16]	; (1fd8 <vTaskPlaceOnEventList+0x20>)
    1fc6:	6819      	ldr	r1, [r3, #0]
    1fc8:	3118      	adds	r1, #24
    1fca:	4b04      	ldr	r3, [pc, #16]	; (1fdc <vTaskPlaceOnEventList+0x24>)
    1fcc:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    1fce:	2101      	movs	r1, #1
    1fd0:	0020      	movs	r0, r4
    1fd2:	4b03      	ldr	r3, [pc, #12]	; (1fe0 <vTaskPlaceOnEventList+0x28>)
    1fd4:	4798      	blx	r3
}
    1fd6:	bd10      	pop	{r4, pc}
    1fd8:	200030f8 	.word	0x200030f8
    1fdc:	000011e9 	.word	0x000011e9
    1fe0:	0000199d 	.word	0x0000199d

00001fe4 <vTaskPlaceOnEventListRestricted>:
	{
    1fe4:	b570      	push	{r4, r5, r6, lr}
    1fe6:	000c      	movs	r4, r1
    1fe8:	0015      	movs	r5, r2
		configASSERT( pxEventList );
    1fea:	2800      	cmp	r0, #0
    1fec:	d00d      	beq.n	200a <STACK_SIZE+0xa>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1fee:	4b08      	ldr	r3, [pc, #32]	; (2010 <STACK_SIZE+0x10>)
    1ff0:	6819      	ldr	r1, [r3, #0]
    1ff2:	3118      	adds	r1, #24
    1ff4:	4b07      	ldr	r3, [pc, #28]	; (2014 <STACK_SIZE+0x14>)
    1ff6:	4798      	blx	r3
		if( xWaitIndefinitely != pdFALSE )
    1ff8:	2d00      	cmp	r5, #0
    1ffa:	d001      	beq.n	2000 <STACK_SIZE>
			xTicksToWait = portMAX_DELAY;
    1ffc:	2401      	movs	r4, #1
    1ffe:	4264      	negs	r4, r4
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    2000:	0029      	movs	r1, r5
    2002:	0020      	movs	r0, r4
    2004:	4b04      	ldr	r3, [pc, #16]	; (2018 <STACK_SIZE+0x18>)
    2006:	4798      	blx	r3
	}
    2008:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxEventList );
    200a:	b672      	cpsid	i
    200c:	e7fe      	b.n	200c <STACK_SIZE+0xc>
    200e:	46c0      	nop			; (mov r8, r8)
    2010:	200030f8 	.word	0x200030f8
    2014:	000011d1 	.word	0x000011d1
    2018:	0000199d 	.word	0x0000199d

0000201c <xTaskRemoveFromEventList>:
{
    201c:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    201e:	68c3      	ldr	r3, [r0, #12]
    2020:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
    2022:	2c00      	cmp	r4, #0
    2024:	d027      	beq.n	2076 <xTaskRemoveFromEventList+0x5a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    2026:	0025      	movs	r5, r4
    2028:	3518      	adds	r5, #24
    202a:	0028      	movs	r0, r5
    202c:	4b15      	ldr	r3, [pc, #84]	; (2084 <xTaskRemoveFromEventList+0x68>)
    202e:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2030:	4b15      	ldr	r3, [pc, #84]	; (2088 <xTaskRemoveFromEventList+0x6c>)
    2032:	681b      	ldr	r3, [r3, #0]
    2034:	2b00      	cmp	r3, #0
    2036:	d120      	bne.n	207a <xTaskRemoveFromEventList+0x5e>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    2038:	1d25      	adds	r5, r4, #4
    203a:	0028      	movs	r0, r5
    203c:	4b11      	ldr	r3, [pc, #68]	; (2084 <xTaskRemoveFromEventList+0x68>)
    203e:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    2040:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2042:	4a12      	ldr	r2, [pc, #72]	; (208c <xTaskRemoveFromEventList+0x70>)
    2044:	6812      	ldr	r2, [r2, #0]
    2046:	4293      	cmp	r3, r2
    2048:	d901      	bls.n	204e <xTaskRemoveFromEventList+0x32>
    204a:	4a10      	ldr	r2, [pc, #64]	; (208c <xTaskRemoveFromEventList+0x70>)
    204c:	6013      	str	r3, [r2, #0]
    204e:	0098      	lsls	r0, r3, #2
    2050:	18c0      	adds	r0, r0, r3
    2052:	0080      	lsls	r0, r0, #2
    2054:	4b0e      	ldr	r3, [pc, #56]	; (2090 <xTaskRemoveFromEventList+0x74>)
    2056:	1818      	adds	r0, r3, r0
    2058:	0029      	movs	r1, r5
    205a:	4b0e      	ldr	r3, [pc, #56]	; (2094 <xTaskRemoveFromEventList+0x78>)
    205c:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    205e:	4b0e      	ldr	r3, [pc, #56]	; (2098 <xTaskRemoveFromEventList+0x7c>)
    2060:	681b      	ldr	r3, [r3, #0]
    2062:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
    2066:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    2068:	429a      	cmp	r2, r3
    206a:	d903      	bls.n	2074 <xTaskRemoveFromEventList+0x58>
		xYieldPending = pdTRUE;
    206c:	2201      	movs	r2, #1
    206e:	4b0b      	ldr	r3, [pc, #44]	; (209c <xTaskRemoveFromEventList+0x80>)
    2070:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
    2072:	3001      	adds	r0, #1
}
    2074:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxUnblockedTCB );
    2076:	b672      	cpsid	i
    2078:	e7fe      	b.n	2078 <xTaskRemoveFromEventList+0x5c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    207a:	0029      	movs	r1, r5
    207c:	4808      	ldr	r0, [pc, #32]	; (20a0 <xTaskRemoveFromEventList+0x84>)
    207e:	4b05      	ldr	r3, [pc, #20]	; (2094 <xTaskRemoveFromEventList+0x78>)
    2080:	4798      	blx	r3
    2082:	e7ec      	b.n	205e <xTaskRemoveFromEventList+0x42>
    2084:	00001217 	.word	0x00001217
    2088:	20003174 	.word	0x20003174
    208c:	2000317c 	.word	0x2000317c
    2090:	20003104 	.word	0x20003104
    2094:	000011d1 	.word	0x000011d1
    2098:	200030f8 	.word	0x200030f8
    209c:	200031f8 	.word	0x200031f8
    20a0:	200031b4 	.word	0x200031b4

000020a4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    20a4:	4b03      	ldr	r3, [pc, #12]	; (20b4 <vTaskInternalSetTimeOutState+0x10>)
    20a6:	681b      	ldr	r3, [r3, #0]
    20a8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    20aa:	4b03      	ldr	r3, [pc, #12]	; (20b8 <vTaskInternalSetTimeOutState+0x14>)
    20ac:	681b      	ldr	r3, [r3, #0]
    20ae:	6043      	str	r3, [r0, #4]
}
    20b0:	4770      	bx	lr
    20b2:	46c0      	nop			; (mov r8, r8)
    20b4:	200031b0 	.word	0x200031b0
    20b8:	200031f4 	.word	0x200031f4

000020bc <xTaskCheckForTimeOut>:
{
    20bc:	b570      	push	{r4, r5, r6, lr}
    20be:	0006      	movs	r6, r0
    20c0:	000d      	movs	r5, r1
	configASSERT( pxTimeOut );
    20c2:	2800      	cmp	r0, #0
    20c4:	d01b      	beq.n	20fe <xTaskCheckForTimeOut+0x42>
	configASSERT( pxTicksToWait );
    20c6:	2900      	cmp	r1, #0
    20c8:	d01b      	beq.n	2102 <xTaskCheckForTimeOut+0x46>
	taskENTER_CRITICAL();
    20ca:	4b13      	ldr	r3, [pc, #76]	; (2118 <xTaskCheckForTimeOut+0x5c>)
    20cc:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    20ce:	4b13      	ldr	r3, [pc, #76]	; (211c <xTaskCheckForTimeOut+0x60>)
    20d0:	681a      	ldr	r2, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    20d2:	6871      	ldr	r1, [r6, #4]
			if( *pxTicksToWait == portMAX_DELAY )
    20d4:	682b      	ldr	r3, [r5, #0]
    20d6:	1c58      	adds	r0, r3, #1
    20d8:	d01c      	beq.n	2114 <xTaskCheckForTimeOut+0x58>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    20da:	4811      	ldr	r0, [pc, #68]	; (2120 <xTaskCheckForTimeOut+0x64>)
    20dc:	6800      	ldr	r0, [r0, #0]
    20de:	6834      	ldr	r4, [r6, #0]
    20e0:	4284      	cmp	r4, r0
    20e2:	d002      	beq.n	20ea <xTaskCheckForTimeOut+0x2e>
			xReturn = pdTRUE;
    20e4:	2401      	movs	r4, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    20e6:	428a      	cmp	r2, r1
    20e8:	d205      	bcs.n	20f6 <xTaskCheckForTimeOut+0x3a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    20ea:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    20ec:	429a      	cmp	r2, r3
    20ee:	d30a      	bcc.n	2106 <xTaskCheckForTimeOut+0x4a>
			*pxTicksToWait = 0;
    20f0:	2300      	movs	r3, #0
    20f2:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
    20f4:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
    20f6:	4b0b      	ldr	r3, [pc, #44]	; (2124 <xTaskCheckForTimeOut+0x68>)
    20f8:	4798      	blx	r3
}
    20fa:	0020      	movs	r0, r4
    20fc:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxTimeOut );
    20fe:	b672      	cpsid	i
    2100:	e7fe      	b.n	2100 <xTaskCheckForTimeOut+0x44>
	configASSERT( pxTicksToWait );
    2102:	b672      	cpsid	i
    2104:	e7fe      	b.n	2104 <xTaskCheckForTimeOut+0x48>
			*pxTicksToWait -= xElapsedTime;
    2106:	1a9b      	subs	r3, r3, r2
    2108:	602b      	str	r3, [r5, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
    210a:	0030      	movs	r0, r6
    210c:	4b06      	ldr	r3, [pc, #24]	; (2128 <xTaskCheckForTimeOut+0x6c>)
    210e:	4798      	blx	r3
			xReturn = pdFALSE;
    2110:	2400      	movs	r4, #0
    2112:	e7f0      	b.n	20f6 <xTaskCheckForTimeOut+0x3a>
				xReturn = pdFALSE;
    2114:	2400      	movs	r4, #0
    2116:	e7ee      	b.n	20f6 <xTaskCheckForTimeOut+0x3a>
    2118:	00000d79 	.word	0x00000d79
    211c:	200031f4 	.word	0x200031f4
    2120:	200031b0 	.word	0x200031b0
    2124:	00000d91 	.word	0x00000d91
    2128:	000020a5 	.word	0x000020a5

0000212c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    212c:	2201      	movs	r2, #1
    212e:	4b01      	ldr	r3, [pc, #4]	; (2134 <vTaskMissedYield+0x8>)
    2130:	601a      	str	r2, [r3, #0]
}
    2132:	4770      	bx	lr
    2134:	200031f8 	.word	0x200031f8

00002138 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
    2138:	4b05      	ldr	r3, [pc, #20]	; (2150 <xTaskGetSchedulerState+0x18>)
    213a:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
    213c:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
    213e:	2b00      	cmp	r3, #0
    2140:	d004      	beq.n	214c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2142:	4b04      	ldr	r3, [pc, #16]	; (2154 <xTaskGetSchedulerState+0x1c>)
    2144:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
    2146:	4243      	negs	r3, r0
    2148:	4158      	adcs	r0, r3
    214a:	0040      	lsls	r0, r0, #1
	}
    214c:	4770      	bx	lr
    214e:	46c0      	nop			; (mov r8, r8)
    2150:	200031c8 	.word	0x200031c8
    2154:	20003174 	.word	0x20003174

00002158 <xTaskPriorityDisinherit>:
	{
    2158:	b570      	push	{r4, r5, r6, lr}
    215a:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
    215c:	d02c      	beq.n	21b8 <xTaskPriorityDisinherit+0x60>
			configASSERT( pxTCB == pxCurrentTCB );
    215e:	4b18      	ldr	r3, [pc, #96]	; (21c0 <xTaskPriorityDisinherit+0x68>)
    2160:	681b      	ldr	r3, [r3, #0]
    2162:	4298      	cmp	r0, r3
    2164:	d001      	beq.n	216a <xTaskPriorityDisinherit+0x12>
    2166:	b672      	cpsid	i
    2168:	e7fe      	b.n	2168 <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
    216a:	6c83      	ldr	r3, [r0, #72]	; 0x48
    216c:	2b00      	cmp	r3, #0
    216e:	d101      	bne.n	2174 <xTaskPriorityDisinherit+0x1c>
    2170:	b672      	cpsid	i
    2172:	e7fe      	b.n	2172 <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
    2174:	3b01      	subs	r3, #1
    2176:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    2178:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    217a:	6c41      	ldr	r1, [r0, #68]	; 0x44
    217c:	428a      	cmp	r2, r1
    217e:	d01d      	beq.n	21bc <xTaskPriorityDisinherit+0x64>
	BaseType_t xReturn = pdFALSE;
    2180:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    2182:	2b00      	cmp	r3, #0
    2184:	d117      	bne.n	21b6 <xTaskPriorityDisinherit+0x5e>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2186:	1d25      	adds	r5, r4, #4
    2188:	0028      	movs	r0, r5
    218a:	4b0e      	ldr	r3, [pc, #56]	; (21c4 <xTaskPriorityDisinherit+0x6c>)
    218c:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    218e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    2190:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2192:	2205      	movs	r2, #5
    2194:	1ad2      	subs	r2, r2, r3
    2196:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
    2198:	4a0b      	ldr	r2, [pc, #44]	; (21c8 <xTaskPriorityDisinherit+0x70>)
    219a:	6812      	ldr	r2, [r2, #0]
    219c:	4293      	cmp	r3, r2
    219e:	d901      	bls.n	21a4 <xTaskPriorityDisinherit+0x4c>
    21a0:	4a09      	ldr	r2, [pc, #36]	; (21c8 <xTaskPriorityDisinherit+0x70>)
    21a2:	6013      	str	r3, [r2, #0]
    21a4:	009a      	lsls	r2, r3, #2
    21a6:	18d3      	adds	r3, r2, r3
    21a8:	009b      	lsls	r3, r3, #2
    21aa:	4808      	ldr	r0, [pc, #32]	; (21cc <xTaskPriorityDisinherit+0x74>)
    21ac:	18c0      	adds	r0, r0, r3
    21ae:	0029      	movs	r1, r5
    21b0:	4b07      	ldr	r3, [pc, #28]	; (21d0 <xTaskPriorityDisinherit+0x78>)
    21b2:	4798      	blx	r3
					xReturn = pdTRUE;
    21b4:	2001      	movs	r0, #1
	}
    21b6:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
    21b8:	2000      	movs	r0, #0
    21ba:	e7fc      	b.n	21b6 <xTaskPriorityDisinherit+0x5e>
    21bc:	2000      	movs	r0, #0
    21be:	e7fa      	b.n	21b6 <xTaskPriorityDisinherit+0x5e>
    21c0:	200030f8 	.word	0x200030f8
    21c4:	00001217 	.word	0x00001217
    21c8:	2000317c 	.word	0x2000317c
    21cc:	20003104 	.word	0x20003104
    21d0:	000011d1 	.word	0x000011d1

000021d4 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    21d4:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    21d6:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    21d8:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
    21da:	4291      	cmp	r1, r2
    21dc:	d80b      	bhi.n	21f6 <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    21de:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    21e0:	2401      	movs	r4, #1
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    21e2:	6983      	ldr	r3, [r0, #24]
    21e4:	429a      	cmp	r2, r3
    21e6:	d211      	bcs.n	220c <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    21e8:	1d01      	adds	r1, r0, #4
    21ea:	4b09      	ldr	r3, [pc, #36]	; (2210 <prvInsertTimerInActiveList+0x3c>)
    21ec:	6818      	ldr	r0, [r3, #0]
    21ee:	4b09      	ldr	r3, [pc, #36]	; (2214 <prvInsertTimerInActiveList+0x40>)
    21f0:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
    21f2:	2400      	movs	r4, #0
    21f4:	e00a      	b.n	220c <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    21f6:	429a      	cmp	r2, r3
    21f8:	d202      	bcs.n	2200 <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    21fa:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    21fc:	4299      	cmp	r1, r3
    21fe:	d205      	bcs.n	220c <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2200:	1d01      	adds	r1, r0, #4
    2202:	4b05      	ldr	r3, [pc, #20]	; (2218 <prvInsertTimerInActiveList+0x44>)
    2204:	6818      	ldr	r0, [r3, #0]
    2206:	4b03      	ldr	r3, [pc, #12]	; (2214 <prvInsertTimerInActiveList+0x40>)
    2208:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
    220a:	2400      	movs	r4, #0
		}
	}

	return xProcessTimerNow;
}
    220c:	0020      	movs	r0, r4
    220e:	bd10      	pop	{r4, pc}
    2210:	20003200 	.word	0x20003200
    2214:	000011e9 	.word	0x000011e9
    2218:	200031fc 	.word	0x200031fc

0000221c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    221c:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    221e:	4b0e      	ldr	r3, [pc, #56]	; (2258 <prvCheckForValidListAndQueue+0x3c>)
    2220:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    2222:	4b0e      	ldr	r3, [pc, #56]	; (225c <prvCheckForValidListAndQueue+0x40>)
    2224:	681b      	ldr	r3, [r3, #0]
    2226:	2b00      	cmp	r3, #0
    2228:	d002      	beq.n	2230 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    222a:	4b0d      	ldr	r3, [pc, #52]	; (2260 <prvCheckForValidListAndQueue+0x44>)
    222c:	4798      	blx	r3
}
    222e:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
    2230:	4d0c      	ldr	r5, [pc, #48]	; (2264 <prvCheckForValidListAndQueue+0x48>)
    2232:	0028      	movs	r0, r5
    2234:	4e0c      	ldr	r6, [pc, #48]	; (2268 <prvCheckForValidListAndQueue+0x4c>)
    2236:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
    2238:	4c0c      	ldr	r4, [pc, #48]	; (226c <prvCheckForValidListAndQueue+0x50>)
    223a:	0020      	movs	r0, r4
    223c:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
    223e:	4b0c      	ldr	r3, [pc, #48]	; (2270 <prvCheckForValidListAndQueue+0x54>)
    2240:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    2242:	4b0c      	ldr	r3, [pc, #48]	; (2274 <prvCheckForValidListAndQueue+0x58>)
    2244:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    2246:	2200      	movs	r2, #0
    2248:	210c      	movs	r1, #12
    224a:	2005      	movs	r0, #5
    224c:	4b0a      	ldr	r3, [pc, #40]	; (2278 <prvCheckForValidListAndQueue+0x5c>)
    224e:	4798      	blx	r3
    2250:	4b02      	ldr	r3, [pc, #8]	; (225c <prvCheckForValidListAndQueue+0x40>)
    2252:	6018      	str	r0, [r3, #0]
    2254:	e7e9      	b.n	222a <prvCheckForValidListAndQueue+0xe>
    2256:	46c0      	nop			; (mov r8, r8)
    2258:	00000d79 	.word	0x00000d79
    225c:	20003230 	.word	0x20003230
    2260:	00000d91 	.word	0x00000d91
    2264:	20003204 	.word	0x20003204
    2268:	000011b5 	.word	0x000011b5
    226c:	20003218 	.word	0x20003218
    2270:	200031fc 	.word	0x200031fc
    2274:	20003200 	.word	0x20003200
    2278:	00001495 	.word	0x00001495

0000227c <xTimerCreateTimerTask>:
{
    227c:	b510      	push	{r4, lr}
    227e:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
    2280:	4b0a      	ldr	r3, [pc, #40]	; (22ac <xTimerCreateTimerTask+0x30>)
    2282:	4798      	blx	r3
	if( xTimerQueue != NULL )
    2284:	4b0a      	ldr	r3, [pc, #40]	; (22b0 <xTimerCreateTimerTask+0x34>)
    2286:	681b      	ldr	r3, [r3, #0]
    2288:	2b00      	cmp	r3, #0
    228a:	d00d      	beq.n	22a8 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate(	prvTimerTask,
    228c:	4b09      	ldr	r3, [pc, #36]	; (22b4 <xTimerCreateTimerTask+0x38>)
    228e:	9301      	str	r3, [sp, #4]
    2290:	2302      	movs	r3, #2
    2292:	9300      	str	r3, [sp, #0]
    2294:	2300      	movs	r3, #0
    2296:	2280      	movs	r2, #128	; 0x80
    2298:	4907      	ldr	r1, [pc, #28]	; (22b8 <xTimerCreateTimerTask+0x3c>)
    229a:	4808      	ldr	r0, [pc, #32]	; (22bc <xTimerCreateTimerTask+0x40>)
    229c:	4c08      	ldr	r4, [pc, #32]	; (22c0 <xTimerCreateTimerTask+0x44>)
    229e:	47a0      	blx	r4
	configASSERT( xReturn );
    22a0:	2800      	cmp	r0, #0
    22a2:	d001      	beq.n	22a8 <xTimerCreateTimerTask+0x2c>
}
    22a4:	b002      	add	sp, #8
    22a6:	bd10      	pop	{r4, pc}
	configASSERT( xReturn );
    22a8:	b672      	cpsid	i
    22aa:	e7fe      	b.n	22aa <xTimerCreateTimerTask+0x2e>
    22ac:	0000221d 	.word	0x0000221d
    22b0:	20003230 	.word	0x20003230
    22b4:	20003234 	.word	0x20003234
    22b8:	00003d20 	.word	0x00003d20
    22bc:	000023e9 	.word	0x000023e9
    22c0:	00001a25 	.word	0x00001a25

000022c4 <xTimerGenericCommand>:
{
    22c4:	b530      	push	{r4, r5, lr}
    22c6:	b085      	sub	sp, #20
    22c8:	0004      	movs	r4, r0
    22ca:	001d      	movs	r5, r3
	configASSERT( xTimer );
    22cc:	2800      	cmp	r0, #0
    22ce:	d014      	beq.n	22fa <xTimerGenericCommand+0x36>
	if( xTimerQueue != NULL )
    22d0:	4b13      	ldr	r3, [pc, #76]	; (2320 <xTimerGenericCommand+0x5c>)
    22d2:	6818      	ldr	r0, [r3, #0]
    22d4:	2800      	cmp	r0, #0
    22d6:	d021      	beq.n	231c <xTimerGenericCommand+0x58>
		xMessage.xMessageID = xCommandID;
    22d8:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    22da:	9202      	str	r2, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    22dc:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    22de:	2905      	cmp	r1, #5
    22e0:	dc15      	bgt.n	230e <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    22e2:	4b10      	ldr	r3, [pc, #64]	; (2324 <xTimerGenericCommand+0x60>)
    22e4:	4798      	blx	r3
    22e6:	2802      	cmp	r0, #2
    22e8:	d009      	beq.n	22fe <xTimerGenericCommand+0x3a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    22ea:	4b0d      	ldr	r3, [pc, #52]	; (2320 <xTimerGenericCommand+0x5c>)
    22ec:	6818      	ldr	r0, [r3, #0]
    22ee:	2300      	movs	r3, #0
    22f0:	2200      	movs	r2, #0
    22f2:	a901      	add	r1, sp, #4
    22f4:	4c0c      	ldr	r4, [pc, #48]	; (2328 <xTimerGenericCommand+0x64>)
    22f6:	47a0      	blx	r4
    22f8:	e00e      	b.n	2318 <xTimerGenericCommand+0x54>
	configASSERT( xTimer );
    22fa:	b672      	cpsid	i
    22fc:	e7fe      	b.n	22fc <xTimerGenericCommand+0x38>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    22fe:	4b08      	ldr	r3, [pc, #32]	; (2320 <xTimerGenericCommand+0x5c>)
    2300:	6818      	ldr	r0, [r3, #0]
    2302:	2300      	movs	r3, #0
    2304:	9a08      	ldr	r2, [sp, #32]
    2306:	a901      	add	r1, sp, #4
    2308:	4c07      	ldr	r4, [pc, #28]	; (2328 <xTimerGenericCommand+0x64>)
    230a:	47a0      	blx	r4
    230c:	e004      	b.n	2318 <xTimerGenericCommand+0x54>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    230e:	2300      	movs	r3, #0
    2310:	002a      	movs	r2, r5
    2312:	a901      	add	r1, sp, #4
    2314:	4c05      	ldr	r4, [pc, #20]	; (232c <xTimerGenericCommand+0x68>)
    2316:	47a0      	blx	r4
}
    2318:	b005      	add	sp, #20
    231a:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
    231c:	2000      	movs	r0, #0
	return xReturn;
    231e:	e7fb      	b.n	2318 <xTimerGenericCommand+0x54>
    2320:	20003230 	.word	0x20003230
    2324:	00002139 	.word	0x00002139
    2328:	000014e1 	.word	0x000014e1
    232c:	0000166d 	.word	0x0000166d

00002330 <prvSampleTimeNow>:
{
    2330:	b5f0      	push	{r4, r5, r6, r7, lr}
    2332:	46d6      	mov	lr, sl
    2334:	464f      	mov	r7, r9
    2336:	4646      	mov	r6, r8
    2338:	b5c0      	push	{r6, r7, lr}
    233a:	b082      	sub	sp, #8
    233c:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
    233e:	4b23      	ldr	r3, [pc, #140]	; (23cc <prvSampleTimeNow+0x9c>)
    2340:	4798      	blx	r3
    2342:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
    2344:	4b22      	ldr	r3, [pc, #136]	; (23d0 <prvSampleTimeNow+0xa0>)
    2346:	681b      	ldr	r3, [r3, #0]
    2348:	4298      	cmp	r0, r3
    234a:	d317      	bcc.n	237c <prvSampleTimeNow+0x4c>
		*pxTimerListsWereSwitched = pdFALSE;
    234c:	2300      	movs	r3, #0
    234e:	4642      	mov	r2, r8
    2350:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
    2352:	4b1f      	ldr	r3, [pc, #124]	; (23d0 <prvSampleTimeNow+0xa0>)
    2354:	4652      	mov	r2, sl
    2356:	601a      	str	r2, [r3, #0]
}
    2358:	4650      	mov	r0, sl
    235a:	b002      	add	sp, #8
    235c:	bc1c      	pop	{r2, r3, r4}
    235e:	4690      	mov	r8, r2
    2360:	4699      	mov	r9, r3
    2362:	46a2      	mov	sl, r4
    2364:	bdf0      	pop	{r4, r5, r6, r7, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2366:	2300      	movs	r3, #0
    2368:	9300      	str	r3, [sp, #0]
    236a:	003a      	movs	r2, r7
    236c:	2100      	movs	r1, #0
    236e:	0020      	movs	r0, r4
    2370:	4c18      	ldr	r4, [pc, #96]	; (23d4 <prvSampleTimeNow+0xa4>)
    2372:	47a0      	blx	r4
				configASSERT( xResult );
    2374:	2800      	cmp	r0, #0
    2376:	d104      	bne.n	2382 <prvSampleTimeNow+0x52>
    2378:	b672      	cpsid	i
    237a:	e7fe      	b.n	237a <prvSampleTimeNow+0x4a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    237c:	4d16      	ldr	r5, [pc, #88]	; (23d8 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    237e:	4b17      	ldr	r3, [pc, #92]	; (23dc <prvSampleTimeNow+0xac>)
    2380:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2382:	682b      	ldr	r3, [r5, #0]
    2384:	681a      	ldr	r2, [r3, #0]
    2386:	2a00      	cmp	r2, #0
    2388:	d017      	beq.n	23ba <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    238a:	68db      	ldr	r3, [r3, #12]
    238c:	681f      	ldr	r7, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    238e:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2390:	1d26      	adds	r6, r4, #4
    2392:	0030      	movs	r0, r6
    2394:	47c8      	blx	r9
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2396:	0020      	movs	r0, r4
    2398:	6a63      	ldr	r3, [r4, #36]	; 0x24
    239a:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    239c:	69e3      	ldr	r3, [r4, #28]
    239e:	2b01      	cmp	r3, #1
    23a0:	d1ef      	bne.n	2382 <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    23a2:	69a3      	ldr	r3, [r4, #24]
    23a4:	18fb      	adds	r3, r7, r3
			if( xReloadTime > xNextExpireTime )
    23a6:	429f      	cmp	r7, r3
    23a8:	d2dd      	bcs.n	2366 <prvSampleTimeNow+0x36>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    23aa:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    23ac:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    23ae:	4b0a      	ldr	r3, [pc, #40]	; (23d8 <prvSampleTimeNow+0xa8>)
    23b0:	6818      	ldr	r0, [r3, #0]
    23b2:	0031      	movs	r1, r6
    23b4:	4b0a      	ldr	r3, [pc, #40]	; (23e0 <prvSampleTimeNow+0xb0>)
    23b6:	4798      	blx	r3
    23b8:	e7e3      	b.n	2382 <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
    23ba:	4a0a      	ldr	r2, [pc, #40]	; (23e4 <prvSampleTimeNow+0xb4>)
    23bc:	4906      	ldr	r1, [pc, #24]	; (23d8 <prvSampleTimeNow+0xa8>)
    23be:	6810      	ldr	r0, [r2, #0]
    23c0:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
    23c2:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
    23c4:	2301      	movs	r3, #1
    23c6:	4642      	mov	r2, r8
    23c8:	6013      	str	r3, [r2, #0]
    23ca:	e7c2      	b.n	2352 <prvSampleTimeNow+0x22>
    23cc:	00001c91 	.word	0x00001c91
    23d0:	2000322c 	.word	0x2000322c
    23d4:	000022c5 	.word	0x000022c5
    23d8:	200031fc 	.word	0x200031fc
    23dc:	00001217 	.word	0x00001217
    23e0:	000011e9 	.word	0x000011e9
    23e4:	20003200 	.word	0x20003200

000023e8 <prvTimerTask>:
{
    23e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    23ea:	b089      	sub	sp, #36	; 0x24
		vApplicationDaemonTaskStartupHook();
    23ec:	4b53      	ldr	r3, [pc, #332]	; (253c <prvTimerTask+0x154>)
    23ee:	4798      	blx	r3
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    23f0:	4f53      	ldr	r7, [pc, #332]	; (2540 <prvTimerTask+0x158>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    23f2:	4b54      	ldr	r3, [pc, #336]	; (2544 <prvTimerTask+0x15c>)
    23f4:	681b      	ldr	r3, [r3, #0]
    23f6:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    23f8:	2a00      	cmp	r2, #0
    23fa:	d00e      	beq.n	241a <prvTimerTask+0x32>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    23fc:	68db      	ldr	r3, [r3, #12]
    23fe:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
    2400:	4b51      	ldr	r3, [pc, #324]	; (2548 <prvTimerTask+0x160>)
    2402:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2404:	a805      	add	r0, sp, #20
    2406:	4b51      	ldr	r3, [pc, #324]	; (254c <prvTimerTask+0x164>)
    2408:	4798      	blx	r3
    240a:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
    240c:	9b05      	ldr	r3, [sp, #20]
    240e:	2b00      	cmp	r3, #0
    2410:	d15f      	bne.n	24d2 <prvTimerTask+0xea>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2412:	4284      	cmp	r4, r0
    2414:	d936      	bls.n	2484 <prvTimerTask+0x9c>
    2416:	2200      	movs	r2, #0
    2418:	e00f      	b.n	243a <prvTimerTask+0x52>
	vTaskSuspendAll();
    241a:	4b4b      	ldr	r3, [pc, #300]	; (2548 <prvTimerTask+0x160>)
    241c:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    241e:	a805      	add	r0, sp, #20
    2420:	4b4a      	ldr	r3, [pc, #296]	; (254c <prvTimerTask+0x164>)
    2422:	4798      	blx	r3
    2424:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
    2426:	9b05      	ldr	r3, [sp, #20]
    2428:	2b00      	cmp	r3, #0
    242a:	d152      	bne.n	24d2 <prvTimerTask+0xea>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    242c:	4b48      	ldr	r3, [pc, #288]	; (2550 <prvTimerTask+0x168>)
    242e:	681b      	ldr	r3, [r3, #0]
    2430:	681b      	ldr	r3, [r3, #0]
    2432:	425a      	negs	r2, r3
    2434:	415a      	adcs	r2, r3
    2436:	b2d2      	uxtb	r2, r2
    2438:	2400      	movs	r4, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    243a:	1b61      	subs	r1, r4, r5
    243c:	4b45      	ldr	r3, [pc, #276]	; (2554 <prvTimerTask+0x16c>)
    243e:	6818      	ldr	r0, [r3, #0]
    2440:	4b45      	ldr	r3, [pc, #276]	; (2558 <prvTimerTask+0x170>)
    2442:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    2444:	4b45      	ldr	r3, [pc, #276]	; (255c <prvTimerTask+0x174>)
    2446:	4798      	blx	r3
    2448:	2800      	cmp	r0, #0
    244a:	d03f      	beq.n	24cc <prvTimerTask+0xe4>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    244c:	4d41      	ldr	r5, [pc, #260]	; (2554 <prvTimerTask+0x16c>)
    244e:	4c44      	ldr	r4, [pc, #272]	; (2560 <prvTimerTask+0x178>)
    2450:	2200      	movs	r2, #0
    2452:	a905      	add	r1, sp, #20
    2454:	6828      	ldr	r0, [r5, #0]
    2456:	47a0      	blx	r4
    2458:	2800      	cmp	r0, #0
    245a:	d0ca      	beq.n	23f2 <prvTimerTask+0xa>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    245c:	9b05      	ldr	r3, [sp, #20]
    245e:	9303      	str	r3, [sp, #12]
    2460:	2b00      	cmp	r3, #0
    2462:	dbf5      	blt.n	2450 <prvTimerTask+0x68>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2464:	9e07      	ldr	r6, [sp, #28]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    2466:	6973      	ldr	r3, [r6, #20]
    2468:	2b00      	cmp	r3, #0
    246a:	d001      	beq.n	2470 <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    246c:	1d30      	adds	r0, r6, #4
    246e:	47b8      	blx	r7
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2470:	a804      	add	r0, sp, #16
    2472:	4b36      	ldr	r3, [pc, #216]	; (254c <prvTimerTask+0x164>)
    2474:	4798      	blx	r3
			switch( xMessage.xMessageID )
    2476:	9b05      	ldr	r3, [sp, #20]
    2478:	2b09      	cmp	r3, #9
    247a:	d8e9      	bhi.n	2450 <prvTimerTask+0x68>
    247c:	009b      	lsls	r3, r3, #2
    247e:	4a39      	ldr	r2, [pc, #228]	; (2564 <prvTimerTask+0x17c>)
    2480:	58d3      	ldr	r3, [r2, r3]
    2482:	469f      	mov	pc, r3
				( void ) xTaskResumeAll();
    2484:	4b35      	ldr	r3, [pc, #212]	; (255c <prvTimerTask+0x174>)
    2486:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    2488:	4b2e      	ldr	r3, [pc, #184]	; (2544 <prvTimerTask+0x15c>)
    248a:	681b      	ldr	r3, [r3, #0]
    248c:	68db      	ldr	r3, [r3, #12]
    248e:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2490:	1d30      	adds	r0, r6, #4
    2492:	4b2b      	ldr	r3, [pc, #172]	; (2540 <prvTimerTask+0x158>)
    2494:	4798      	blx	r3
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    2496:	69f3      	ldr	r3, [r6, #28]
    2498:	2b01      	cmp	r3, #1
    249a:	d003      	beq.n	24a4 <prvTimerTask+0xbc>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    249c:	6a73      	ldr	r3, [r6, #36]	; 0x24
    249e:	0030      	movs	r0, r6
    24a0:	4798      	blx	r3
    24a2:	e7d3      	b.n	244c <prvTimerTask+0x64>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    24a4:	69b3      	ldr	r3, [r6, #24]
    24a6:	18e1      	adds	r1, r4, r3
    24a8:	0023      	movs	r3, r4
    24aa:	002a      	movs	r2, r5
    24ac:	0030      	movs	r0, r6
    24ae:	4d2e      	ldr	r5, [pc, #184]	; (2568 <prvTimerTask+0x180>)
    24b0:	47a8      	blx	r5
    24b2:	2800      	cmp	r0, #0
    24b4:	d0f2      	beq.n	249c <prvTimerTask+0xb4>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    24b6:	2300      	movs	r3, #0
    24b8:	9300      	str	r3, [sp, #0]
    24ba:	0022      	movs	r2, r4
    24bc:	2100      	movs	r1, #0
    24be:	0030      	movs	r0, r6
    24c0:	4c2a      	ldr	r4, [pc, #168]	; (256c <prvTimerTask+0x184>)
    24c2:	47a0      	blx	r4
			configASSERT( xResult );
    24c4:	2800      	cmp	r0, #0
    24c6:	d1e9      	bne.n	249c <prvTimerTask+0xb4>
    24c8:	b672      	cpsid	i
    24ca:	e7fe      	b.n	24ca <prvTimerTask+0xe2>
					portYIELD_WITHIN_API();
    24cc:	4b28      	ldr	r3, [pc, #160]	; (2570 <prvTimerTask+0x188>)
    24ce:	4798      	blx	r3
    24d0:	e7bc      	b.n	244c <prvTimerTask+0x64>
			( void ) xTaskResumeAll();
    24d2:	4b22      	ldr	r3, [pc, #136]	; (255c <prvTimerTask+0x174>)
    24d4:	4798      	blx	r3
    24d6:	e7b9      	b.n	244c <prvTimerTask+0x64>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    24d8:	9b06      	ldr	r3, [sp, #24]
    24da:	69b2      	ldr	r2, [r6, #24]
    24dc:	4694      	mov	ip, r2
    24de:	4463      	add	r3, ip
    24e0:	0019      	movs	r1, r3
    24e2:	9b06      	ldr	r3, [sp, #24]
    24e4:	0002      	movs	r2, r0
    24e6:	0030      	movs	r0, r6
    24e8:	4c1f      	ldr	r4, [pc, #124]	; (2568 <prvTimerTask+0x180>)
    24ea:	47a0      	blx	r4
    24ec:	2800      	cmp	r0, #0
    24ee:	d0ae      	beq.n	244e <prvTimerTask+0x66>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    24f0:	0030      	movs	r0, r6
    24f2:	6a73      	ldr	r3, [r6, #36]	; 0x24
    24f4:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    24f6:	69f3      	ldr	r3, [r6, #28]
    24f8:	2b01      	cmp	r3, #1
    24fa:	d1a8      	bne.n	244e <prvTimerTask+0x66>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    24fc:	9b06      	ldr	r3, [sp, #24]
    24fe:	69b1      	ldr	r1, [r6, #24]
    2500:	468c      	mov	ip, r1
    2502:	4463      	add	r3, ip
    2504:	001a      	movs	r2, r3
    2506:	2300      	movs	r3, #0
    2508:	9300      	str	r3, [sp, #0]
    250a:	2100      	movs	r1, #0
    250c:	0030      	movs	r0, r6
    250e:	4c17      	ldr	r4, [pc, #92]	; (256c <prvTimerTask+0x184>)
    2510:	47a0      	blx	r4
							configASSERT( xResult );
    2512:	2800      	cmp	r0, #0
    2514:	d19b      	bne.n	244e <prvTimerTask+0x66>
    2516:	b672      	cpsid	i
    2518:	e7fe      	b.n	2518 <prvTimerTask+0x130>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    251a:	9906      	ldr	r1, [sp, #24]
    251c:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    251e:	2900      	cmp	r1, #0
    2520:	d006      	beq.n	2530 <prvTimerTask+0x148>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    2522:	1841      	adds	r1, r0, r1
    2524:	0003      	movs	r3, r0
    2526:	0002      	movs	r2, r0
    2528:	0030      	movs	r0, r6
    252a:	4c0f      	ldr	r4, [pc, #60]	; (2568 <prvTimerTask+0x180>)
    252c:	47a0      	blx	r4
    252e:	e78e      	b.n	244e <prvTimerTask+0x66>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    2530:	b672      	cpsid	i
    2532:	e7fe      	b.n	2532 <prvTimerTask+0x14a>
						vPortFree( pxTimer );
    2534:	0030      	movs	r0, r6
    2536:	4b0f      	ldr	r3, [pc, #60]	; (2574 <prvTimerTask+0x18c>)
    2538:	4798      	blx	r3
    253a:	e788      	b.n	244e <prvTimerTask+0x66>
    253c:	00002fe1 	.word	0x00002fe1
    2540:	00001217 	.word	0x00001217
    2544:	200031fc 	.word	0x200031fc
    2548:	00001c81 	.word	0x00001c81
    254c:	00002331 	.word	0x00002331
    2550:	20003200 	.word	0x20003200
    2554:	20003230 	.word	0x20003230
    2558:	00001891 	.word	0x00001891
    255c:	00001dbd 	.word	0x00001dbd
    2560:	0000173d 	.word	0x0000173d
    2564:	00003cf8 	.word	0x00003cf8
    2568:	000021d5 	.word	0x000021d5
    256c:	000022c5 	.word	0x000022c5
    2570:	00000d61 	.word	0x00000d61
    2574:	00000ead 	.word	0x00000ead

00002578 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    2578:	4b0c      	ldr	r3, [pc, #48]	; (25ac <cpu_irq_enter_critical+0x34>)
    257a:	681b      	ldr	r3, [r3, #0]
    257c:	2b00      	cmp	r3, #0
    257e:	d106      	bne.n	258e <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2580:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    2584:	2b00      	cmp	r3, #0
    2586:	d007      	beq.n	2598 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    2588:	2200      	movs	r2, #0
    258a:	4b09      	ldr	r3, [pc, #36]	; (25b0 <cpu_irq_enter_critical+0x38>)
    258c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    258e:	4a07      	ldr	r2, [pc, #28]	; (25ac <cpu_irq_enter_critical+0x34>)
    2590:	6813      	ldr	r3, [r2, #0]
    2592:	3301      	adds	r3, #1
    2594:	6013      	str	r3, [r2, #0]
}
    2596:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    2598:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    259a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    259e:	2200      	movs	r2, #0
    25a0:	4b04      	ldr	r3, [pc, #16]	; (25b4 <cpu_irq_enter_critical+0x3c>)
    25a2:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    25a4:	3201      	adds	r2, #1
    25a6:	4b02      	ldr	r3, [pc, #8]	; (25b0 <cpu_irq_enter_critical+0x38>)
    25a8:	701a      	strb	r2, [r3, #0]
    25aa:	e7f0      	b.n	258e <cpu_irq_enter_critical+0x16>
    25ac:	20003238 	.word	0x20003238
    25b0:	2000323c 	.word	0x2000323c
    25b4:	20000004 	.word	0x20000004

000025b8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    25b8:	4b08      	ldr	r3, [pc, #32]	; (25dc <cpu_irq_leave_critical+0x24>)
    25ba:	681a      	ldr	r2, [r3, #0]
    25bc:	3a01      	subs	r2, #1
    25be:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    25c0:	681b      	ldr	r3, [r3, #0]
    25c2:	2b00      	cmp	r3, #0
    25c4:	d109      	bne.n	25da <cpu_irq_leave_critical+0x22>
    25c6:	4b06      	ldr	r3, [pc, #24]	; (25e0 <cpu_irq_leave_critical+0x28>)
    25c8:	781b      	ldrb	r3, [r3, #0]
    25ca:	2b00      	cmp	r3, #0
    25cc:	d005      	beq.n	25da <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    25ce:	2201      	movs	r2, #1
    25d0:	4b04      	ldr	r3, [pc, #16]	; (25e4 <cpu_irq_leave_critical+0x2c>)
    25d2:	701a      	strb	r2, [r3, #0]
    25d4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    25d8:	b662      	cpsie	i
	}
}
    25da:	4770      	bx	lr
    25dc:	20003238 	.word	0x20003238
    25e0:	2000323c 	.word	0x2000323c
    25e4:	20000004 	.word	0x20000004

000025e8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    25e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    25ea:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    25ec:	ac01      	add	r4, sp, #4
    25ee:	2501      	movs	r5, #1
    25f0:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    25f2:	2700      	movs	r7, #0
    25f4:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    25f6:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    25f8:	0021      	movs	r1, r4
    25fa:	2017      	movs	r0, #23
    25fc:	4e06      	ldr	r6, [pc, #24]	; (2618 <system_board_init+0x30>)
    25fe:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2600:	2280      	movs	r2, #128	; 0x80
    2602:	0412      	lsls	r2, r2, #16
    2604:	4b05      	ldr	r3, [pc, #20]	; (261c <system_board_init+0x34>)
    2606:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    2608:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    260a:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    260c:	0021      	movs	r1, r4
    260e:	2037      	movs	r0, #55	; 0x37
    2610:	47b0      	blx	r6
}
    2612:	b003      	add	sp, #12
    2614:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2616:	46c0      	nop			; (mov r8, r8)
    2618:	00002621 	.word	0x00002621
    261c:	41004400 	.word	0x41004400

00002620 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    2620:	b500      	push	{lr}
    2622:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2624:	ab01      	add	r3, sp, #4
    2626:	2280      	movs	r2, #128	; 0x80
    2628:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    262a:	780a      	ldrb	r2, [r1, #0]
    262c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    262e:	784a      	ldrb	r2, [r1, #1]
    2630:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    2632:	788a      	ldrb	r2, [r1, #2]
    2634:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    2636:	0019      	movs	r1, r3
    2638:	4b01      	ldr	r3, [pc, #4]	; (2640 <port_pin_set_config+0x20>)
    263a:	4798      	blx	r3
}
    263c:	b003      	add	sp, #12
    263e:	bd00      	pop	{pc}
    2640:	00002d85 	.word	0x00002d85

00002644 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2644:	b510      	push	{r4, lr}
	switch (clock_source) {
    2646:	2808      	cmp	r0, #8
    2648:	d803      	bhi.n	2652 <system_clock_source_get_hz+0xe>
    264a:	0080      	lsls	r0, r0, #2
    264c:	4b1c      	ldr	r3, [pc, #112]	; (26c0 <system_clock_source_get_hz+0x7c>)
    264e:	581b      	ldr	r3, [r3, r0]
    2650:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    2652:	2000      	movs	r0, #0
    2654:	e032      	b.n	26bc <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    2656:	4b1b      	ldr	r3, [pc, #108]	; (26c4 <system_clock_source_get_hz+0x80>)
    2658:	6918      	ldr	r0, [r3, #16]
    265a:	e02f      	b.n	26bc <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    265c:	4b1a      	ldr	r3, [pc, #104]	; (26c8 <system_clock_source_get_hz+0x84>)
    265e:	6a1b      	ldr	r3, [r3, #32]
    2660:	059b      	lsls	r3, r3, #22
    2662:	0f9b      	lsrs	r3, r3, #30
    2664:	4819      	ldr	r0, [pc, #100]	; (26cc <system_clock_source_get_hz+0x88>)
    2666:	40d8      	lsrs	r0, r3
    2668:	e028      	b.n	26bc <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    266a:	4b16      	ldr	r3, [pc, #88]	; (26c4 <system_clock_source_get_hz+0x80>)
    266c:	6958      	ldr	r0, [r3, #20]
    266e:	e025      	b.n	26bc <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2670:	4b14      	ldr	r3, [pc, #80]	; (26c4 <system_clock_source_get_hz+0x80>)
    2672:	681b      	ldr	r3, [r3, #0]
			return 0;
    2674:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2676:	079b      	lsls	r3, r3, #30
    2678:	d520      	bpl.n	26bc <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    267a:	4913      	ldr	r1, [pc, #76]	; (26c8 <system_clock_source_get_hz+0x84>)
    267c:	2210      	movs	r2, #16
    267e:	68cb      	ldr	r3, [r1, #12]
    2680:	421a      	tst	r2, r3
    2682:	d0fc      	beq.n	267e <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    2684:	4b0f      	ldr	r3, [pc, #60]	; (26c4 <system_clock_source_get_hz+0x80>)
    2686:	681a      	ldr	r2, [r3, #0]
    2688:	2324      	movs	r3, #36	; 0x24
    268a:	4013      	ands	r3, r2
    268c:	2b04      	cmp	r3, #4
    268e:	d001      	beq.n	2694 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    2690:	480f      	ldr	r0, [pc, #60]	; (26d0 <system_clock_source_get_hz+0x8c>)
    2692:	e013      	b.n	26bc <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2694:	2000      	movs	r0, #0
    2696:	4b0f      	ldr	r3, [pc, #60]	; (26d4 <system_clock_source_get_hz+0x90>)
    2698:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    269a:	4b0a      	ldr	r3, [pc, #40]	; (26c4 <system_clock_source_get_hz+0x80>)
    269c:	689b      	ldr	r3, [r3, #8]
    269e:	041b      	lsls	r3, r3, #16
    26a0:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    26a2:	4358      	muls	r0, r3
    26a4:	e00a      	b.n	26bc <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    26a6:	2350      	movs	r3, #80	; 0x50
    26a8:	4a07      	ldr	r2, [pc, #28]	; (26c8 <system_clock_source_get_hz+0x84>)
    26aa:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    26ac:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    26ae:	075b      	lsls	r3, r3, #29
    26b0:	d504      	bpl.n	26bc <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    26b2:	4b04      	ldr	r3, [pc, #16]	; (26c4 <system_clock_source_get_hz+0x80>)
    26b4:	68d8      	ldr	r0, [r3, #12]
    26b6:	e001      	b.n	26bc <system_clock_source_get_hz+0x78>
		return 32768UL;
    26b8:	2080      	movs	r0, #128	; 0x80
    26ba:	0200      	lsls	r0, r0, #8
	}
}
    26bc:	bd10      	pop	{r4, pc}
    26be:	46c0      	nop			; (mov r8, r8)
    26c0:	00003d28 	.word	0x00003d28
    26c4:	20003240 	.word	0x20003240
    26c8:	40000800 	.word	0x40000800
    26cc:	007a1200 	.word	0x007a1200
    26d0:	02dc6c00 	.word	0x02dc6c00
    26d4:	00002ca9 	.word	0x00002ca9

000026d8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    26d8:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    26da:	490c      	ldr	r1, [pc, #48]	; (270c <system_clock_source_osc8m_set_config+0x34>)
    26dc:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    26de:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    26e0:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    26e2:	7840      	ldrb	r0, [r0, #1]
    26e4:	2201      	movs	r2, #1
    26e6:	4010      	ands	r0, r2
    26e8:	0180      	lsls	r0, r0, #6
    26ea:	2640      	movs	r6, #64	; 0x40
    26ec:	43b3      	bics	r3, r6
    26ee:	4303      	orrs	r3, r0
    26f0:	402a      	ands	r2, r5
    26f2:	01d2      	lsls	r2, r2, #7
    26f4:	2080      	movs	r0, #128	; 0x80
    26f6:	4383      	bics	r3, r0
    26f8:	4313      	orrs	r3, r2
    26fa:	2203      	movs	r2, #3
    26fc:	4022      	ands	r2, r4
    26fe:	0212      	lsls	r2, r2, #8
    2700:	4803      	ldr	r0, [pc, #12]	; (2710 <system_clock_source_osc8m_set_config+0x38>)
    2702:	4003      	ands	r3, r0
    2704:	4313      	orrs	r3, r2
    2706:	620b      	str	r3, [r1, #32]
}
    2708:	bd70      	pop	{r4, r5, r6, pc}
    270a:	46c0      	nop			; (mov r8, r8)
    270c:	40000800 	.word	0x40000800
    2710:	fffffcff 	.word	0xfffffcff

00002714 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    2714:	b5f0      	push	{r4, r5, r6, r7, lr}
    2716:	46de      	mov	lr, fp
    2718:	4657      	mov	r7, sl
    271a:	464e      	mov	r6, r9
    271c:	4645      	mov	r5, r8
    271e:	b5e0      	push	{r5, r6, r7, lr}
    2720:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    2722:	4b26      	ldr	r3, [pc, #152]	; (27bc <system_clock_source_xosc32k_set_config+0xa8>)
    2724:	469b      	mov	fp, r3
    2726:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    2728:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    272a:	7800      	ldrb	r0, [r0, #0]
    272c:	4242      	negs	r2, r0
    272e:	4142      	adcs	r2, r0
    2730:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    2732:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    2734:	78ca      	ldrb	r2, [r1, #3]
    2736:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    2738:	790a      	ldrb	r2, [r1, #4]
    273a:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    273c:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    273e:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    2740:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    2742:	688a      	ldr	r2, [r1, #8]
    2744:	491e      	ldr	r1, [pc, #120]	; (27c0 <system_clock_source_xosc32k_set_config+0xac>)
    2746:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    2748:	2101      	movs	r1, #1
    274a:	464a      	mov	r2, r9
    274c:	0092      	lsls	r2, r2, #2
    274e:	4691      	mov	r9, r2
    2750:	2204      	movs	r2, #4
    2752:	4393      	bics	r3, r2
    2754:	464a      	mov	r2, r9
    2756:	4313      	orrs	r3, r2
    2758:	4642      	mov	r2, r8
    275a:	400a      	ands	r2, r1
    275c:	00d2      	lsls	r2, r2, #3
    275e:	4690      	mov	r8, r2
    2760:	2208      	movs	r2, #8
    2762:	4393      	bics	r3, r2
    2764:	4642      	mov	r2, r8
    2766:	4313      	orrs	r3, r2
    2768:	4662      	mov	r2, ip
    276a:	400a      	ands	r2, r1
    276c:	0112      	lsls	r2, r2, #4
    276e:	4694      	mov	ip, r2
    2770:	2210      	movs	r2, #16
    2772:	4393      	bics	r3, r2
    2774:	4662      	mov	r2, ip
    2776:	4313      	orrs	r3, r2
    2778:	4008      	ands	r0, r1
    277a:	0140      	lsls	r0, r0, #5
    277c:	2220      	movs	r2, #32
    277e:	4393      	bics	r3, r2
    2780:	4303      	orrs	r3, r0
    2782:	400f      	ands	r7, r1
    2784:	01bf      	lsls	r7, r7, #6
    2786:	2040      	movs	r0, #64	; 0x40
    2788:	4383      	bics	r3, r0
    278a:	433b      	orrs	r3, r7
    278c:	400e      	ands	r6, r1
    278e:	01f6      	lsls	r6, r6, #7
    2790:	3040      	adds	r0, #64	; 0x40
    2792:	4383      	bics	r3, r0
    2794:	4333      	orrs	r3, r6
    2796:	3879      	subs	r0, #121	; 0x79
    2798:	4005      	ands	r5, r0
    279a:	022d      	lsls	r5, r5, #8
    279c:	4809      	ldr	r0, [pc, #36]	; (27c4 <system_clock_source_xosc32k_set_config+0xb0>)
    279e:	4003      	ands	r3, r0
    27a0:	432b      	orrs	r3, r5
    27a2:	4021      	ands	r1, r4
    27a4:	0309      	lsls	r1, r1, #12
    27a6:	4808      	ldr	r0, [pc, #32]	; (27c8 <system_clock_source_xosc32k_set_config+0xb4>)
    27a8:	4003      	ands	r3, r0
    27aa:	430b      	orrs	r3, r1
    27ac:	465a      	mov	r2, fp
    27ae:	8293      	strh	r3, [r2, #20]
}
    27b0:	bc3c      	pop	{r2, r3, r4, r5}
    27b2:	4690      	mov	r8, r2
    27b4:	4699      	mov	r9, r3
    27b6:	46a2      	mov	sl, r4
    27b8:	46ab      	mov	fp, r5
    27ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27bc:	40000800 	.word	0x40000800
    27c0:	20003240 	.word	0x20003240
    27c4:	fffff8ff 	.word	0xfffff8ff
    27c8:	ffffefff 	.word	0xffffefff

000027cc <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    27cc:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    27ce:	7a03      	ldrb	r3, [r0, #8]
    27d0:	069b      	lsls	r3, r3, #26
    27d2:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    27d4:	8942      	ldrh	r2, [r0, #10]
    27d6:	0592      	lsls	r2, r2, #22
    27d8:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    27da:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    27dc:	4918      	ldr	r1, [pc, #96]	; (2840 <system_clock_source_dfll_set_config+0x74>)
    27de:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    27e0:	7983      	ldrb	r3, [r0, #6]
    27e2:	79c2      	ldrb	r2, [r0, #7]
    27e4:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    27e6:	8842      	ldrh	r2, [r0, #2]
    27e8:	8884      	ldrh	r4, [r0, #4]
    27ea:	4322      	orrs	r2, r4
    27ec:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    27ee:	7842      	ldrb	r2, [r0, #1]
    27f0:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    27f2:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    27f4:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    27f6:	7803      	ldrb	r3, [r0, #0]
    27f8:	2b04      	cmp	r3, #4
    27fa:	d011      	beq.n	2820 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    27fc:	2b20      	cmp	r3, #32
    27fe:	d10e      	bne.n	281e <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2800:	7b03      	ldrb	r3, [r0, #12]
    2802:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2804:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2806:	4313      	orrs	r3, r2
    2808:	89c2      	ldrh	r2, [r0, #14]
    280a:	0412      	lsls	r2, r2, #16
    280c:	490d      	ldr	r1, [pc, #52]	; (2844 <system_clock_source_dfll_set_config+0x78>)
    280e:	400a      	ands	r2, r1
    2810:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2812:	4a0b      	ldr	r2, [pc, #44]	; (2840 <system_clock_source_dfll_set_config+0x74>)
    2814:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    2816:	6811      	ldr	r1, [r2, #0]
    2818:	4b0b      	ldr	r3, [pc, #44]	; (2848 <system_clock_source_dfll_set_config+0x7c>)
    281a:	430b      	orrs	r3, r1
    281c:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    281e:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2820:	7b03      	ldrb	r3, [r0, #12]
    2822:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2824:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2826:	4313      	orrs	r3, r2
    2828:	89c2      	ldrh	r2, [r0, #14]
    282a:	0412      	lsls	r2, r2, #16
    282c:	4905      	ldr	r1, [pc, #20]	; (2844 <system_clock_source_dfll_set_config+0x78>)
    282e:	400a      	ands	r2, r1
    2830:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2832:	4a03      	ldr	r2, [pc, #12]	; (2840 <system_clock_source_dfll_set_config+0x74>)
    2834:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    2836:	6813      	ldr	r3, [r2, #0]
    2838:	2104      	movs	r1, #4
    283a:	430b      	orrs	r3, r1
    283c:	6013      	str	r3, [r2, #0]
    283e:	e7ee      	b.n	281e <system_clock_source_dfll_set_config+0x52>
    2840:	20003240 	.word	0x20003240
    2844:	03ff0000 	.word	0x03ff0000
    2848:	00000424 	.word	0x00000424

0000284c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    284c:	2808      	cmp	r0, #8
    284e:	d803      	bhi.n	2858 <system_clock_source_enable+0xc>
    2850:	0080      	lsls	r0, r0, #2
    2852:	4b25      	ldr	r3, [pc, #148]	; (28e8 <system_clock_source_enable+0x9c>)
    2854:	581b      	ldr	r3, [r3, r0]
    2856:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2858:	2017      	movs	r0, #23
    285a:	e044      	b.n	28e6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    285c:	4a23      	ldr	r2, [pc, #140]	; (28ec <system_clock_source_enable+0xa0>)
    285e:	6a13      	ldr	r3, [r2, #32]
    2860:	2102      	movs	r1, #2
    2862:	430b      	orrs	r3, r1
    2864:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    2866:	2000      	movs	r0, #0
    2868:	e03d      	b.n	28e6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    286a:	4a20      	ldr	r2, [pc, #128]	; (28ec <system_clock_source_enable+0xa0>)
    286c:	6993      	ldr	r3, [r2, #24]
    286e:	2102      	movs	r1, #2
    2870:	430b      	orrs	r3, r1
    2872:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2874:	2000      	movs	r0, #0
		break;
    2876:	e036      	b.n	28e6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2878:	4a1c      	ldr	r2, [pc, #112]	; (28ec <system_clock_source_enable+0xa0>)
    287a:	8a13      	ldrh	r3, [r2, #16]
    287c:	2102      	movs	r1, #2
    287e:	430b      	orrs	r3, r1
    2880:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2882:	2000      	movs	r0, #0
		break;
    2884:	e02f      	b.n	28e6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    2886:	4a19      	ldr	r2, [pc, #100]	; (28ec <system_clock_source_enable+0xa0>)
    2888:	8a93      	ldrh	r3, [r2, #20]
    288a:	2102      	movs	r1, #2
    288c:	430b      	orrs	r3, r1
    288e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2890:	2000      	movs	r0, #0
		break;
    2892:	e028      	b.n	28e6 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2894:	4916      	ldr	r1, [pc, #88]	; (28f0 <system_clock_source_enable+0xa4>)
    2896:	680b      	ldr	r3, [r1, #0]
    2898:	2202      	movs	r2, #2
    289a:	4313      	orrs	r3, r2
    289c:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    289e:	4b13      	ldr	r3, [pc, #76]	; (28ec <system_clock_source_enable+0xa0>)
    28a0:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    28a2:	0019      	movs	r1, r3
    28a4:	320e      	adds	r2, #14
    28a6:	68cb      	ldr	r3, [r1, #12]
    28a8:	421a      	tst	r2, r3
    28aa:	d0fc      	beq.n	28a6 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    28ac:	4a10      	ldr	r2, [pc, #64]	; (28f0 <system_clock_source_enable+0xa4>)
    28ae:	6891      	ldr	r1, [r2, #8]
    28b0:	4b0e      	ldr	r3, [pc, #56]	; (28ec <system_clock_source_enable+0xa0>)
    28b2:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    28b4:	6852      	ldr	r2, [r2, #4]
    28b6:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    28b8:	2200      	movs	r2, #0
    28ba:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    28bc:	0019      	movs	r1, r3
    28be:	3210      	adds	r2, #16
    28c0:	68cb      	ldr	r3, [r1, #12]
    28c2:	421a      	tst	r2, r3
    28c4:	d0fc      	beq.n	28c0 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    28c6:	4b0a      	ldr	r3, [pc, #40]	; (28f0 <system_clock_source_enable+0xa4>)
    28c8:	681b      	ldr	r3, [r3, #0]
    28ca:	b29b      	uxth	r3, r3
    28cc:	4a07      	ldr	r2, [pc, #28]	; (28ec <system_clock_source_enable+0xa0>)
    28ce:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    28d0:	2000      	movs	r0, #0
    28d2:	e008      	b.n	28e6 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    28d4:	4905      	ldr	r1, [pc, #20]	; (28ec <system_clock_source_enable+0xa0>)
    28d6:	2244      	movs	r2, #68	; 0x44
    28d8:	5c8b      	ldrb	r3, [r1, r2]
    28da:	2002      	movs	r0, #2
    28dc:	4303      	orrs	r3, r0
    28de:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    28e0:	2000      	movs	r0, #0
		break;
    28e2:	e000      	b.n	28e6 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    28e4:	2000      	movs	r0, #0
}
    28e6:	4770      	bx	lr
    28e8:	00003d4c 	.word	0x00003d4c
    28ec:	40000800 	.word	0x40000800
    28f0:	20003240 	.word	0x20003240

000028f4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    28f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    28f6:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    28f8:	22c2      	movs	r2, #194	; 0xc2
    28fa:	00d2      	lsls	r2, r2, #3
    28fc:	4b47      	ldr	r3, [pc, #284]	; (2a1c <system_clock_init+0x128>)
    28fe:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2900:	4a47      	ldr	r2, [pc, #284]	; (2a20 <system_clock_init+0x12c>)
    2902:	6853      	ldr	r3, [r2, #4]
    2904:	211e      	movs	r1, #30
    2906:	438b      	bics	r3, r1
    2908:	391a      	subs	r1, #26
    290a:	430b      	orrs	r3, r1
    290c:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    290e:	2202      	movs	r2, #2
    2910:	ab01      	add	r3, sp, #4
    2912:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2914:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2916:	4d43      	ldr	r5, [pc, #268]	; (2a24 <system_clock_init+0x130>)
    2918:	b2e0      	uxtb	r0, r4
    291a:	a901      	add	r1, sp, #4
    291c:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    291e:	3401      	adds	r4, #1
    2920:	2c25      	cmp	r4, #37	; 0x25
    2922:	d1f9      	bne.n	2918 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    2924:	a80a      	add	r0, sp, #40	; 0x28
    2926:	2300      	movs	r3, #0
    2928:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    292a:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    292c:	2280      	movs	r2, #128	; 0x80
    292e:	0212      	lsls	r2, r2, #8
    2930:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    2932:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    2934:	2201      	movs	r2, #1
    2936:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    2938:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    293a:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    293c:	3202      	adds	r2, #2
    293e:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    2940:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    2942:	4b39      	ldr	r3, [pc, #228]	; (2a28 <system_clock_init+0x134>)
    2944:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    2946:	2005      	movs	r0, #5
    2948:	4b38      	ldr	r3, [pc, #224]	; (2a2c <system_clock_init+0x138>)
    294a:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    294c:	4933      	ldr	r1, [pc, #204]	; (2a1c <system_clock_init+0x128>)
    294e:	2202      	movs	r2, #2
    2950:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    2952:	421a      	tst	r2, r3
    2954:	d0fc      	beq.n	2950 <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    2956:	4a31      	ldr	r2, [pc, #196]	; (2a1c <system_clock_init+0x128>)
    2958:	8a93      	ldrh	r3, [r2, #20]
    295a:	2180      	movs	r1, #128	; 0x80
    295c:	430b      	orrs	r3, r1
    295e:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    2960:	ab05      	add	r3, sp, #20
    2962:	2100      	movs	r1, #0
    2964:	2200      	movs	r2, #0
    2966:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    2968:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    296a:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    296c:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    296e:	313f      	adds	r1, #63	; 0x3f
    2970:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    2972:	393b      	subs	r1, #59	; 0x3b
    2974:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    2976:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    2978:	4b2d      	ldr	r3, [pc, #180]	; (2a30 <system_clock_init+0x13c>)
    297a:	681b      	ldr	r3, [r3, #0]
    297c:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    297e:	2b3f      	cmp	r3, #63	; 0x3f
    2980:	d04a      	beq.n	2a18 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    2982:	a805      	add	r0, sp, #20
    2984:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    2986:	4b2b      	ldr	r3, [pc, #172]	; (2a34 <system_clock_init+0x140>)
    2988:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    298a:	2307      	movs	r3, #7
    298c:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    298e:	3338      	adds	r3, #56	; 0x38
    2990:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    2992:	4b29      	ldr	r3, [pc, #164]	; (2a38 <system_clock_init+0x144>)
    2994:	4798      	blx	r3
	config->run_in_standby  = false;
    2996:	a804      	add	r0, sp, #16
    2998:	2500      	movs	r5, #0
    299a:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    299c:	2601      	movs	r6, #1
    299e:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    29a0:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    29a2:	4b26      	ldr	r3, [pc, #152]	; (2a3c <system_clock_init+0x148>)
    29a4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    29a6:	2006      	movs	r0, #6
    29a8:	4f20      	ldr	r7, [pc, #128]	; (2a2c <system_clock_init+0x138>)
    29aa:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    29ac:	4b24      	ldr	r3, [pc, #144]	; (2a40 <system_clock_init+0x14c>)
    29ae:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    29b0:	ac01      	add	r4, sp, #4
    29b2:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    29b4:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    29b6:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    29b8:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    29ba:	2305      	movs	r3, #5
    29bc:	7023      	strb	r3, [r4, #0]
    29be:	0021      	movs	r1, r4
    29c0:	2001      	movs	r0, #1
    29c2:	4b20      	ldr	r3, [pc, #128]	; (2a44 <system_clock_init+0x150>)
    29c4:	4798      	blx	r3
    29c6:	2001      	movs	r0, #1
    29c8:	4b1f      	ldr	r3, [pc, #124]	; (2a48 <system_clock_init+0x154>)
    29ca:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    29cc:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    29ce:	0021      	movs	r1, r4
    29d0:	2000      	movs	r0, #0
    29d2:	4b14      	ldr	r3, [pc, #80]	; (2a24 <system_clock_init+0x130>)
    29d4:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    29d6:	2000      	movs	r0, #0
    29d8:	4b1c      	ldr	r3, [pc, #112]	; (2a4c <system_clock_init+0x158>)
    29da:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    29dc:	2007      	movs	r0, #7
    29de:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    29e0:	490e      	ldr	r1, [pc, #56]	; (2a1c <system_clock_init+0x128>)
    29e2:	22d0      	movs	r2, #208	; 0xd0
    29e4:	68cb      	ldr	r3, [r1, #12]
    29e6:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    29e8:	2bd0      	cmp	r3, #208	; 0xd0
    29ea:	d1fb      	bne.n	29e4 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    29ec:	4a18      	ldr	r2, [pc, #96]	; (2a50 <system_clock_init+0x15c>)
    29ee:	2300      	movs	r3, #0
    29f0:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    29f2:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    29f4:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    29f6:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    29f8:	a901      	add	r1, sp, #4
    29fa:	2201      	movs	r2, #1
    29fc:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    29fe:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    2a00:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    2a02:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2a04:	3307      	adds	r3, #7
    2a06:	700b      	strb	r3, [r1, #0]
    2a08:	2000      	movs	r0, #0
    2a0a:	4b0e      	ldr	r3, [pc, #56]	; (2a44 <system_clock_init+0x150>)
    2a0c:	4798      	blx	r3
    2a0e:	2000      	movs	r0, #0
    2a10:	4b0d      	ldr	r3, [pc, #52]	; (2a48 <system_clock_init+0x154>)
    2a12:	4798      	blx	r3
#endif
}
    2a14:	b00f      	add	sp, #60	; 0x3c
    2a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    2a18:	3b20      	subs	r3, #32
    2a1a:	e7b2      	b.n	2982 <system_clock_init+0x8e>
    2a1c:	40000800 	.word	0x40000800
    2a20:	41004000 	.word	0x41004000
    2a24:	00002c8d 	.word	0x00002c8d
    2a28:	00002715 	.word	0x00002715
    2a2c:	0000284d 	.word	0x0000284d
    2a30:	00806024 	.word	0x00806024
    2a34:	000005b9 	.word	0x000005b9
    2a38:	000027cd 	.word	0x000027cd
    2a3c:	000026d9 	.word	0x000026d9
    2a40:	00002a55 	.word	0x00002a55
    2a44:	00002a79 	.word	0x00002a79
    2a48:	00002b31 	.word	0x00002b31
    2a4c:	00002c01 	.word	0x00002c01
    2a50:	40000400 	.word	0x40000400

00002a54 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    2a54:	4a06      	ldr	r2, [pc, #24]	; (2a70 <system_gclk_init+0x1c>)
    2a56:	6993      	ldr	r3, [r2, #24]
    2a58:	2108      	movs	r1, #8
    2a5a:	430b      	orrs	r3, r1
    2a5c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    2a5e:	2201      	movs	r2, #1
    2a60:	4b04      	ldr	r3, [pc, #16]	; (2a74 <system_gclk_init+0x20>)
    2a62:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2a64:	0019      	movs	r1, r3
    2a66:	780b      	ldrb	r3, [r1, #0]
    2a68:	4213      	tst	r3, r2
    2a6a:	d1fc      	bne.n	2a66 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2a6c:	4770      	bx	lr
    2a6e:	46c0      	nop			; (mov r8, r8)
    2a70:	40000400 	.word	0x40000400
    2a74:	40000c00 	.word	0x40000c00

00002a78 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2a78:	b570      	push	{r4, r5, r6, lr}
    2a7a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2a7c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2a7e:	780d      	ldrb	r5, [r1, #0]
    2a80:	022d      	lsls	r5, r5, #8
    2a82:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2a84:	784b      	ldrb	r3, [r1, #1]
    2a86:	2b00      	cmp	r3, #0
    2a88:	d002      	beq.n	2a90 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2a8a:	2380      	movs	r3, #128	; 0x80
    2a8c:	02db      	lsls	r3, r3, #11
    2a8e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2a90:	7a4b      	ldrb	r3, [r1, #9]
    2a92:	2b00      	cmp	r3, #0
    2a94:	d002      	beq.n	2a9c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2a96:	2380      	movs	r3, #128	; 0x80
    2a98:	031b      	lsls	r3, r3, #12
    2a9a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2a9c:	6848      	ldr	r0, [r1, #4]
    2a9e:	2801      	cmp	r0, #1
    2aa0:	d910      	bls.n	2ac4 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2aa2:	1e43      	subs	r3, r0, #1
    2aa4:	4218      	tst	r0, r3
    2aa6:	d134      	bne.n	2b12 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2aa8:	2802      	cmp	r0, #2
    2aaa:	d930      	bls.n	2b0e <system_gclk_gen_set_config+0x96>
    2aac:	2302      	movs	r3, #2
    2aae:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2ab0:	3201      	adds	r2, #1
						mask <<= 1) {
    2ab2:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    2ab4:	4298      	cmp	r0, r3
    2ab6:	d8fb      	bhi.n	2ab0 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2ab8:	0212      	lsls	r2, r2, #8
    2aba:	4332      	orrs	r2, r6
    2abc:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2abe:	2380      	movs	r3, #128	; 0x80
    2ac0:	035b      	lsls	r3, r3, #13
    2ac2:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2ac4:	7a0b      	ldrb	r3, [r1, #8]
    2ac6:	2b00      	cmp	r3, #0
    2ac8:	d002      	beq.n	2ad0 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2aca:	2380      	movs	r3, #128	; 0x80
    2acc:	039b      	lsls	r3, r3, #14
    2ace:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2ad0:	4a13      	ldr	r2, [pc, #76]	; (2b20 <system_gclk_gen_set_config+0xa8>)
    2ad2:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    2ad4:	b25b      	sxtb	r3, r3
    2ad6:	2b00      	cmp	r3, #0
    2ad8:	dbfb      	blt.n	2ad2 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    2ada:	4b12      	ldr	r3, [pc, #72]	; (2b24 <system_gclk_gen_set_config+0xac>)
    2adc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2ade:	4b12      	ldr	r3, [pc, #72]	; (2b28 <system_gclk_gen_set_config+0xb0>)
    2ae0:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2ae2:	4a0f      	ldr	r2, [pc, #60]	; (2b20 <system_gclk_gen_set_config+0xa8>)
    2ae4:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    2ae6:	b25b      	sxtb	r3, r3
    2ae8:	2b00      	cmp	r3, #0
    2aea:	dbfb      	blt.n	2ae4 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2aec:	4b0c      	ldr	r3, [pc, #48]	; (2b20 <system_gclk_gen_set_config+0xa8>)
    2aee:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2af0:	001a      	movs	r2, r3
    2af2:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    2af4:	b25b      	sxtb	r3, r3
    2af6:	2b00      	cmp	r3, #0
    2af8:	dbfb      	blt.n	2af2 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    2afa:	4a09      	ldr	r2, [pc, #36]	; (2b20 <system_gclk_gen_set_config+0xa8>)
    2afc:	6853      	ldr	r3, [r2, #4]
    2afe:	2180      	movs	r1, #128	; 0x80
    2b00:	0249      	lsls	r1, r1, #9
    2b02:	400b      	ands	r3, r1
    2b04:	431d      	orrs	r5, r3
    2b06:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    2b08:	4b08      	ldr	r3, [pc, #32]	; (2b2c <system_gclk_gen_set_config+0xb4>)
    2b0a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2b0c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    2b0e:	2200      	movs	r2, #0
    2b10:	e7d2      	b.n	2ab8 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    2b12:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    2b14:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2b16:	2380      	movs	r3, #128	; 0x80
    2b18:	029b      	lsls	r3, r3, #10
    2b1a:	431d      	orrs	r5, r3
    2b1c:	e7d2      	b.n	2ac4 <system_gclk_gen_set_config+0x4c>
    2b1e:	46c0      	nop			; (mov r8, r8)
    2b20:	40000c00 	.word	0x40000c00
    2b24:	00002579 	.word	0x00002579
    2b28:	40000c08 	.word	0x40000c08
    2b2c:	000025b9 	.word	0x000025b9

00002b30 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2b30:	b510      	push	{r4, lr}
    2b32:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2b34:	4a0b      	ldr	r2, [pc, #44]	; (2b64 <system_gclk_gen_enable+0x34>)
    2b36:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2b38:	b25b      	sxtb	r3, r3
    2b3a:	2b00      	cmp	r3, #0
    2b3c:	dbfb      	blt.n	2b36 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    2b3e:	4b0a      	ldr	r3, [pc, #40]	; (2b68 <system_gclk_gen_enable+0x38>)
    2b40:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2b42:	4b0a      	ldr	r3, [pc, #40]	; (2b6c <system_gclk_gen_enable+0x3c>)
    2b44:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2b46:	4a07      	ldr	r2, [pc, #28]	; (2b64 <system_gclk_gen_enable+0x34>)
    2b48:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2b4a:	b25b      	sxtb	r3, r3
    2b4c:	2b00      	cmp	r3, #0
    2b4e:	dbfb      	blt.n	2b48 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2b50:	4a04      	ldr	r2, [pc, #16]	; (2b64 <system_gclk_gen_enable+0x34>)
    2b52:	6851      	ldr	r1, [r2, #4]
    2b54:	2380      	movs	r3, #128	; 0x80
    2b56:	025b      	lsls	r3, r3, #9
    2b58:	430b      	orrs	r3, r1
    2b5a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    2b5c:	4b04      	ldr	r3, [pc, #16]	; (2b70 <system_gclk_gen_enable+0x40>)
    2b5e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2b60:	bd10      	pop	{r4, pc}
    2b62:	46c0      	nop			; (mov r8, r8)
    2b64:	40000c00 	.word	0x40000c00
    2b68:	00002579 	.word	0x00002579
    2b6c:	40000c04 	.word	0x40000c04
    2b70:	000025b9 	.word	0x000025b9

00002b74 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2b74:	b570      	push	{r4, r5, r6, lr}
    2b76:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2b78:	4a1a      	ldr	r2, [pc, #104]	; (2be4 <system_gclk_gen_get_hz+0x70>)
    2b7a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2b7c:	b25b      	sxtb	r3, r3
    2b7e:	2b00      	cmp	r3, #0
    2b80:	dbfb      	blt.n	2b7a <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    2b82:	4b19      	ldr	r3, [pc, #100]	; (2be8 <system_gclk_gen_get_hz+0x74>)
    2b84:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2b86:	4b19      	ldr	r3, [pc, #100]	; (2bec <system_gclk_gen_get_hz+0x78>)
    2b88:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2b8a:	4a16      	ldr	r2, [pc, #88]	; (2be4 <system_gclk_gen_get_hz+0x70>)
    2b8c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2b8e:	b25b      	sxtb	r3, r3
    2b90:	2b00      	cmp	r3, #0
    2b92:	dbfb      	blt.n	2b8c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2b94:	4e13      	ldr	r6, [pc, #76]	; (2be4 <system_gclk_gen_get_hz+0x70>)
    2b96:	6870      	ldr	r0, [r6, #4]
    2b98:	04c0      	lsls	r0, r0, #19
    2b9a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2b9c:	4b14      	ldr	r3, [pc, #80]	; (2bf0 <system_gclk_gen_get_hz+0x7c>)
    2b9e:	4798      	blx	r3
    2ba0:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2ba2:	4b12      	ldr	r3, [pc, #72]	; (2bec <system_gclk_gen_get_hz+0x78>)
    2ba4:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    2ba6:	6876      	ldr	r6, [r6, #4]
    2ba8:	02f6      	lsls	r6, r6, #11
    2baa:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2bac:	4b11      	ldr	r3, [pc, #68]	; (2bf4 <system_gclk_gen_get_hz+0x80>)
    2bae:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2bb0:	4a0c      	ldr	r2, [pc, #48]	; (2be4 <system_gclk_gen_get_hz+0x70>)
    2bb2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2bb4:	b25b      	sxtb	r3, r3
    2bb6:	2b00      	cmp	r3, #0
    2bb8:	dbfb      	blt.n	2bb2 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    2bba:	4b0a      	ldr	r3, [pc, #40]	; (2be4 <system_gclk_gen_get_hz+0x70>)
    2bbc:	689c      	ldr	r4, [r3, #8]
    2bbe:	0224      	lsls	r4, r4, #8
    2bc0:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    2bc2:	4b0d      	ldr	r3, [pc, #52]	; (2bf8 <system_gclk_gen_get_hz+0x84>)
    2bc4:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2bc6:	2e00      	cmp	r6, #0
    2bc8:	d107      	bne.n	2bda <system_gclk_gen_get_hz+0x66>
    2bca:	2c01      	cmp	r4, #1
    2bcc:	d907      	bls.n	2bde <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    2bce:	0021      	movs	r1, r4
    2bd0:	0028      	movs	r0, r5
    2bd2:	4b0a      	ldr	r3, [pc, #40]	; (2bfc <system_gclk_gen_get_hz+0x88>)
    2bd4:	4798      	blx	r3
    2bd6:	0005      	movs	r5, r0
    2bd8:	e001      	b.n	2bde <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    2bda:	3401      	adds	r4, #1
    2bdc:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    2bde:	0028      	movs	r0, r5
    2be0:	bd70      	pop	{r4, r5, r6, pc}
    2be2:	46c0      	nop			; (mov r8, r8)
    2be4:	40000c00 	.word	0x40000c00
    2be8:	00002579 	.word	0x00002579
    2bec:	40000c04 	.word	0x40000c04
    2bf0:	00002645 	.word	0x00002645
    2bf4:	40000c08 	.word	0x40000c08
    2bf8:	000025b9 	.word	0x000025b9
    2bfc:	00002fe9 	.word	0x00002fe9

00002c00 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2c00:	b510      	push	{r4, lr}
    2c02:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2c04:	4b06      	ldr	r3, [pc, #24]	; (2c20 <system_gclk_chan_enable+0x20>)
    2c06:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2c08:	4b06      	ldr	r3, [pc, #24]	; (2c24 <system_gclk_chan_enable+0x24>)
    2c0a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2c0c:	4a06      	ldr	r2, [pc, #24]	; (2c28 <system_gclk_chan_enable+0x28>)
    2c0e:	8853      	ldrh	r3, [r2, #2]
    2c10:	2180      	movs	r1, #128	; 0x80
    2c12:	01c9      	lsls	r1, r1, #7
    2c14:	430b      	orrs	r3, r1
    2c16:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    2c18:	4b04      	ldr	r3, [pc, #16]	; (2c2c <system_gclk_chan_enable+0x2c>)
    2c1a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2c1c:	bd10      	pop	{r4, pc}
    2c1e:	46c0      	nop			; (mov r8, r8)
    2c20:	00002579 	.word	0x00002579
    2c24:	40000c02 	.word	0x40000c02
    2c28:	40000c00 	.word	0x40000c00
    2c2c:	000025b9 	.word	0x000025b9

00002c30 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2c30:	b510      	push	{r4, lr}
    2c32:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2c34:	4b0f      	ldr	r3, [pc, #60]	; (2c74 <system_gclk_chan_disable+0x44>)
    2c36:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2c38:	4b0f      	ldr	r3, [pc, #60]	; (2c78 <system_gclk_chan_disable+0x48>)
    2c3a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2c3c:	4a0f      	ldr	r2, [pc, #60]	; (2c7c <system_gclk_chan_disable+0x4c>)
    2c3e:	8853      	ldrh	r3, [r2, #2]
    2c40:	051b      	lsls	r3, r3, #20
    2c42:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2c44:	8853      	ldrh	r3, [r2, #2]
    2c46:	490e      	ldr	r1, [pc, #56]	; (2c80 <system_gclk_chan_disable+0x50>)
    2c48:	400b      	ands	r3, r1
    2c4a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2c4c:	8853      	ldrh	r3, [r2, #2]
    2c4e:	490d      	ldr	r1, [pc, #52]	; (2c84 <system_gclk_chan_disable+0x54>)
    2c50:	400b      	ands	r3, r1
    2c52:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2c54:	0011      	movs	r1, r2
    2c56:	2280      	movs	r2, #128	; 0x80
    2c58:	01d2      	lsls	r2, r2, #7
    2c5a:	884b      	ldrh	r3, [r1, #2]
    2c5c:	4213      	tst	r3, r2
    2c5e:	d1fc      	bne.n	2c5a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2c60:	4906      	ldr	r1, [pc, #24]	; (2c7c <system_gclk_chan_disable+0x4c>)
    2c62:	884a      	ldrh	r2, [r1, #2]
    2c64:	0203      	lsls	r3, r0, #8
    2c66:	4806      	ldr	r0, [pc, #24]	; (2c80 <system_gclk_chan_disable+0x50>)
    2c68:	4002      	ands	r2, r0
    2c6a:	4313      	orrs	r3, r2
    2c6c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    2c6e:	4b06      	ldr	r3, [pc, #24]	; (2c88 <system_gclk_chan_disable+0x58>)
    2c70:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2c72:	bd10      	pop	{r4, pc}
    2c74:	00002579 	.word	0x00002579
    2c78:	40000c02 	.word	0x40000c02
    2c7c:	40000c00 	.word	0x40000c00
    2c80:	fffff0ff 	.word	0xfffff0ff
    2c84:	ffffbfff 	.word	0xffffbfff
    2c88:	000025b9 	.word	0x000025b9

00002c8c <system_gclk_chan_set_config>:
{
    2c8c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    2c8e:	780c      	ldrb	r4, [r1, #0]
    2c90:	0224      	lsls	r4, r4, #8
    2c92:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    2c94:	4b02      	ldr	r3, [pc, #8]	; (2ca0 <system_gclk_chan_set_config+0x14>)
    2c96:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2c98:	b2a4      	uxth	r4, r4
    2c9a:	4b02      	ldr	r3, [pc, #8]	; (2ca4 <system_gclk_chan_set_config+0x18>)
    2c9c:	805c      	strh	r4, [r3, #2]
}
    2c9e:	bd10      	pop	{r4, pc}
    2ca0:	00002c31 	.word	0x00002c31
    2ca4:	40000c00 	.word	0x40000c00

00002ca8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2ca8:	b510      	push	{r4, lr}
    2caa:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2cac:	4b06      	ldr	r3, [pc, #24]	; (2cc8 <system_gclk_chan_get_hz+0x20>)
    2cae:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2cb0:	4b06      	ldr	r3, [pc, #24]	; (2ccc <system_gclk_chan_get_hz+0x24>)
    2cb2:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2cb4:	4b06      	ldr	r3, [pc, #24]	; (2cd0 <system_gclk_chan_get_hz+0x28>)
    2cb6:	885c      	ldrh	r4, [r3, #2]
    2cb8:	0524      	lsls	r4, r4, #20
    2cba:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    2cbc:	4b05      	ldr	r3, [pc, #20]	; (2cd4 <system_gclk_chan_get_hz+0x2c>)
    2cbe:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2cc0:	0020      	movs	r0, r4
    2cc2:	4b05      	ldr	r3, [pc, #20]	; (2cd8 <system_gclk_chan_get_hz+0x30>)
    2cc4:	4798      	blx	r3
}
    2cc6:	bd10      	pop	{r4, pc}
    2cc8:	00002579 	.word	0x00002579
    2ccc:	40000c02 	.word	0x40000c02
    2cd0:	40000c00 	.word	0x40000c00
    2cd4:	000025b9 	.word	0x000025b9
    2cd8:	00002b75 	.word	0x00002b75

00002cdc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2cdc:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2cde:	78d3      	ldrb	r3, [r2, #3]
    2ce0:	2b00      	cmp	r3, #0
    2ce2:	d135      	bne.n	2d50 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2ce4:	7813      	ldrb	r3, [r2, #0]
    2ce6:	2b80      	cmp	r3, #128	; 0x80
    2ce8:	d029      	beq.n	2d3e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2cea:	061b      	lsls	r3, r3, #24
    2cec:	2480      	movs	r4, #128	; 0x80
    2cee:	0264      	lsls	r4, r4, #9
    2cf0:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2cf2:	7854      	ldrb	r4, [r2, #1]
    2cf4:	2502      	movs	r5, #2
    2cf6:	43ac      	bics	r4, r5
    2cf8:	d106      	bne.n	2d08 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2cfa:	7894      	ldrb	r4, [r2, #2]
    2cfc:	2c00      	cmp	r4, #0
    2cfe:	d120      	bne.n	2d42 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    2d00:	2480      	movs	r4, #128	; 0x80
    2d02:	02a4      	lsls	r4, r4, #10
    2d04:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2d06:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2d08:	7854      	ldrb	r4, [r2, #1]
    2d0a:	3c01      	subs	r4, #1
    2d0c:	2c01      	cmp	r4, #1
    2d0e:	d91c      	bls.n	2d4a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2d10:	040d      	lsls	r5, r1, #16
    2d12:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2d14:	24a0      	movs	r4, #160	; 0xa0
    2d16:	05e4      	lsls	r4, r4, #23
    2d18:	432c      	orrs	r4, r5
    2d1a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2d1c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2d1e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2d20:	24d0      	movs	r4, #208	; 0xd0
    2d22:	0624      	lsls	r4, r4, #24
    2d24:	432c      	orrs	r4, r5
    2d26:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2d28:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2d2a:	78d4      	ldrb	r4, [r2, #3]
    2d2c:	2c00      	cmp	r4, #0
    2d2e:	d122      	bne.n	2d76 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2d30:	035b      	lsls	r3, r3, #13
    2d32:	d51c      	bpl.n	2d6e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2d34:	7893      	ldrb	r3, [r2, #2]
    2d36:	2b01      	cmp	r3, #1
    2d38:	d01e      	beq.n	2d78 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    2d3a:	6141      	str	r1, [r0, #20]
    2d3c:	e017      	b.n	2d6e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    2d3e:	2300      	movs	r3, #0
    2d40:	e7d7      	b.n	2cf2 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2d42:	24c0      	movs	r4, #192	; 0xc0
    2d44:	02e4      	lsls	r4, r4, #11
    2d46:	4323      	orrs	r3, r4
    2d48:	e7dd      	b.n	2d06 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2d4a:	4c0d      	ldr	r4, [pc, #52]	; (2d80 <_system_pinmux_config+0xa4>)
    2d4c:	4023      	ands	r3, r4
    2d4e:	e7df      	b.n	2d10 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    2d50:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2d52:	040c      	lsls	r4, r1, #16
    2d54:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2d56:	23a0      	movs	r3, #160	; 0xa0
    2d58:	05db      	lsls	r3, r3, #23
    2d5a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2d5c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2d5e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2d60:	23d0      	movs	r3, #208	; 0xd0
    2d62:	061b      	lsls	r3, r3, #24
    2d64:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2d66:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    2d68:	78d3      	ldrb	r3, [r2, #3]
    2d6a:	2b00      	cmp	r3, #0
    2d6c:	d103      	bne.n	2d76 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2d6e:	7853      	ldrb	r3, [r2, #1]
    2d70:	3b01      	subs	r3, #1
    2d72:	2b01      	cmp	r3, #1
    2d74:	d902      	bls.n	2d7c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    2d76:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    2d78:	6181      	str	r1, [r0, #24]
    2d7a:	e7f8      	b.n	2d6e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    2d7c:	6081      	str	r1, [r0, #8]
}
    2d7e:	e7fa      	b.n	2d76 <_system_pinmux_config+0x9a>
    2d80:	fffbffff 	.word	0xfffbffff

00002d84 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2d84:	b510      	push	{r4, lr}
    2d86:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2d88:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2d8a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2d8c:	2900      	cmp	r1, #0
    2d8e:	d104      	bne.n	2d9a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    2d90:	0943      	lsrs	r3, r0, #5
    2d92:	01db      	lsls	r3, r3, #7
    2d94:	4905      	ldr	r1, [pc, #20]	; (2dac <system_pinmux_pin_set_config+0x28>)
    2d96:	468c      	mov	ip, r1
    2d98:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2d9a:	241f      	movs	r4, #31
    2d9c:	4020      	ands	r0, r4
    2d9e:	2101      	movs	r1, #1
    2da0:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    2da2:	0018      	movs	r0, r3
    2da4:	4b02      	ldr	r3, [pc, #8]	; (2db0 <system_pinmux_pin_set_config+0x2c>)
    2da6:	4798      	blx	r3
}
    2da8:	bd10      	pop	{r4, pc}
    2daa:	46c0      	nop			; (mov r8, r8)
    2dac:	41004400 	.word	0x41004400
    2db0:	00002cdd 	.word	0x00002cdd

00002db4 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2db4:	4770      	bx	lr
	...

00002db8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2db8:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2dba:	4b05      	ldr	r3, [pc, #20]	; (2dd0 <system_init+0x18>)
    2dbc:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2dbe:	4b05      	ldr	r3, [pc, #20]	; (2dd4 <system_init+0x1c>)
    2dc0:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2dc2:	4b05      	ldr	r3, [pc, #20]	; (2dd8 <system_init+0x20>)
    2dc4:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2dc6:	4b05      	ldr	r3, [pc, #20]	; (2ddc <system_init+0x24>)
    2dc8:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2dca:	4b05      	ldr	r3, [pc, #20]	; (2de0 <system_init+0x28>)
    2dcc:	4798      	blx	r3
}
    2dce:	bd10      	pop	{r4, pc}
    2dd0:	000028f5 	.word	0x000028f5
    2dd4:	000025e9 	.word	0x000025e9
    2dd8:	00002db5 	.word	0x00002db5
    2ddc:	00002db5 	.word	0x00002db5
    2de0:	00002db5 	.word	0x00002db5

00002de4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2de4:	e7fe      	b.n	2de4 <Dummy_Handler>
	...

00002de8 <Reset_Handler>:
{
    2de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    2dea:	4a2a      	ldr	r2, [pc, #168]	; (2e94 <Reset_Handler+0xac>)
    2dec:	4b2a      	ldr	r3, [pc, #168]	; (2e98 <Reset_Handler+0xb0>)
    2dee:	429a      	cmp	r2, r3
    2df0:	d011      	beq.n	2e16 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    2df2:	001a      	movs	r2, r3
    2df4:	4b29      	ldr	r3, [pc, #164]	; (2e9c <Reset_Handler+0xb4>)
    2df6:	429a      	cmp	r2, r3
    2df8:	d20d      	bcs.n	2e16 <Reset_Handler+0x2e>
    2dfa:	4a29      	ldr	r2, [pc, #164]	; (2ea0 <Reset_Handler+0xb8>)
    2dfc:	3303      	adds	r3, #3
    2dfe:	1a9b      	subs	r3, r3, r2
    2e00:	089b      	lsrs	r3, r3, #2
    2e02:	3301      	adds	r3, #1
    2e04:	009b      	lsls	r3, r3, #2
    2e06:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2e08:	4823      	ldr	r0, [pc, #140]	; (2e98 <Reset_Handler+0xb0>)
    2e0a:	4922      	ldr	r1, [pc, #136]	; (2e94 <Reset_Handler+0xac>)
    2e0c:	588c      	ldr	r4, [r1, r2]
    2e0e:	5084      	str	r4, [r0, r2]
    2e10:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    2e12:	429a      	cmp	r2, r3
    2e14:	d1fa      	bne.n	2e0c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    2e16:	4a23      	ldr	r2, [pc, #140]	; (2ea4 <Reset_Handler+0xbc>)
    2e18:	4b23      	ldr	r3, [pc, #140]	; (2ea8 <Reset_Handler+0xc0>)
    2e1a:	429a      	cmp	r2, r3
    2e1c:	d20a      	bcs.n	2e34 <Reset_Handler+0x4c>
    2e1e:	43d3      	mvns	r3, r2
    2e20:	4921      	ldr	r1, [pc, #132]	; (2ea8 <Reset_Handler+0xc0>)
    2e22:	185b      	adds	r3, r3, r1
    2e24:	2103      	movs	r1, #3
    2e26:	438b      	bics	r3, r1
    2e28:	3304      	adds	r3, #4
    2e2a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    2e2c:	2100      	movs	r1, #0
    2e2e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2e30:	4293      	cmp	r3, r2
    2e32:	d1fc      	bne.n	2e2e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2e34:	4a1d      	ldr	r2, [pc, #116]	; (2eac <Reset_Handler+0xc4>)
    2e36:	21ff      	movs	r1, #255	; 0xff
    2e38:	4b1d      	ldr	r3, [pc, #116]	; (2eb0 <Reset_Handler+0xc8>)
    2e3a:	438b      	bics	r3, r1
    2e3c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2e3e:	39fd      	subs	r1, #253	; 0xfd
    2e40:	2390      	movs	r3, #144	; 0x90
    2e42:	005b      	lsls	r3, r3, #1
    2e44:	4a1b      	ldr	r2, [pc, #108]	; (2eb4 <Reset_Handler+0xcc>)
    2e46:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2e48:	4a1b      	ldr	r2, [pc, #108]	; (2eb8 <Reset_Handler+0xd0>)
    2e4a:	78d3      	ldrb	r3, [r2, #3]
    2e4c:	2503      	movs	r5, #3
    2e4e:	43ab      	bics	r3, r5
    2e50:	2402      	movs	r4, #2
    2e52:	4323      	orrs	r3, r4
    2e54:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2e56:	78d3      	ldrb	r3, [r2, #3]
    2e58:	270c      	movs	r7, #12
    2e5a:	43bb      	bics	r3, r7
    2e5c:	2608      	movs	r6, #8
    2e5e:	4333      	orrs	r3, r6
    2e60:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    2e62:	4b16      	ldr	r3, [pc, #88]	; (2ebc <Reset_Handler+0xd4>)
    2e64:	7b98      	ldrb	r0, [r3, #14]
    2e66:	2230      	movs	r2, #48	; 0x30
    2e68:	4390      	bics	r0, r2
    2e6a:	2220      	movs	r2, #32
    2e6c:	4310      	orrs	r0, r2
    2e6e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2e70:	7b99      	ldrb	r1, [r3, #14]
    2e72:	43b9      	bics	r1, r7
    2e74:	4331      	orrs	r1, r6
    2e76:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2e78:	7b9a      	ldrb	r2, [r3, #14]
    2e7a:	43aa      	bics	r2, r5
    2e7c:	4322      	orrs	r2, r4
    2e7e:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2e80:	4a0f      	ldr	r2, [pc, #60]	; (2ec0 <Reset_Handler+0xd8>)
    2e82:	6853      	ldr	r3, [r2, #4]
    2e84:	2180      	movs	r1, #128	; 0x80
    2e86:	430b      	orrs	r3, r1
    2e88:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    2e8a:	4b0e      	ldr	r3, [pc, #56]	; (2ec4 <Reset_Handler+0xdc>)
    2e8c:	4798      	blx	r3
        main();
    2e8e:	4b0e      	ldr	r3, [pc, #56]	; (2ec8 <Reset_Handler+0xe0>)
    2e90:	4798      	blx	r3
    2e92:	e7fe      	b.n	2e92 <Reset_Handler+0xaa>
    2e94:	00003f10 	.word	0x00003f10
    2e98:	20000000 	.word	0x20000000
    2e9c:	200001d8 	.word	0x200001d8
    2ea0:	20000004 	.word	0x20000004
    2ea4:	200001d8 	.word	0x200001d8
    2ea8:	200036e0 	.word	0x200036e0
    2eac:	e000ed00 	.word	0xe000ed00
    2eb0:	00000000 	.word	0x00000000
    2eb4:	41007000 	.word	0x41007000
    2eb8:	41005000 	.word	0x41005000
    2ebc:	41004800 	.word	0x41004800
    2ec0:	41004000 	.word	0x41004000
    2ec4:	00003161 	.word	0x00003161
    2ec8:	00002fad 	.word	0x00002fad

00002ecc <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    2ecc:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    2ece:	4a06      	ldr	r2, [pc, #24]	; (2ee8 <_sbrk+0x1c>)
    2ed0:	6812      	ldr	r2, [r2, #0]
    2ed2:	2a00      	cmp	r2, #0
    2ed4:	d004      	beq.n	2ee0 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    2ed6:	4a04      	ldr	r2, [pc, #16]	; (2ee8 <_sbrk+0x1c>)
    2ed8:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2eda:	18c3      	adds	r3, r0, r3
    2edc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    2ede:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    2ee0:	4902      	ldr	r1, [pc, #8]	; (2eec <_sbrk+0x20>)
    2ee2:	4a01      	ldr	r2, [pc, #4]	; (2ee8 <_sbrk+0x1c>)
    2ee4:	6011      	str	r1, [r2, #0]
    2ee6:	e7f6      	b.n	2ed6 <_sbrk+0xa>
    2ee8:	20003258 	.word	0x20003258
    2eec:	200056e0 	.word	0x200056e0

00002ef0 <LED_Task>:
		vTaskDelay(300/portTICK_PERIOD_MS);
	}
}
#endif

void LED_Task(void * parameter) {
    2ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ef2:	46ce      	mov	lr, r9
    2ef4:	b500      	push	{lr}
    2ef6:	b088      	sub	sp, #32
	
	// Initialize Queue
	LEDQueue = xQueueCreate(QUEUE_LENGTH, sizeof(int));
    2ef8:	2200      	movs	r2, #0
    2efa:	2104      	movs	r1, #4
    2efc:	2014      	movs	r0, #20
    2efe:	4b13      	ldr	r3, [pc, #76]	; (2f4c <LED_Task+0x5c>)
    2f00:	4798      	blx	r3
    2f02:	4b13      	ldr	r3, [pc, #76]	; (2f50 <LED_Task+0x60>)
    2f04:	6018      	str	r0, [r3, #0]
	int delay = 500;
    2f06:	23fa      	movs	r3, #250	; 0xfa
    2f08:	005b      	lsls	r3, r3, #1
    2f0a:	9307      	str	r3, [sp, #28]
	while(1) {
		if(xQueueReceive(LEDQueue, (void*)&delay, 0) == pdTRUE) {
    2f0c:	4b10      	ldr	r3, [pc, #64]	; (2f50 <LED_Task+0x60>)
    2f0e:	4699      	mov	r9, r3
    2f10:	4f10      	ldr	r7, [pc, #64]	; (2f54 <LED_Task+0x64>)
    2f12:	e009      	b.n	2f28 <LED_Task+0x38>
    2f14:	4d10      	ldr	r5, [pc, #64]	; (2f58 <LED_Task+0x68>)
    2f16:	2680      	movs	r6, #128	; 0x80
    2f18:	0436      	lsls	r6, r6, #16
    2f1a:	61ae      	str	r6, [r5, #24]
			dUART_WriteString(str);
		} else {
			
		}
		port_pin_set_output_level(LED_0_PIN, true);
		vTaskDelay(delay/portTICK_PERIOD_MS);
    2f1c:	9807      	ldr	r0, [sp, #28]
    2f1e:	4c0f      	ldr	r4, [pc, #60]	; (2f5c <LED_Task+0x6c>)
    2f20:	47a0      	blx	r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2f22:	616e      	str	r6, [r5, #20]
		port_pin_set_output_level(LED_0_PIN, false);
		vTaskDelay(delay/portTICK_PERIOD_MS);
    2f24:	9807      	ldr	r0, [sp, #28]
    2f26:	47a0      	blx	r4
		if(xQueueReceive(LEDQueue, (void*)&delay, 0) == pdTRUE) {
    2f28:	2200      	movs	r2, #0
    2f2a:	a907      	add	r1, sp, #28
    2f2c:	464b      	mov	r3, r9
    2f2e:	6818      	ldr	r0, [r3, #0]
    2f30:	47b8      	blx	r7
    2f32:	2801      	cmp	r0, #1
    2f34:	d1ee      	bne.n	2f14 <LED_Task+0x24>
			snprintf(str, sizeof(str) - 1, "LED Blink at - %d ms\r\n", delay);
    2f36:	9b07      	ldr	r3, [sp, #28]
    2f38:	4a09      	ldr	r2, [pc, #36]	; (2f60 <LED_Task+0x70>)
    2f3a:	2118      	movs	r1, #24
    2f3c:	4668      	mov	r0, sp
    2f3e:	4c09      	ldr	r4, [pc, #36]	; (2f64 <LED_Task+0x74>)
    2f40:	47a0      	blx	r4
			dUART_WriteString(str);
    2f42:	4668      	mov	r0, sp
    2f44:	4b08      	ldr	r3, [pc, #32]	; (2f68 <LED_Task+0x78>)
    2f46:	4798      	blx	r3
    2f48:	e7e4      	b.n	2f14 <LED_Task+0x24>
    2f4a:	46c0      	nop			; (mov r8, r8)
    2f4c:	00001495 	.word	0x00001495
    2f50:	20003264 	.word	0x20003264
    2f54:	0000173d 	.word	0x0000173d
    2f58:	41004400 	.word	0x41004400
    2f5c:	00001ebd 	.word	0x00001ebd
    2f60:	00003d88 	.word	0x00003d88
    2f64:	00003355 	.word	0x00003355
    2f68:	00000ee9 	.word	0x00000ee9

00002f6c <CreateTasks>:
	}
}

BaseType_t CreateTasks(void) {
    2f6c:	b570      	push	{r4, r5, r6, lr}
    2f6e:	b082      	sub	sp, #8
						1,
						NULL);
#endif

#if (CURRENT_TASK == QUEUE_TASK)
	xReturn = xTaskCreate(dUART_Task,
    2f70:	2600      	movs	r6, #0
    2f72:	9601      	str	r6, [sp, #4]
    2f74:	2501      	movs	r5, #1
    2f76:	9500      	str	r5, [sp, #0]
    2f78:	2300      	movs	r3, #0
    2f7a:	2282      	movs	r2, #130	; 0x82
    2f7c:	4906      	ldr	r1, [pc, #24]	; (2f98 <CreateTasks+0x2c>)
    2f7e:	4807      	ldr	r0, [pc, #28]	; (2f9c <CreateTasks+0x30>)
    2f80:	4c07      	ldr	r4, [pc, #28]	; (2fa0 <CreateTasks+0x34>)
    2f82:	47a0      	blx	r4
				130,
				NULL,
				1,
				NULL);
				
	xReturn = xTaskCreate(LED_Task,
    2f84:	9601      	str	r6, [sp, #4]
    2f86:	9500      	str	r5, [sp, #0]
    2f88:	2300      	movs	r3, #0
    2f8a:	2282      	movs	r2, #130	; 0x82
    2f8c:	4905      	ldr	r1, [pc, #20]	; (2fa4 <CreateTasks+0x38>)
    2f8e:	4806      	ldr	r0, [pc, #24]	; (2fa8 <CreateTasks+0x3c>)
    2f90:	47a0      	blx	r4
						1,
						NULL);

#endif
	return xReturn;
}
    2f92:	b002      	add	sp, #8
    2f94:	bd70      	pop	{r4, r5, r6, pc}
    2f96:	46c0      	nop			; (mov r8, r8)
    2f98:	00003d70 	.word	0x00003d70
    2f9c:	00000f5d 	.word	0x00000f5d
    2fa0:	00001a25 	.word	0x00001a25
    2fa4:	00003d7c 	.word	0x00003d7c
    2fa8:	00002ef1 	.word	0x00002ef1

00002fac <main>:

int main (void)
{
    2fac:	b510      	push	{r4, lr}
	system_init();
    2fae:	4b06      	ldr	r3, [pc, #24]	; (2fc8 <main+0x1c>)
    2fb0:	4798      	blx	r3
	
	/* Initialize the UART console. */
	dUART_Initialize();
    2fb2:	4b06      	ldr	r3, [pc, #24]	; (2fcc <main+0x20>)
    2fb4:	4798      	blx	r3
	
	dUART_WriteString("Hello World\r\n");
    2fb6:	4806      	ldr	r0, [pc, #24]	; (2fd0 <main+0x24>)
    2fb8:	4b06      	ldr	r3, [pc, #24]	; (2fd4 <main+0x28>)
    2fba:	4798      	blx	r3

	CreateTasks();
    2fbc:	4b06      	ldr	r3, [pc, #24]	; (2fd8 <main+0x2c>)
    2fbe:	4798      	blx	r3
				
	vTaskStartScheduler();
    2fc0:	4b06      	ldr	r3, [pc, #24]	; (2fdc <main+0x30>)
    2fc2:	4798      	blx	r3
}
    2fc4:	2000      	movs	r0, #0
    2fc6:	bd10      	pop	{r4, pc}
    2fc8:	00002db9 	.word	0x00002db9
    2fcc:	00001079 	.word	0x00001079
    2fd0:	00003da0 	.word	0x00003da0
    2fd4:	00000ee9 	.word	0x00000ee9
    2fd8:	00002f6d 	.word	0x00002f6d
    2fdc:	00001c11 	.word	0x00001c11

00002fe0 <vApplicationDaemonTaskStartupHook>:

void vApplicationDaemonTaskStartupHook(void)
{
}
    2fe0:	4770      	bx	lr

00002fe2 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook(void)
{
    2fe2:	e7fe      	b.n	2fe2 <vApplicationMallocFailedHook>

00002fe4 <vApplicationStackOverflowHook>:
	while(1);
}

void vApplicationStackOverflowHook(void)
{
    2fe4:	e7fe      	b.n	2fe4 <vApplicationStackOverflowHook>
	...

00002fe8 <__udivsi3>:
    2fe8:	2200      	movs	r2, #0
    2fea:	0843      	lsrs	r3, r0, #1
    2fec:	428b      	cmp	r3, r1
    2fee:	d374      	bcc.n	30da <__udivsi3+0xf2>
    2ff0:	0903      	lsrs	r3, r0, #4
    2ff2:	428b      	cmp	r3, r1
    2ff4:	d35f      	bcc.n	30b6 <__udivsi3+0xce>
    2ff6:	0a03      	lsrs	r3, r0, #8
    2ff8:	428b      	cmp	r3, r1
    2ffa:	d344      	bcc.n	3086 <__udivsi3+0x9e>
    2ffc:	0b03      	lsrs	r3, r0, #12
    2ffe:	428b      	cmp	r3, r1
    3000:	d328      	bcc.n	3054 <__udivsi3+0x6c>
    3002:	0c03      	lsrs	r3, r0, #16
    3004:	428b      	cmp	r3, r1
    3006:	d30d      	bcc.n	3024 <__udivsi3+0x3c>
    3008:	22ff      	movs	r2, #255	; 0xff
    300a:	0209      	lsls	r1, r1, #8
    300c:	ba12      	rev	r2, r2
    300e:	0c03      	lsrs	r3, r0, #16
    3010:	428b      	cmp	r3, r1
    3012:	d302      	bcc.n	301a <__udivsi3+0x32>
    3014:	1212      	asrs	r2, r2, #8
    3016:	0209      	lsls	r1, r1, #8
    3018:	d065      	beq.n	30e6 <__udivsi3+0xfe>
    301a:	0b03      	lsrs	r3, r0, #12
    301c:	428b      	cmp	r3, r1
    301e:	d319      	bcc.n	3054 <__udivsi3+0x6c>
    3020:	e000      	b.n	3024 <__udivsi3+0x3c>
    3022:	0a09      	lsrs	r1, r1, #8
    3024:	0bc3      	lsrs	r3, r0, #15
    3026:	428b      	cmp	r3, r1
    3028:	d301      	bcc.n	302e <__udivsi3+0x46>
    302a:	03cb      	lsls	r3, r1, #15
    302c:	1ac0      	subs	r0, r0, r3
    302e:	4152      	adcs	r2, r2
    3030:	0b83      	lsrs	r3, r0, #14
    3032:	428b      	cmp	r3, r1
    3034:	d301      	bcc.n	303a <__udivsi3+0x52>
    3036:	038b      	lsls	r3, r1, #14
    3038:	1ac0      	subs	r0, r0, r3
    303a:	4152      	adcs	r2, r2
    303c:	0b43      	lsrs	r3, r0, #13
    303e:	428b      	cmp	r3, r1
    3040:	d301      	bcc.n	3046 <__udivsi3+0x5e>
    3042:	034b      	lsls	r3, r1, #13
    3044:	1ac0      	subs	r0, r0, r3
    3046:	4152      	adcs	r2, r2
    3048:	0b03      	lsrs	r3, r0, #12
    304a:	428b      	cmp	r3, r1
    304c:	d301      	bcc.n	3052 <__udivsi3+0x6a>
    304e:	030b      	lsls	r3, r1, #12
    3050:	1ac0      	subs	r0, r0, r3
    3052:	4152      	adcs	r2, r2
    3054:	0ac3      	lsrs	r3, r0, #11
    3056:	428b      	cmp	r3, r1
    3058:	d301      	bcc.n	305e <__udivsi3+0x76>
    305a:	02cb      	lsls	r3, r1, #11
    305c:	1ac0      	subs	r0, r0, r3
    305e:	4152      	adcs	r2, r2
    3060:	0a83      	lsrs	r3, r0, #10
    3062:	428b      	cmp	r3, r1
    3064:	d301      	bcc.n	306a <__udivsi3+0x82>
    3066:	028b      	lsls	r3, r1, #10
    3068:	1ac0      	subs	r0, r0, r3
    306a:	4152      	adcs	r2, r2
    306c:	0a43      	lsrs	r3, r0, #9
    306e:	428b      	cmp	r3, r1
    3070:	d301      	bcc.n	3076 <__udivsi3+0x8e>
    3072:	024b      	lsls	r3, r1, #9
    3074:	1ac0      	subs	r0, r0, r3
    3076:	4152      	adcs	r2, r2
    3078:	0a03      	lsrs	r3, r0, #8
    307a:	428b      	cmp	r3, r1
    307c:	d301      	bcc.n	3082 <__udivsi3+0x9a>
    307e:	020b      	lsls	r3, r1, #8
    3080:	1ac0      	subs	r0, r0, r3
    3082:	4152      	adcs	r2, r2
    3084:	d2cd      	bcs.n	3022 <__udivsi3+0x3a>
    3086:	09c3      	lsrs	r3, r0, #7
    3088:	428b      	cmp	r3, r1
    308a:	d301      	bcc.n	3090 <__udivsi3+0xa8>
    308c:	01cb      	lsls	r3, r1, #7
    308e:	1ac0      	subs	r0, r0, r3
    3090:	4152      	adcs	r2, r2
    3092:	0983      	lsrs	r3, r0, #6
    3094:	428b      	cmp	r3, r1
    3096:	d301      	bcc.n	309c <__udivsi3+0xb4>
    3098:	018b      	lsls	r3, r1, #6
    309a:	1ac0      	subs	r0, r0, r3
    309c:	4152      	adcs	r2, r2
    309e:	0943      	lsrs	r3, r0, #5
    30a0:	428b      	cmp	r3, r1
    30a2:	d301      	bcc.n	30a8 <__udivsi3+0xc0>
    30a4:	014b      	lsls	r3, r1, #5
    30a6:	1ac0      	subs	r0, r0, r3
    30a8:	4152      	adcs	r2, r2
    30aa:	0903      	lsrs	r3, r0, #4
    30ac:	428b      	cmp	r3, r1
    30ae:	d301      	bcc.n	30b4 <__udivsi3+0xcc>
    30b0:	010b      	lsls	r3, r1, #4
    30b2:	1ac0      	subs	r0, r0, r3
    30b4:	4152      	adcs	r2, r2
    30b6:	08c3      	lsrs	r3, r0, #3
    30b8:	428b      	cmp	r3, r1
    30ba:	d301      	bcc.n	30c0 <__udivsi3+0xd8>
    30bc:	00cb      	lsls	r3, r1, #3
    30be:	1ac0      	subs	r0, r0, r3
    30c0:	4152      	adcs	r2, r2
    30c2:	0883      	lsrs	r3, r0, #2
    30c4:	428b      	cmp	r3, r1
    30c6:	d301      	bcc.n	30cc <__udivsi3+0xe4>
    30c8:	008b      	lsls	r3, r1, #2
    30ca:	1ac0      	subs	r0, r0, r3
    30cc:	4152      	adcs	r2, r2
    30ce:	0843      	lsrs	r3, r0, #1
    30d0:	428b      	cmp	r3, r1
    30d2:	d301      	bcc.n	30d8 <__udivsi3+0xf0>
    30d4:	004b      	lsls	r3, r1, #1
    30d6:	1ac0      	subs	r0, r0, r3
    30d8:	4152      	adcs	r2, r2
    30da:	1a41      	subs	r1, r0, r1
    30dc:	d200      	bcs.n	30e0 <__udivsi3+0xf8>
    30de:	4601      	mov	r1, r0
    30e0:	4152      	adcs	r2, r2
    30e2:	4610      	mov	r0, r2
    30e4:	4770      	bx	lr
    30e6:	e7ff      	b.n	30e8 <__udivsi3+0x100>
    30e8:	b501      	push	{r0, lr}
    30ea:	2000      	movs	r0, #0
    30ec:	f000 f806 	bl	30fc <__aeabi_idiv0>
    30f0:	bd02      	pop	{r1, pc}
    30f2:	46c0      	nop			; (mov r8, r8)

000030f4 <__aeabi_uidivmod>:
    30f4:	2900      	cmp	r1, #0
    30f6:	d0f7      	beq.n	30e8 <__udivsi3+0x100>
    30f8:	e776      	b.n	2fe8 <__udivsi3>
    30fa:	4770      	bx	lr

000030fc <__aeabi_idiv0>:
    30fc:	4770      	bx	lr
    30fe:	46c0      	nop			; (mov r8, r8)

00003100 <__aeabi_lmul>:
    3100:	b5f0      	push	{r4, r5, r6, r7, lr}
    3102:	46ce      	mov	lr, r9
    3104:	4647      	mov	r7, r8
    3106:	0415      	lsls	r5, r2, #16
    3108:	0c2d      	lsrs	r5, r5, #16
    310a:	002e      	movs	r6, r5
    310c:	b580      	push	{r7, lr}
    310e:	0407      	lsls	r7, r0, #16
    3110:	0c14      	lsrs	r4, r2, #16
    3112:	0c3f      	lsrs	r7, r7, #16
    3114:	4699      	mov	r9, r3
    3116:	0c03      	lsrs	r3, r0, #16
    3118:	437e      	muls	r6, r7
    311a:	435d      	muls	r5, r3
    311c:	4367      	muls	r7, r4
    311e:	4363      	muls	r3, r4
    3120:	197f      	adds	r7, r7, r5
    3122:	0c34      	lsrs	r4, r6, #16
    3124:	19e4      	adds	r4, r4, r7
    3126:	469c      	mov	ip, r3
    3128:	42a5      	cmp	r5, r4
    312a:	d903      	bls.n	3134 <__aeabi_lmul+0x34>
    312c:	2380      	movs	r3, #128	; 0x80
    312e:	025b      	lsls	r3, r3, #9
    3130:	4698      	mov	r8, r3
    3132:	44c4      	add	ip, r8
    3134:	464b      	mov	r3, r9
    3136:	4351      	muls	r1, r2
    3138:	4343      	muls	r3, r0
    313a:	0436      	lsls	r6, r6, #16
    313c:	0c36      	lsrs	r6, r6, #16
    313e:	0c25      	lsrs	r5, r4, #16
    3140:	0424      	lsls	r4, r4, #16
    3142:	4465      	add	r5, ip
    3144:	19a4      	adds	r4, r4, r6
    3146:	1859      	adds	r1, r3, r1
    3148:	1949      	adds	r1, r1, r5
    314a:	0020      	movs	r0, r4
    314c:	bc0c      	pop	{r2, r3}
    314e:	4690      	mov	r8, r2
    3150:	4699      	mov	r9, r3
    3152:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003154 <atoi>:
    3154:	b510      	push	{r4, lr}
    3156:	220a      	movs	r2, #10
    3158:	2100      	movs	r1, #0
    315a:	f000 fa21 	bl	35a0 <strtol>
    315e:	bd10      	pop	{r4, pc}

00003160 <__libc_init_array>:
    3160:	b570      	push	{r4, r5, r6, lr}
    3162:	2600      	movs	r6, #0
    3164:	4d0c      	ldr	r5, [pc, #48]	; (3198 <__libc_init_array+0x38>)
    3166:	4c0d      	ldr	r4, [pc, #52]	; (319c <__libc_init_array+0x3c>)
    3168:	1b64      	subs	r4, r4, r5
    316a:	10a4      	asrs	r4, r4, #2
    316c:	42a6      	cmp	r6, r4
    316e:	d109      	bne.n	3184 <__libc_init_array+0x24>
    3170:	2600      	movs	r6, #0
    3172:	f000 febd 	bl	3ef0 <_init>
    3176:	4d0a      	ldr	r5, [pc, #40]	; (31a0 <__libc_init_array+0x40>)
    3178:	4c0a      	ldr	r4, [pc, #40]	; (31a4 <__libc_init_array+0x44>)
    317a:	1b64      	subs	r4, r4, r5
    317c:	10a4      	asrs	r4, r4, #2
    317e:	42a6      	cmp	r6, r4
    3180:	d105      	bne.n	318e <__libc_init_array+0x2e>
    3182:	bd70      	pop	{r4, r5, r6, pc}
    3184:	00b3      	lsls	r3, r6, #2
    3186:	58eb      	ldr	r3, [r5, r3]
    3188:	4798      	blx	r3
    318a:	3601      	adds	r6, #1
    318c:	e7ee      	b.n	316c <__libc_init_array+0xc>
    318e:	00b3      	lsls	r3, r6, #2
    3190:	58eb      	ldr	r3, [r5, r3]
    3192:	4798      	blx	r3
    3194:	3601      	adds	r6, #1
    3196:	e7f2      	b.n	317e <__libc_init_array+0x1e>
    3198:	00003efc 	.word	0x00003efc
    319c:	00003efc 	.word	0x00003efc
    31a0:	00003efc 	.word	0x00003efc
    31a4:	00003f00 	.word	0x00003f00

000031a8 <malloc>:
    31a8:	b510      	push	{r4, lr}
    31aa:	4b03      	ldr	r3, [pc, #12]	; (31b8 <malloc+0x10>)
    31ac:	0001      	movs	r1, r0
    31ae:	6818      	ldr	r0, [r3, #0]
    31b0:	f000 f860 	bl	3274 <_malloc_r>
    31b4:	bd10      	pop	{r4, pc}
    31b6:	46c0      	nop			; (mov r8, r8)
    31b8:	20000008 	.word	0x20000008

000031bc <memcpy>:
    31bc:	2300      	movs	r3, #0
    31be:	b510      	push	{r4, lr}
    31c0:	429a      	cmp	r2, r3
    31c2:	d100      	bne.n	31c6 <memcpy+0xa>
    31c4:	bd10      	pop	{r4, pc}
    31c6:	5ccc      	ldrb	r4, [r1, r3]
    31c8:	54c4      	strb	r4, [r0, r3]
    31ca:	3301      	adds	r3, #1
    31cc:	e7f8      	b.n	31c0 <memcpy+0x4>

000031ce <memset>:
    31ce:	0003      	movs	r3, r0
    31d0:	1882      	adds	r2, r0, r2
    31d2:	4293      	cmp	r3, r2
    31d4:	d100      	bne.n	31d8 <memset+0xa>
    31d6:	4770      	bx	lr
    31d8:	7019      	strb	r1, [r3, #0]
    31da:	3301      	adds	r3, #1
    31dc:	e7f9      	b.n	31d2 <memset+0x4>
	...

000031e0 <_free_r>:
    31e0:	b570      	push	{r4, r5, r6, lr}
    31e2:	0005      	movs	r5, r0
    31e4:	2900      	cmp	r1, #0
    31e6:	d010      	beq.n	320a <_free_r+0x2a>
    31e8:	1f0c      	subs	r4, r1, #4
    31ea:	6823      	ldr	r3, [r4, #0]
    31ec:	2b00      	cmp	r3, #0
    31ee:	da00      	bge.n	31f2 <_free_r+0x12>
    31f0:	18e4      	adds	r4, r4, r3
    31f2:	0028      	movs	r0, r5
    31f4:	f000 f9fd 	bl	35f2 <__malloc_lock>
    31f8:	4a1d      	ldr	r2, [pc, #116]	; (3270 <_free_r+0x90>)
    31fa:	6813      	ldr	r3, [r2, #0]
    31fc:	2b00      	cmp	r3, #0
    31fe:	d105      	bne.n	320c <_free_r+0x2c>
    3200:	6063      	str	r3, [r4, #4]
    3202:	6014      	str	r4, [r2, #0]
    3204:	0028      	movs	r0, r5
    3206:	f000 f9f5 	bl	35f4 <__malloc_unlock>
    320a:	bd70      	pop	{r4, r5, r6, pc}
    320c:	42a3      	cmp	r3, r4
    320e:	d909      	bls.n	3224 <_free_r+0x44>
    3210:	6821      	ldr	r1, [r4, #0]
    3212:	1860      	adds	r0, r4, r1
    3214:	4283      	cmp	r3, r0
    3216:	d1f3      	bne.n	3200 <_free_r+0x20>
    3218:	6818      	ldr	r0, [r3, #0]
    321a:	685b      	ldr	r3, [r3, #4]
    321c:	1841      	adds	r1, r0, r1
    321e:	6021      	str	r1, [r4, #0]
    3220:	e7ee      	b.n	3200 <_free_r+0x20>
    3222:	0013      	movs	r3, r2
    3224:	685a      	ldr	r2, [r3, #4]
    3226:	2a00      	cmp	r2, #0
    3228:	d001      	beq.n	322e <_free_r+0x4e>
    322a:	42a2      	cmp	r2, r4
    322c:	d9f9      	bls.n	3222 <_free_r+0x42>
    322e:	6819      	ldr	r1, [r3, #0]
    3230:	1858      	adds	r0, r3, r1
    3232:	42a0      	cmp	r0, r4
    3234:	d10b      	bne.n	324e <_free_r+0x6e>
    3236:	6820      	ldr	r0, [r4, #0]
    3238:	1809      	adds	r1, r1, r0
    323a:	1858      	adds	r0, r3, r1
    323c:	6019      	str	r1, [r3, #0]
    323e:	4282      	cmp	r2, r0
    3240:	d1e0      	bne.n	3204 <_free_r+0x24>
    3242:	6810      	ldr	r0, [r2, #0]
    3244:	6852      	ldr	r2, [r2, #4]
    3246:	1841      	adds	r1, r0, r1
    3248:	6019      	str	r1, [r3, #0]
    324a:	605a      	str	r2, [r3, #4]
    324c:	e7da      	b.n	3204 <_free_r+0x24>
    324e:	42a0      	cmp	r0, r4
    3250:	d902      	bls.n	3258 <_free_r+0x78>
    3252:	230c      	movs	r3, #12
    3254:	602b      	str	r3, [r5, #0]
    3256:	e7d5      	b.n	3204 <_free_r+0x24>
    3258:	6821      	ldr	r1, [r4, #0]
    325a:	1860      	adds	r0, r4, r1
    325c:	4282      	cmp	r2, r0
    325e:	d103      	bne.n	3268 <_free_r+0x88>
    3260:	6810      	ldr	r0, [r2, #0]
    3262:	6852      	ldr	r2, [r2, #4]
    3264:	1841      	adds	r1, r0, r1
    3266:	6021      	str	r1, [r4, #0]
    3268:	6062      	str	r2, [r4, #4]
    326a:	605c      	str	r4, [r3, #4]
    326c:	e7ca      	b.n	3204 <_free_r+0x24>
    326e:	46c0      	nop			; (mov r8, r8)
    3270:	2000325c 	.word	0x2000325c

00003274 <_malloc_r>:
    3274:	2303      	movs	r3, #3
    3276:	b570      	push	{r4, r5, r6, lr}
    3278:	1ccd      	adds	r5, r1, #3
    327a:	439d      	bics	r5, r3
    327c:	3508      	adds	r5, #8
    327e:	0006      	movs	r6, r0
    3280:	2d0c      	cmp	r5, #12
    3282:	d21e      	bcs.n	32c2 <_malloc_r+0x4e>
    3284:	250c      	movs	r5, #12
    3286:	42a9      	cmp	r1, r5
    3288:	d81d      	bhi.n	32c6 <_malloc_r+0x52>
    328a:	0030      	movs	r0, r6
    328c:	f000 f9b1 	bl	35f2 <__malloc_lock>
    3290:	4a25      	ldr	r2, [pc, #148]	; (3328 <_malloc_r+0xb4>)
    3292:	6814      	ldr	r4, [r2, #0]
    3294:	0021      	movs	r1, r4
    3296:	2900      	cmp	r1, #0
    3298:	d119      	bne.n	32ce <_malloc_r+0x5a>
    329a:	4c24      	ldr	r4, [pc, #144]	; (332c <_malloc_r+0xb8>)
    329c:	6823      	ldr	r3, [r4, #0]
    329e:	2b00      	cmp	r3, #0
    32a0:	d103      	bne.n	32aa <_malloc_r+0x36>
    32a2:	0030      	movs	r0, r6
    32a4:	f000 f844 	bl	3330 <_sbrk_r>
    32a8:	6020      	str	r0, [r4, #0]
    32aa:	0029      	movs	r1, r5
    32ac:	0030      	movs	r0, r6
    32ae:	f000 f83f 	bl	3330 <_sbrk_r>
    32b2:	1c43      	adds	r3, r0, #1
    32b4:	d12c      	bne.n	3310 <_malloc_r+0x9c>
    32b6:	230c      	movs	r3, #12
    32b8:	0030      	movs	r0, r6
    32ba:	6033      	str	r3, [r6, #0]
    32bc:	f000 f99a 	bl	35f4 <__malloc_unlock>
    32c0:	e003      	b.n	32ca <_malloc_r+0x56>
    32c2:	2d00      	cmp	r5, #0
    32c4:	dadf      	bge.n	3286 <_malloc_r+0x12>
    32c6:	230c      	movs	r3, #12
    32c8:	6033      	str	r3, [r6, #0]
    32ca:	2000      	movs	r0, #0
    32cc:	bd70      	pop	{r4, r5, r6, pc}
    32ce:	680b      	ldr	r3, [r1, #0]
    32d0:	1b5b      	subs	r3, r3, r5
    32d2:	d41a      	bmi.n	330a <_malloc_r+0x96>
    32d4:	2b0b      	cmp	r3, #11
    32d6:	d903      	bls.n	32e0 <_malloc_r+0x6c>
    32d8:	600b      	str	r3, [r1, #0]
    32da:	18cc      	adds	r4, r1, r3
    32dc:	6025      	str	r5, [r4, #0]
    32de:	e003      	b.n	32e8 <_malloc_r+0x74>
    32e0:	428c      	cmp	r4, r1
    32e2:	d10e      	bne.n	3302 <_malloc_r+0x8e>
    32e4:	6863      	ldr	r3, [r4, #4]
    32e6:	6013      	str	r3, [r2, #0]
    32e8:	0030      	movs	r0, r6
    32ea:	f000 f983 	bl	35f4 <__malloc_unlock>
    32ee:	0020      	movs	r0, r4
    32f0:	2207      	movs	r2, #7
    32f2:	300b      	adds	r0, #11
    32f4:	1d23      	adds	r3, r4, #4
    32f6:	4390      	bics	r0, r2
    32f8:	1ac3      	subs	r3, r0, r3
    32fa:	d0e7      	beq.n	32cc <_malloc_r+0x58>
    32fc:	425a      	negs	r2, r3
    32fe:	50e2      	str	r2, [r4, r3]
    3300:	e7e4      	b.n	32cc <_malloc_r+0x58>
    3302:	684b      	ldr	r3, [r1, #4]
    3304:	6063      	str	r3, [r4, #4]
    3306:	000c      	movs	r4, r1
    3308:	e7ee      	b.n	32e8 <_malloc_r+0x74>
    330a:	000c      	movs	r4, r1
    330c:	6849      	ldr	r1, [r1, #4]
    330e:	e7c2      	b.n	3296 <_malloc_r+0x22>
    3310:	2303      	movs	r3, #3
    3312:	1cc4      	adds	r4, r0, #3
    3314:	439c      	bics	r4, r3
    3316:	42a0      	cmp	r0, r4
    3318:	d0e0      	beq.n	32dc <_malloc_r+0x68>
    331a:	1a21      	subs	r1, r4, r0
    331c:	0030      	movs	r0, r6
    331e:	f000 f807 	bl	3330 <_sbrk_r>
    3322:	1c43      	adds	r3, r0, #1
    3324:	d1da      	bne.n	32dc <_malloc_r+0x68>
    3326:	e7c6      	b.n	32b6 <_malloc_r+0x42>
    3328:	2000325c 	.word	0x2000325c
    332c:	20003260 	.word	0x20003260

00003330 <_sbrk_r>:
    3330:	2300      	movs	r3, #0
    3332:	b570      	push	{r4, r5, r6, lr}
    3334:	4c06      	ldr	r4, [pc, #24]	; (3350 <_sbrk_r+0x20>)
    3336:	0005      	movs	r5, r0
    3338:	0008      	movs	r0, r1
    333a:	6023      	str	r3, [r4, #0]
    333c:	f7ff fdc6 	bl	2ecc <_sbrk>
    3340:	1c43      	adds	r3, r0, #1
    3342:	d103      	bne.n	334c <_sbrk_r+0x1c>
    3344:	6823      	ldr	r3, [r4, #0]
    3346:	2b00      	cmp	r3, #0
    3348:	d000      	beq.n	334c <_sbrk_r+0x1c>
    334a:	602b      	str	r3, [r5, #0]
    334c:	bd70      	pop	{r4, r5, r6, pc}
    334e:	46c0      	nop			; (mov r8, r8)
    3350:	200036dc 	.word	0x200036dc

00003354 <sniprintf>:
    3354:	b40c      	push	{r2, r3}
    3356:	b530      	push	{r4, r5, lr}
    3358:	4b16      	ldr	r3, [pc, #88]	; (33b4 <sniprintf+0x60>)
    335a:	b09d      	sub	sp, #116	; 0x74
    335c:	1e0c      	subs	r4, r1, #0
    335e:	681d      	ldr	r5, [r3, #0]
    3360:	da08      	bge.n	3374 <sniprintf+0x20>
    3362:	238b      	movs	r3, #139	; 0x8b
    3364:	2001      	movs	r0, #1
    3366:	602b      	str	r3, [r5, #0]
    3368:	4240      	negs	r0, r0
    336a:	b01d      	add	sp, #116	; 0x74
    336c:	bc30      	pop	{r4, r5}
    336e:	bc08      	pop	{r3}
    3370:	b002      	add	sp, #8
    3372:	4718      	bx	r3
    3374:	2382      	movs	r3, #130	; 0x82
    3376:	a902      	add	r1, sp, #8
    3378:	009b      	lsls	r3, r3, #2
    337a:	818b      	strh	r3, [r1, #12]
    337c:	2300      	movs	r3, #0
    337e:	9002      	str	r0, [sp, #8]
    3380:	6108      	str	r0, [r1, #16]
    3382:	429c      	cmp	r4, r3
    3384:	d000      	beq.n	3388 <sniprintf+0x34>
    3386:	1e63      	subs	r3, r4, #1
    3388:	608b      	str	r3, [r1, #8]
    338a:	614b      	str	r3, [r1, #20]
    338c:	2301      	movs	r3, #1
    338e:	425b      	negs	r3, r3
    3390:	81cb      	strh	r3, [r1, #14]
    3392:	9a20      	ldr	r2, [sp, #128]	; 0x80
    3394:	ab21      	add	r3, sp, #132	; 0x84
    3396:	0028      	movs	r0, r5
    3398:	9301      	str	r3, [sp, #4]
    339a:	f000 f98f 	bl	36bc <_svfiprintf_r>
    339e:	1c43      	adds	r3, r0, #1
    33a0:	da01      	bge.n	33a6 <sniprintf+0x52>
    33a2:	238b      	movs	r3, #139	; 0x8b
    33a4:	602b      	str	r3, [r5, #0]
    33a6:	2c00      	cmp	r4, #0
    33a8:	d0df      	beq.n	336a <sniprintf+0x16>
    33aa:	2300      	movs	r3, #0
    33ac:	9a02      	ldr	r2, [sp, #8]
    33ae:	7013      	strb	r3, [r2, #0]
    33b0:	e7db      	b.n	336a <sniprintf+0x16>
    33b2:	46c0      	nop			; (mov r8, r8)
    33b4:	20000008 	.word	0x20000008

000033b8 <strlen>:
    33b8:	2300      	movs	r3, #0
    33ba:	5cc2      	ldrb	r2, [r0, r3]
    33bc:	3301      	adds	r3, #1
    33be:	2a00      	cmp	r2, #0
    33c0:	d1fb      	bne.n	33ba <strlen+0x2>
    33c2:	1e58      	subs	r0, r3, #1
    33c4:	4770      	bx	lr

000033c6 <strncmp>:
    33c6:	2300      	movs	r3, #0
    33c8:	b530      	push	{r4, r5, lr}
    33ca:	429a      	cmp	r2, r3
    33cc:	d00a      	beq.n	33e4 <strncmp+0x1e>
    33ce:	3a01      	subs	r2, #1
    33d0:	5cc4      	ldrb	r4, [r0, r3]
    33d2:	5ccd      	ldrb	r5, [r1, r3]
    33d4:	42ac      	cmp	r4, r5
    33d6:	d104      	bne.n	33e2 <strncmp+0x1c>
    33d8:	429a      	cmp	r2, r3
    33da:	d002      	beq.n	33e2 <strncmp+0x1c>
    33dc:	3301      	adds	r3, #1
    33de:	2c00      	cmp	r4, #0
    33e0:	d1f6      	bne.n	33d0 <strncmp+0xa>
    33e2:	1b63      	subs	r3, r4, r5
    33e4:	0018      	movs	r0, r3
    33e6:	bd30      	pop	{r4, r5, pc}

000033e8 <strtok>:
    33e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    33ea:	4b12      	ldr	r3, [pc, #72]	; (3434 <strtok+0x4c>)
    33ec:	0006      	movs	r6, r0
    33ee:	681d      	ldr	r5, [r3, #0]
    33f0:	000f      	movs	r7, r1
    33f2:	6dac      	ldr	r4, [r5, #88]	; 0x58
    33f4:	2c00      	cmp	r4, #0
    33f6:	d116      	bne.n	3426 <strtok+0x3e>
    33f8:	2050      	movs	r0, #80	; 0x50
    33fa:	f7ff fed5 	bl	31a8 <malloc>
    33fe:	65a8      	str	r0, [r5, #88]	; 0x58
    3400:	6004      	str	r4, [r0, #0]
    3402:	6044      	str	r4, [r0, #4]
    3404:	6084      	str	r4, [r0, #8]
    3406:	60c4      	str	r4, [r0, #12]
    3408:	6104      	str	r4, [r0, #16]
    340a:	6144      	str	r4, [r0, #20]
    340c:	6184      	str	r4, [r0, #24]
    340e:	6284      	str	r4, [r0, #40]	; 0x28
    3410:	62c4      	str	r4, [r0, #44]	; 0x2c
    3412:	6304      	str	r4, [r0, #48]	; 0x30
    3414:	6344      	str	r4, [r0, #52]	; 0x34
    3416:	6384      	str	r4, [r0, #56]	; 0x38
    3418:	63c4      	str	r4, [r0, #60]	; 0x3c
    341a:	6404      	str	r4, [r0, #64]	; 0x40
    341c:	6444      	str	r4, [r0, #68]	; 0x44
    341e:	6484      	str	r4, [r0, #72]	; 0x48
    3420:	64c4      	str	r4, [r0, #76]	; 0x4c
    3422:	7704      	strb	r4, [r0, #28]
    3424:	6244      	str	r4, [r0, #36]	; 0x24
    3426:	6daa      	ldr	r2, [r5, #88]	; 0x58
    3428:	0039      	movs	r1, r7
    342a:	0030      	movs	r0, r6
    342c:	2301      	movs	r3, #1
    342e:	f000 f803 	bl	3438 <__strtok_r>
    3432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3434:	20000008 	.word	0x20000008

00003438 <__strtok_r>:
    3438:	b5f0      	push	{r4, r5, r6, r7, lr}
    343a:	2800      	cmp	r0, #0
    343c:	d104      	bne.n	3448 <__strtok_r+0x10>
    343e:	6810      	ldr	r0, [r2, #0]
    3440:	2800      	cmp	r0, #0
    3442:	d101      	bne.n	3448 <__strtok_r+0x10>
    3444:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3446:	0020      	movs	r0, r4
    3448:	000e      	movs	r6, r1
    344a:	7805      	ldrb	r5, [r0, #0]
    344c:	1c44      	adds	r4, r0, #1
    344e:	7837      	ldrb	r7, [r6, #0]
    3450:	2f00      	cmp	r7, #0
    3452:	d104      	bne.n	345e <__strtok_r+0x26>
    3454:	2d00      	cmp	r5, #0
    3456:	d110      	bne.n	347a <__strtok_r+0x42>
    3458:	6015      	str	r5, [r2, #0]
    345a:	0028      	movs	r0, r5
    345c:	e7f2      	b.n	3444 <__strtok_r+0xc>
    345e:	3601      	adds	r6, #1
    3460:	42bd      	cmp	r5, r7
    3462:	d1f4      	bne.n	344e <__strtok_r+0x16>
    3464:	2b00      	cmp	r3, #0
    3466:	d1ee      	bne.n	3446 <__strtok_r+0xe>
    3468:	6014      	str	r4, [r2, #0]
    346a:	7003      	strb	r3, [r0, #0]
    346c:	e7ea      	b.n	3444 <__strtok_r+0xc>
    346e:	0033      	movs	r3, r6
    3470:	e00e      	b.n	3490 <__strtok_r+0x58>
    3472:	3501      	adds	r5, #1
    3474:	001c      	movs	r4, r3
    3476:	2f00      	cmp	r7, #0
    3478:	d102      	bne.n	3480 <__strtok_r+0x48>
    347a:	000d      	movs	r5, r1
    347c:	7826      	ldrb	r6, [r4, #0]
    347e:	1c63      	adds	r3, r4, #1
    3480:	782f      	ldrb	r7, [r5, #0]
    3482:	42be      	cmp	r6, r7
    3484:	d1f5      	bne.n	3472 <__strtok_r+0x3a>
    3486:	2e00      	cmp	r6, #0
    3488:	d0f1      	beq.n	346e <__strtok_r+0x36>
    348a:	2400      	movs	r4, #0
    348c:	1e59      	subs	r1, r3, #1
    348e:	700c      	strb	r4, [r1, #0]
    3490:	6013      	str	r3, [r2, #0]
    3492:	e7d7      	b.n	3444 <__strtok_r+0xc>

00003494 <_strtol_l.isra.0>:
    3494:	b5f0      	push	{r4, r5, r6, r7, lr}
    3496:	001f      	movs	r7, r3
    3498:	000e      	movs	r6, r1
    349a:	b087      	sub	sp, #28
    349c:	9005      	str	r0, [sp, #20]
    349e:	9103      	str	r1, [sp, #12]
    34a0:	9202      	str	r2, [sp, #8]
    34a2:	980c      	ldr	r0, [sp, #48]	; 0x30
    34a4:	7834      	ldrb	r4, [r6, #0]
    34a6:	f000 f88f 	bl	35c8 <__locale_ctype_ptr_l>
    34aa:	2208      	movs	r2, #8
    34ac:	1900      	adds	r0, r0, r4
    34ae:	7843      	ldrb	r3, [r0, #1]
    34b0:	1c75      	adds	r5, r6, #1
    34b2:	4013      	ands	r3, r2
    34b4:	d10c      	bne.n	34d0 <_strtol_l.isra.0+0x3c>
    34b6:	2c2d      	cmp	r4, #45	; 0x2d
    34b8:	d10c      	bne.n	34d4 <_strtol_l.isra.0+0x40>
    34ba:	3301      	adds	r3, #1
    34bc:	782c      	ldrb	r4, [r5, #0]
    34be:	9301      	str	r3, [sp, #4]
    34c0:	1cb5      	adds	r5, r6, #2
    34c2:	2f00      	cmp	r7, #0
    34c4:	d00c      	beq.n	34e0 <_strtol_l.isra.0+0x4c>
    34c6:	2f10      	cmp	r7, #16
    34c8:	d114      	bne.n	34f4 <_strtol_l.isra.0+0x60>
    34ca:	2c30      	cmp	r4, #48	; 0x30
    34cc:	d00a      	beq.n	34e4 <_strtol_l.isra.0+0x50>
    34ce:	e011      	b.n	34f4 <_strtol_l.isra.0+0x60>
    34d0:	002e      	movs	r6, r5
    34d2:	e7e6      	b.n	34a2 <_strtol_l.isra.0+0xe>
    34d4:	9301      	str	r3, [sp, #4]
    34d6:	2c2b      	cmp	r4, #43	; 0x2b
    34d8:	d1f3      	bne.n	34c2 <_strtol_l.isra.0+0x2e>
    34da:	782c      	ldrb	r4, [r5, #0]
    34dc:	1cb5      	adds	r5, r6, #2
    34de:	e7f0      	b.n	34c2 <_strtol_l.isra.0+0x2e>
    34e0:	2c30      	cmp	r4, #48	; 0x30
    34e2:	d12f      	bne.n	3544 <_strtol_l.isra.0+0xb0>
    34e4:	2220      	movs	r2, #32
    34e6:	782b      	ldrb	r3, [r5, #0]
    34e8:	4393      	bics	r3, r2
    34ea:	2b58      	cmp	r3, #88	; 0x58
    34ec:	d151      	bne.n	3592 <_strtol_l.isra.0+0xfe>
    34ee:	2710      	movs	r7, #16
    34f0:	786c      	ldrb	r4, [r5, #1]
    34f2:	3502      	adds	r5, #2
    34f4:	9b01      	ldr	r3, [sp, #4]
    34f6:	4a29      	ldr	r2, [pc, #164]	; (359c <_strtol_l.isra.0+0x108>)
    34f8:	0039      	movs	r1, r7
    34fa:	189e      	adds	r6, r3, r2
    34fc:	0030      	movs	r0, r6
    34fe:	f7ff fdf9 	bl	30f4 <__aeabi_uidivmod>
    3502:	0030      	movs	r0, r6
    3504:	9104      	str	r1, [sp, #16]
    3506:	0039      	movs	r1, r7
    3508:	f7ff fd6e 	bl	2fe8 <__udivsi3>
    350c:	2101      	movs	r1, #1
    350e:	2300      	movs	r3, #0
    3510:	4249      	negs	r1, r1
    3512:	0002      	movs	r2, r0
    3514:	468c      	mov	ip, r1
    3516:	0018      	movs	r0, r3
    3518:	0021      	movs	r1, r4
    351a:	3930      	subs	r1, #48	; 0x30
    351c:	2909      	cmp	r1, #9
    351e:	d813      	bhi.n	3548 <_strtol_l.isra.0+0xb4>
    3520:	000c      	movs	r4, r1
    3522:	42a7      	cmp	r7, r4
    3524:	dd1c      	ble.n	3560 <_strtol_l.isra.0+0xcc>
    3526:	1c59      	adds	r1, r3, #1
    3528:	d009      	beq.n	353e <_strtol_l.isra.0+0xaa>
    352a:	4663      	mov	r3, ip
    352c:	4282      	cmp	r2, r0
    352e:	d306      	bcc.n	353e <_strtol_l.isra.0+0xaa>
    3530:	d102      	bne.n	3538 <_strtol_l.isra.0+0xa4>
    3532:	9904      	ldr	r1, [sp, #16]
    3534:	42a1      	cmp	r1, r4
    3536:	db02      	blt.n	353e <_strtol_l.isra.0+0xaa>
    3538:	2301      	movs	r3, #1
    353a:	4378      	muls	r0, r7
    353c:	1820      	adds	r0, r4, r0
    353e:	782c      	ldrb	r4, [r5, #0]
    3540:	3501      	adds	r5, #1
    3542:	e7e9      	b.n	3518 <_strtol_l.isra.0+0x84>
    3544:	270a      	movs	r7, #10
    3546:	e7d5      	b.n	34f4 <_strtol_l.isra.0+0x60>
    3548:	0021      	movs	r1, r4
    354a:	3941      	subs	r1, #65	; 0x41
    354c:	2919      	cmp	r1, #25
    354e:	d801      	bhi.n	3554 <_strtol_l.isra.0+0xc0>
    3550:	3c37      	subs	r4, #55	; 0x37
    3552:	e7e6      	b.n	3522 <_strtol_l.isra.0+0x8e>
    3554:	0021      	movs	r1, r4
    3556:	3961      	subs	r1, #97	; 0x61
    3558:	2919      	cmp	r1, #25
    355a:	d801      	bhi.n	3560 <_strtol_l.isra.0+0xcc>
    355c:	3c57      	subs	r4, #87	; 0x57
    355e:	e7e0      	b.n	3522 <_strtol_l.isra.0+0x8e>
    3560:	1c5a      	adds	r2, r3, #1
    3562:	d108      	bne.n	3576 <_strtol_l.isra.0+0xe2>
    3564:	9a05      	ldr	r2, [sp, #20]
    3566:	3323      	adds	r3, #35	; 0x23
    3568:	6013      	str	r3, [r2, #0]
    356a:	9b02      	ldr	r3, [sp, #8]
    356c:	0030      	movs	r0, r6
    356e:	2b00      	cmp	r3, #0
    3570:	d10b      	bne.n	358a <_strtol_l.isra.0+0xf6>
    3572:	b007      	add	sp, #28
    3574:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3576:	9a01      	ldr	r2, [sp, #4]
    3578:	2a00      	cmp	r2, #0
    357a:	d000      	beq.n	357e <_strtol_l.isra.0+0xea>
    357c:	4240      	negs	r0, r0
    357e:	9a02      	ldr	r2, [sp, #8]
    3580:	2a00      	cmp	r2, #0
    3582:	d0f6      	beq.n	3572 <_strtol_l.isra.0+0xde>
    3584:	9a03      	ldr	r2, [sp, #12]
    3586:	2b00      	cmp	r3, #0
    3588:	d000      	beq.n	358c <_strtol_l.isra.0+0xf8>
    358a:	1e6a      	subs	r2, r5, #1
    358c:	9b02      	ldr	r3, [sp, #8]
    358e:	601a      	str	r2, [r3, #0]
    3590:	e7ef      	b.n	3572 <_strtol_l.isra.0+0xde>
    3592:	2430      	movs	r4, #48	; 0x30
    3594:	2f00      	cmp	r7, #0
    3596:	d1ad      	bne.n	34f4 <_strtol_l.isra.0+0x60>
    3598:	3708      	adds	r7, #8
    359a:	e7ab      	b.n	34f4 <_strtol_l.isra.0+0x60>
    359c:	7fffffff 	.word	0x7fffffff

000035a0 <strtol>:
    35a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    35a2:	0013      	movs	r3, r2
    35a4:	4a06      	ldr	r2, [pc, #24]	; (35c0 <strtol+0x20>)
    35a6:	0005      	movs	r5, r0
    35a8:	6810      	ldr	r0, [r2, #0]
    35aa:	6a04      	ldr	r4, [r0, #32]
    35ac:	2c00      	cmp	r4, #0
    35ae:	d100      	bne.n	35b2 <strtol+0x12>
    35b0:	4c04      	ldr	r4, [pc, #16]	; (35c4 <strtol+0x24>)
    35b2:	000a      	movs	r2, r1
    35b4:	9400      	str	r4, [sp, #0]
    35b6:	0029      	movs	r1, r5
    35b8:	f7ff ff6c 	bl	3494 <_strtol_l.isra.0>
    35bc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    35be:	46c0      	nop			; (mov r8, r8)
    35c0:	20000008 	.word	0x20000008
    35c4:	2000006c 	.word	0x2000006c

000035c8 <__locale_ctype_ptr_l>:
    35c8:	30ec      	adds	r0, #236	; 0xec
    35ca:	6800      	ldr	r0, [r0, #0]
    35cc:	4770      	bx	lr

000035ce <__ascii_mbtowc>:
    35ce:	b082      	sub	sp, #8
    35d0:	2900      	cmp	r1, #0
    35d2:	d100      	bne.n	35d6 <__ascii_mbtowc+0x8>
    35d4:	a901      	add	r1, sp, #4
    35d6:	1e10      	subs	r0, r2, #0
    35d8:	d006      	beq.n	35e8 <__ascii_mbtowc+0x1a>
    35da:	2b00      	cmp	r3, #0
    35dc:	d006      	beq.n	35ec <__ascii_mbtowc+0x1e>
    35de:	7813      	ldrb	r3, [r2, #0]
    35e0:	600b      	str	r3, [r1, #0]
    35e2:	7810      	ldrb	r0, [r2, #0]
    35e4:	1e43      	subs	r3, r0, #1
    35e6:	4198      	sbcs	r0, r3
    35e8:	b002      	add	sp, #8
    35ea:	4770      	bx	lr
    35ec:	2002      	movs	r0, #2
    35ee:	4240      	negs	r0, r0
    35f0:	e7fa      	b.n	35e8 <__ascii_mbtowc+0x1a>

000035f2 <__malloc_lock>:
    35f2:	4770      	bx	lr

000035f4 <__malloc_unlock>:
    35f4:	4770      	bx	lr
	...

000035f8 <__ssputs_r>:
    35f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    35fa:	688e      	ldr	r6, [r1, #8]
    35fc:	b085      	sub	sp, #20
    35fe:	0007      	movs	r7, r0
    3600:	000c      	movs	r4, r1
    3602:	9203      	str	r2, [sp, #12]
    3604:	9301      	str	r3, [sp, #4]
    3606:	429e      	cmp	r6, r3
    3608:	d839      	bhi.n	367e <__ssputs_r+0x86>
    360a:	2390      	movs	r3, #144	; 0x90
    360c:	898a      	ldrh	r2, [r1, #12]
    360e:	00db      	lsls	r3, r3, #3
    3610:	421a      	tst	r2, r3
    3612:	d034      	beq.n	367e <__ssputs_r+0x86>
    3614:	2503      	movs	r5, #3
    3616:	6909      	ldr	r1, [r1, #16]
    3618:	6823      	ldr	r3, [r4, #0]
    361a:	1a5b      	subs	r3, r3, r1
    361c:	9302      	str	r3, [sp, #8]
    361e:	6963      	ldr	r3, [r4, #20]
    3620:	9802      	ldr	r0, [sp, #8]
    3622:	435d      	muls	r5, r3
    3624:	0feb      	lsrs	r3, r5, #31
    3626:	195d      	adds	r5, r3, r5
    3628:	9b01      	ldr	r3, [sp, #4]
    362a:	106d      	asrs	r5, r5, #1
    362c:	3301      	adds	r3, #1
    362e:	181b      	adds	r3, r3, r0
    3630:	42ab      	cmp	r3, r5
    3632:	d900      	bls.n	3636 <__ssputs_r+0x3e>
    3634:	001d      	movs	r5, r3
    3636:	0553      	lsls	r3, r2, #21
    3638:	d532      	bpl.n	36a0 <__ssputs_r+0xa8>
    363a:	0029      	movs	r1, r5
    363c:	0038      	movs	r0, r7
    363e:	f7ff fe19 	bl	3274 <_malloc_r>
    3642:	1e06      	subs	r6, r0, #0
    3644:	d109      	bne.n	365a <__ssputs_r+0x62>
    3646:	230c      	movs	r3, #12
    3648:	603b      	str	r3, [r7, #0]
    364a:	2340      	movs	r3, #64	; 0x40
    364c:	2001      	movs	r0, #1
    364e:	89a2      	ldrh	r2, [r4, #12]
    3650:	4240      	negs	r0, r0
    3652:	4313      	orrs	r3, r2
    3654:	81a3      	strh	r3, [r4, #12]
    3656:	b005      	add	sp, #20
    3658:	bdf0      	pop	{r4, r5, r6, r7, pc}
    365a:	9a02      	ldr	r2, [sp, #8]
    365c:	6921      	ldr	r1, [r4, #16]
    365e:	f7ff fdad 	bl	31bc <memcpy>
    3662:	89a3      	ldrh	r3, [r4, #12]
    3664:	4a14      	ldr	r2, [pc, #80]	; (36b8 <__ssputs_r+0xc0>)
    3666:	401a      	ands	r2, r3
    3668:	2380      	movs	r3, #128	; 0x80
    366a:	4313      	orrs	r3, r2
    366c:	81a3      	strh	r3, [r4, #12]
    366e:	9b02      	ldr	r3, [sp, #8]
    3670:	6126      	str	r6, [r4, #16]
    3672:	18f6      	adds	r6, r6, r3
    3674:	6026      	str	r6, [r4, #0]
    3676:	6165      	str	r5, [r4, #20]
    3678:	9e01      	ldr	r6, [sp, #4]
    367a:	1aed      	subs	r5, r5, r3
    367c:	60a5      	str	r5, [r4, #8]
    367e:	9b01      	ldr	r3, [sp, #4]
    3680:	42b3      	cmp	r3, r6
    3682:	d200      	bcs.n	3686 <__ssputs_r+0x8e>
    3684:	001e      	movs	r6, r3
    3686:	0032      	movs	r2, r6
    3688:	9903      	ldr	r1, [sp, #12]
    368a:	6820      	ldr	r0, [r4, #0]
    368c:	f000 fab9 	bl	3c02 <memmove>
    3690:	68a3      	ldr	r3, [r4, #8]
    3692:	2000      	movs	r0, #0
    3694:	1b9b      	subs	r3, r3, r6
    3696:	60a3      	str	r3, [r4, #8]
    3698:	6823      	ldr	r3, [r4, #0]
    369a:	199e      	adds	r6, r3, r6
    369c:	6026      	str	r6, [r4, #0]
    369e:	e7da      	b.n	3656 <__ssputs_r+0x5e>
    36a0:	002a      	movs	r2, r5
    36a2:	0038      	movs	r0, r7
    36a4:	f000 fabf 	bl	3c26 <_realloc_r>
    36a8:	1e06      	subs	r6, r0, #0
    36aa:	d1e0      	bne.n	366e <__ssputs_r+0x76>
    36ac:	6921      	ldr	r1, [r4, #16]
    36ae:	0038      	movs	r0, r7
    36b0:	f7ff fd96 	bl	31e0 <_free_r>
    36b4:	e7c7      	b.n	3646 <__ssputs_r+0x4e>
    36b6:	46c0      	nop			; (mov r8, r8)
    36b8:	fffffb7f 	.word	0xfffffb7f

000036bc <_svfiprintf_r>:
    36bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    36be:	b09f      	sub	sp, #124	; 0x7c
    36c0:	9002      	str	r0, [sp, #8]
    36c2:	9305      	str	r3, [sp, #20]
    36c4:	898b      	ldrh	r3, [r1, #12]
    36c6:	000f      	movs	r7, r1
    36c8:	0016      	movs	r6, r2
    36ca:	061b      	lsls	r3, r3, #24
    36cc:	d511      	bpl.n	36f2 <_svfiprintf_r+0x36>
    36ce:	690b      	ldr	r3, [r1, #16]
    36d0:	2b00      	cmp	r3, #0
    36d2:	d10e      	bne.n	36f2 <_svfiprintf_r+0x36>
    36d4:	2140      	movs	r1, #64	; 0x40
    36d6:	f7ff fdcd 	bl	3274 <_malloc_r>
    36da:	6038      	str	r0, [r7, #0]
    36dc:	6138      	str	r0, [r7, #16]
    36de:	2800      	cmp	r0, #0
    36e0:	d105      	bne.n	36ee <_svfiprintf_r+0x32>
    36e2:	230c      	movs	r3, #12
    36e4:	9a02      	ldr	r2, [sp, #8]
    36e6:	3801      	subs	r0, #1
    36e8:	6013      	str	r3, [r2, #0]
    36ea:	b01f      	add	sp, #124	; 0x7c
    36ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    36ee:	2340      	movs	r3, #64	; 0x40
    36f0:	617b      	str	r3, [r7, #20]
    36f2:	2300      	movs	r3, #0
    36f4:	ad06      	add	r5, sp, #24
    36f6:	616b      	str	r3, [r5, #20]
    36f8:	3320      	adds	r3, #32
    36fa:	766b      	strb	r3, [r5, #25]
    36fc:	3310      	adds	r3, #16
    36fe:	76ab      	strb	r3, [r5, #26]
    3700:	0034      	movs	r4, r6
    3702:	7823      	ldrb	r3, [r4, #0]
    3704:	2b00      	cmp	r3, #0
    3706:	d147      	bne.n	3798 <_svfiprintf_r+0xdc>
    3708:	1ba3      	subs	r3, r4, r6
    370a:	9304      	str	r3, [sp, #16]
    370c:	d00d      	beq.n	372a <_svfiprintf_r+0x6e>
    370e:	1ba3      	subs	r3, r4, r6
    3710:	0032      	movs	r2, r6
    3712:	0039      	movs	r1, r7
    3714:	9802      	ldr	r0, [sp, #8]
    3716:	f7ff ff6f 	bl	35f8 <__ssputs_r>
    371a:	1c43      	adds	r3, r0, #1
    371c:	d100      	bne.n	3720 <_svfiprintf_r+0x64>
    371e:	e0b5      	b.n	388c <_svfiprintf_r+0x1d0>
    3720:	696a      	ldr	r2, [r5, #20]
    3722:	9b04      	ldr	r3, [sp, #16]
    3724:	4694      	mov	ip, r2
    3726:	4463      	add	r3, ip
    3728:	616b      	str	r3, [r5, #20]
    372a:	7823      	ldrb	r3, [r4, #0]
    372c:	2b00      	cmp	r3, #0
    372e:	d100      	bne.n	3732 <_svfiprintf_r+0x76>
    3730:	e0ac      	b.n	388c <_svfiprintf_r+0x1d0>
    3732:	2201      	movs	r2, #1
    3734:	2300      	movs	r3, #0
    3736:	4252      	negs	r2, r2
    3738:	606a      	str	r2, [r5, #4]
    373a:	a902      	add	r1, sp, #8
    373c:	3254      	adds	r2, #84	; 0x54
    373e:	1852      	adds	r2, r2, r1
    3740:	3401      	adds	r4, #1
    3742:	602b      	str	r3, [r5, #0]
    3744:	60eb      	str	r3, [r5, #12]
    3746:	60ab      	str	r3, [r5, #8]
    3748:	7013      	strb	r3, [r2, #0]
    374a:	65ab      	str	r3, [r5, #88]	; 0x58
    374c:	4e58      	ldr	r6, [pc, #352]	; (38b0 <_svfiprintf_r+0x1f4>)
    374e:	2205      	movs	r2, #5
    3750:	7821      	ldrb	r1, [r4, #0]
    3752:	0030      	movs	r0, r6
    3754:	f000 fa4a 	bl	3bec <memchr>
    3758:	1c62      	adds	r2, r4, #1
    375a:	2800      	cmp	r0, #0
    375c:	d120      	bne.n	37a0 <_svfiprintf_r+0xe4>
    375e:	6829      	ldr	r1, [r5, #0]
    3760:	06cb      	lsls	r3, r1, #27
    3762:	d504      	bpl.n	376e <_svfiprintf_r+0xb2>
    3764:	2353      	movs	r3, #83	; 0x53
    3766:	ae02      	add	r6, sp, #8
    3768:	3020      	adds	r0, #32
    376a:	199b      	adds	r3, r3, r6
    376c:	7018      	strb	r0, [r3, #0]
    376e:	070b      	lsls	r3, r1, #28
    3770:	d504      	bpl.n	377c <_svfiprintf_r+0xc0>
    3772:	2353      	movs	r3, #83	; 0x53
    3774:	202b      	movs	r0, #43	; 0x2b
    3776:	ae02      	add	r6, sp, #8
    3778:	199b      	adds	r3, r3, r6
    377a:	7018      	strb	r0, [r3, #0]
    377c:	7823      	ldrb	r3, [r4, #0]
    377e:	2b2a      	cmp	r3, #42	; 0x2a
    3780:	d016      	beq.n	37b0 <_svfiprintf_r+0xf4>
    3782:	2000      	movs	r0, #0
    3784:	210a      	movs	r1, #10
    3786:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3788:	7822      	ldrb	r2, [r4, #0]
    378a:	3a30      	subs	r2, #48	; 0x30
    378c:	2a09      	cmp	r2, #9
    378e:	d955      	bls.n	383c <_svfiprintf_r+0x180>
    3790:	2800      	cmp	r0, #0
    3792:	d015      	beq.n	37c0 <_svfiprintf_r+0x104>
    3794:	9309      	str	r3, [sp, #36]	; 0x24
    3796:	e013      	b.n	37c0 <_svfiprintf_r+0x104>
    3798:	2b25      	cmp	r3, #37	; 0x25
    379a:	d0b5      	beq.n	3708 <_svfiprintf_r+0x4c>
    379c:	3401      	adds	r4, #1
    379e:	e7b0      	b.n	3702 <_svfiprintf_r+0x46>
    37a0:	2301      	movs	r3, #1
    37a2:	1b80      	subs	r0, r0, r6
    37a4:	4083      	lsls	r3, r0
    37a6:	6829      	ldr	r1, [r5, #0]
    37a8:	0014      	movs	r4, r2
    37aa:	430b      	orrs	r3, r1
    37ac:	602b      	str	r3, [r5, #0]
    37ae:	e7cd      	b.n	374c <_svfiprintf_r+0x90>
    37b0:	9b05      	ldr	r3, [sp, #20]
    37b2:	1d18      	adds	r0, r3, #4
    37b4:	681b      	ldr	r3, [r3, #0]
    37b6:	9005      	str	r0, [sp, #20]
    37b8:	2b00      	cmp	r3, #0
    37ba:	db39      	blt.n	3830 <_svfiprintf_r+0x174>
    37bc:	9309      	str	r3, [sp, #36]	; 0x24
    37be:	0014      	movs	r4, r2
    37c0:	7823      	ldrb	r3, [r4, #0]
    37c2:	2b2e      	cmp	r3, #46	; 0x2e
    37c4:	d10b      	bne.n	37de <_svfiprintf_r+0x122>
    37c6:	7863      	ldrb	r3, [r4, #1]
    37c8:	1c62      	adds	r2, r4, #1
    37ca:	2b2a      	cmp	r3, #42	; 0x2a
    37cc:	d13e      	bne.n	384c <_svfiprintf_r+0x190>
    37ce:	9b05      	ldr	r3, [sp, #20]
    37d0:	3402      	adds	r4, #2
    37d2:	1d1a      	adds	r2, r3, #4
    37d4:	681b      	ldr	r3, [r3, #0]
    37d6:	9205      	str	r2, [sp, #20]
    37d8:	2b00      	cmp	r3, #0
    37da:	db34      	blt.n	3846 <_svfiprintf_r+0x18a>
    37dc:	9307      	str	r3, [sp, #28]
    37de:	4e35      	ldr	r6, [pc, #212]	; (38b4 <_svfiprintf_r+0x1f8>)
    37e0:	7821      	ldrb	r1, [r4, #0]
    37e2:	2203      	movs	r2, #3
    37e4:	0030      	movs	r0, r6
    37e6:	f000 fa01 	bl	3bec <memchr>
    37ea:	2800      	cmp	r0, #0
    37ec:	d006      	beq.n	37fc <_svfiprintf_r+0x140>
    37ee:	2340      	movs	r3, #64	; 0x40
    37f0:	1b80      	subs	r0, r0, r6
    37f2:	4083      	lsls	r3, r0
    37f4:	682a      	ldr	r2, [r5, #0]
    37f6:	3401      	adds	r4, #1
    37f8:	4313      	orrs	r3, r2
    37fa:	602b      	str	r3, [r5, #0]
    37fc:	7821      	ldrb	r1, [r4, #0]
    37fe:	2206      	movs	r2, #6
    3800:	482d      	ldr	r0, [pc, #180]	; (38b8 <_svfiprintf_r+0x1fc>)
    3802:	1c66      	adds	r6, r4, #1
    3804:	7629      	strb	r1, [r5, #24]
    3806:	f000 f9f1 	bl	3bec <memchr>
    380a:	2800      	cmp	r0, #0
    380c:	d046      	beq.n	389c <_svfiprintf_r+0x1e0>
    380e:	4b2b      	ldr	r3, [pc, #172]	; (38bc <_svfiprintf_r+0x200>)
    3810:	2b00      	cmp	r3, #0
    3812:	d12f      	bne.n	3874 <_svfiprintf_r+0x1b8>
    3814:	6829      	ldr	r1, [r5, #0]
    3816:	9b05      	ldr	r3, [sp, #20]
    3818:	2207      	movs	r2, #7
    381a:	05c9      	lsls	r1, r1, #23
    381c:	d528      	bpl.n	3870 <_svfiprintf_r+0x1b4>
    381e:	189b      	adds	r3, r3, r2
    3820:	4393      	bics	r3, r2
    3822:	3308      	adds	r3, #8
    3824:	9305      	str	r3, [sp, #20]
    3826:	696b      	ldr	r3, [r5, #20]
    3828:	9a03      	ldr	r2, [sp, #12]
    382a:	189b      	adds	r3, r3, r2
    382c:	616b      	str	r3, [r5, #20]
    382e:	e767      	b.n	3700 <_svfiprintf_r+0x44>
    3830:	425b      	negs	r3, r3
    3832:	60eb      	str	r3, [r5, #12]
    3834:	2302      	movs	r3, #2
    3836:	430b      	orrs	r3, r1
    3838:	602b      	str	r3, [r5, #0]
    383a:	e7c0      	b.n	37be <_svfiprintf_r+0x102>
    383c:	434b      	muls	r3, r1
    383e:	3401      	adds	r4, #1
    3840:	189b      	adds	r3, r3, r2
    3842:	2001      	movs	r0, #1
    3844:	e7a0      	b.n	3788 <_svfiprintf_r+0xcc>
    3846:	2301      	movs	r3, #1
    3848:	425b      	negs	r3, r3
    384a:	e7c7      	b.n	37dc <_svfiprintf_r+0x120>
    384c:	2300      	movs	r3, #0
    384e:	0014      	movs	r4, r2
    3850:	200a      	movs	r0, #10
    3852:	001a      	movs	r2, r3
    3854:	606b      	str	r3, [r5, #4]
    3856:	7821      	ldrb	r1, [r4, #0]
    3858:	3930      	subs	r1, #48	; 0x30
    385a:	2909      	cmp	r1, #9
    385c:	d903      	bls.n	3866 <_svfiprintf_r+0x1aa>
    385e:	2b00      	cmp	r3, #0
    3860:	d0bd      	beq.n	37de <_svfiprintf_r+0x122>
    3862:	9207      	str	r2, [sp, #28]
    3864:	e7bb      	b.n	37de <_svfiprintf_r+0x122>
    3866:	4342      	muls	r2, r0
    3868:	3401      	adds	r4, #1
    386a:	1852      	adds	r2, r2, r1
    386c:	2301      	movs	r3, #1
    386e:	e7f2      	b.n	3856 <_svfiprintf_r+0x19a>
    3870:	3307      	adds	r3, #7
    3872:	e7d5      	b.n	3820 <_svfiprintf_r+0x164>
    3874:	ab05      	add	r3, sp, #20
    3876:	9300      	str	r3, [sp, #0]
    3878:	003a      	movs	r2, r7
    387a:	4b11      	ldr	r3, [pc, #68]	; (38c0 <_svfiprintf_r+0x204>)
    387c:	0029      	movs	r1, r5
    387e:	9802      	ldr	r0, [sp, #8]
    3880:	e000      	b.n	3884 <_svfiprintf_r+0x1c8>
    3882:	bf00      	nop
    3884:	9003      	str	r0, [sp, #12]
    3886:	9b03      	ldr	r3, [sp, #12]
    3888:	3301      	adds	r3, #1
    388a:	d1cc      	bne.n	3826 <_svfiprintf_r+0x16a>
    388c:	89bb      	ldrh	r3, [r7, #12]
    388e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3890:	065b      	lsls	r3, r3, #25
    3892:	d400      	bmi.n	3896 <_svfiprintf_r+0x1da>
    3894:	e729      	b.n	36ea <_svfiprintf_r+0x2e>
    3896:	2001      	movs	r0, #1
    3898:	4240      	negs	r0, r0
    389a:	e726      	b.n	36ea <_svfiprintf_r+0x2e>
    389c:	ab05      	add	r3, sp, #20
    389e:	9300      	str	r3, [sp, #0]
    38a0:	003a      	movs	r2, r7
    38a2:	4b07      	ldr	r3, [pc, #28]	; (38c0 <_svfiprintf_r+0x204>)
    38a4:	0029      	movs	r1, r5
    38a6:	9802      	ldr	r0, [sp, #8]
    38a8:	f000 f87a 	bl	39a0 <_printf_i>
    38ac:	e7ea      	b.n	3884 <_svfiprintf_r+0x1c8>
    38ae:	46c0      	nop			; (mov r8, r8)
    38b0:	00003dba 	.word	0x00003dba
    38b4:	00003dc0 	.word	0x00003dc0
    38b8:	00003dc4 	.word	0x00003dc4
    38bc:	00000000 	.word	0x00000000
    38c0:	000035f9 	.word	0x000035f9

000038c4 <_printf_common>:
    38c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    38c6:	0015      	movs	r5, r2
    38c8:	9301      	str	r3, [sp, #4]
    38ca:	688a      	ldr	r2, [r1, #8]
    38cc:	690b      	ldr	r3, [r1, #16]
    38ce:	9000      	str	r0, [sp, #0]
    38d0:	000c      	movs	r4, r1
    38d2:	4293      	cmp	r3, r2
    38d4:	da00      	bge.n	38d8 <_printf_common+0x14>
    38d6:	0013      	movs	r3, r2
    38d8:	0022      	movs	r2, r4
    38da:	602b      	str	r3, [r5, #0]
    38dc:	3243      	adds	r2, #67	; 0x43
    38de:	7812      	ldrb	r2, [r2, #0]
    38e0:	2a00      	cmp	r2, #0
    38e2:	d001      	beq.n	38e8 <_printf_common+0x24>
    38e4:	3301      	adds	r3, #1
    38e6:	602b      	str	r3, [r5, #0]
    38e8:	6823      	ldr	r3, [r4, #0]
    38ea:	069b      	lsls	r3, r3, #26
    38ec:	d502      	bpl.n	38f4 <_printf_common+0x30>
    38ee:	682b      	ldr	r3, [r5, #0]
    38f0:	3302      	adds	r3, #2
    38f2:	602b      	str	r3, [r5, #0]
    38f4:	2706      	movs	r7, #6
    38f6:	6823      	ldr	r3, [r4, #0]
    38f8:	401f      	ands	r7, r3
    38fa:	d027      	beq.n	394c <_printf_common+0x88>
    38fc:	0023      	movs	r3, r4
    38fe:	3343      	adds	r3, #67	; 0x43
    3900:	781b      	ldrb	r3, [r3, #0]
    3902:	1e5a      	subs	r2, r3, #1
    3904:	4193      	sbcs	r3, r2
    3906:	6822      	ldr	r2, [r4, #0]
    3908:	0692      	lsls	r2, r2, #26
    390a:	d430      	bmi.n	396e <_printf_common+0xaa>
    390c:	0022      	movs	r2, r4
    390e:	9901      	ldr	r1, [sp, #4]
    3910:	3243      	adds	r2, #67	; 0x43
    3912:	9800      	ldr	r0, [sp, #0]
    3914:	9e08      	ldr	r6, [sp, #32]
    3916:	47b0      	blx	r6
    3918:	1c43      	adds	r3, r0, #1
    391a:	d025      	beq.n	3968 <_printf_common+0xa4>
    391c:	2306      	movs	r3, #6
    391e:	6820      	ldr	r0, [r4, #0]
    3920:	682a      	ldr	r2, [r5, #0]
    3922:	68e1      	ldr	r1, [r4, #12]
    3924:	4003      	ands	r3, r0
    3926:	2500      	movs	r5, #0
    3928:	2b04      	cmp	r3, #4
    392a:	d103      	bne.n	3934 <_printf_common+0x70>
    392c:	1a8d      	subs	r5, r1, r2
    392e:	43eb      	mvns	r3, r5
    3930:	17db      	asrs	r3, r3, #31
    3932:	401d      	ands	r5, r3
    3934:	68a3      	ldr	r3, [r4, #8]
    3936:	6922      	ldr	r2, [r4, #16]
    3938:	4293      	cmp	r3, r2
    393a:	dd01      	ble.n	3940 <_printf_common+0x7c>
    393c:	1a9b      	subs	r3, r3, r2
    393e:	18ed      	adds	r5, r5, r3
    3940:	2700      	movs	r7, #0
    3942:	42bd      	cmp	r5, r7
    3944:	d120      	bne.n	3988 <_printf_common+0xc4>
    3946:	2000      	movs	r0, #0
    3948:	e010      	b.n	396c <_printf_common+0xa8>
    394a:	3701      	adds	r7, #1
    394c:	68e3      	ldr	r3, [r4, #12]
    394e:	682a      	ldr	r2, [r5, #0]
    3950:	1a9b      	subs	r3, r3, r2
    3952:	429f      	cmp	r7, r3
    3954:	dad2      	bge.n	38fc <_printf_common+0x38>
    3956:	0022      	movs	r2, r4
    3958:	2301      	movs	r3, #1
    395a:	3219      	adds	r2, #25
    395c:	9901      	ldr	r1, [sp, #4]
    395e:	9800      	ldr	r0, [sp, #0]
    3960:	9e08      	ldr	r6, [sp, #32]
    3962:	47b0      	blx	r6
    3964:	1c43      	adds	r3, r0, #1
    3966:	d1f0      	bne.n	394a <_printf_common+0x86>
    3968:	2001      	movs	r0, #1
    396a:	4240      	negs	r0, r0
    396c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    396e:	2030      	movs	r0, #48	; 0x30
    3970:	18e1      	adds	r1, r4, r3
    3972:	3143      	adds	r1, #67	; 0x43
    3974:	7008      	strb	r0, [r1, #0]
    3976:	0021      	movs	r1, r4
    3978:	1c5a      	adds	r2, r3, #1
    397a:	3145      	adds	r1, #69	; 0x45
    397c:	7809      	ldrb	r1, [r1, #0]
    397e:	18a2      	adds	r2, r4, r2
    3980:	3243      	adds	r2, #67	; 0x43
    3982:	3302      	adds	r3, #2
    3984:	7011      	strb	r1, [r2, #0]
    3986:	e7c1      	b.n	390c <_printf_common+0x48>
    3988:	0022      	movs	r2, r4
    398a:	2301      	movs	r3, #1
    398c:	321a      	adds	r2, #26
    398e:	9901      	ldr	r1, [sp, #4]
    3990:	9800      	ldr	r0, [sp, #0]
    3992:	9e08      	ldr	r6, [sp, #32]
    3994:	47b0      	blx	r6
    3996:	1c43      	adds	r3, r0, #1
    3998:	d0e6      	beq.n	3968 <_printf_common+0xa4>
    399a:	3701      	adds	r7, #1
    399c:	e7d1      	b.n	3942 <_printf_common+0x7e>
	...

000039a0 <_printf_i>:
    39a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    39a2:	b08b      	sub	sp, #44	; 0x2c
    39a4:	9206      	str	r2, [sp, #24]
    39a6:	000a      	movs	r2, r1
    39a8:	3243      	adds	r2, #67	; 0x43
    39aa:	9307      	str	r3, [sp, #28]
    39ac:	9005      	str	r0, [sp, #20]
    39ae:	9204      	str	r2, [sp, #16]
    39b0:	7e0a      	ldrb	r2, [r1, #24]
    39b2:	000c      	movs	r4, r1
    39b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    39b6:	2a6e      	cmp	r2, #110	; 0x6e
    39b8:	d100      	bne.n	39bc <_printf_i+0x1c>
    39ba:	e08f      	b.n	3adc <_printf_i+0x13c>
    39bc:	d817      	bhi.n	39ee <_printf_i+0x4e>
    39be:	2a63      	cmp	r2, #99	; 0x63
    39c0:	d02c      	beq.n	3a1c <_printf_i+0x7c>
    39c2:	d808      	bhi.n	39d6 <_printf_i+0x36>
    39c4:	2a00      	cmp	r2, #0
    39c6:	d100      	bne.n	39ca <_printf_i+0x2a>
    39c8:	e099      	b.n	3afe <_printf_i+0x15e>
    39ca:	2a58      	cmp	r2, #88	; 0x58
    39cc:	d054      	beq.n	3a78 <_printf_i+0xd8>
    39ce:	0026      	movs	r6, r4
    39d0:	3642      	adds	r6, #66	; 0x42
    39d2:	7032      	strb	r2, [r6, #0]
    39d4:	e029      	b.n	3a2a <_printf_i+0x8a>
    39d6:	2a64      	cmp	r2, #100	; 0x64
    39d8:	d001      	beq.n	39de <_printf_i+0x3e>
    39da:	2a69      	cmp	r2, #105	; 0x69
    39dc:	d1f7      	bne.n	39ce <_printf_i+0x2e>
    39de:	6821      	ldr	r1, [r4, #0]
    39e0:	681a      	ldr	r2, [r3, #0]
    39e2:	0608      	lsls	r0, r1, #24
    39e4:	d523      	bpl.n	3a2e <_printf_i+0x8e>
    39e6:	1d11      	adds	r1, r2, #4
    39e8:	6019      	str	r1, [r3, #0]
    39ea:	6815      	ldr	r5, [r2, #0]
    39ec:	e025      	b.n	3a3a <_printf_i+0x9a>
    39ee:	2a73      	cmp	r2, #115	; 0x73
    39f0:	d100      	bne.n	39f4 <_printf_i+0x54>
    39f2:	e088      	b.n	3b06 <_printf_i+0x166>
    39f4:	d808      	bhi.n	3a08 <_printf_i+0x68>
    39f6:	2a6f      	cmp	r2, #111	; 0x6f
    39f8:	d029      	beq.n	3a4e <_printf_i+0xae>
    39fa:	2a70      	cmp	r2, #112	; 0x70
    39fc:	d1e7      	bne.n	39ce <_printf_i+0x2e>
    39fe:	2220      	movs	r2, #32
    3a00:	6809      	ldr	r1, [r1, #0]
    3a02:	430a      	orrs	r2, r1
    3a04:	6022      	str	r2, [r4, #0]
    3a06:	e003      	b.n	3a10 <_printf_i+0x70>
    3a08:	2a75      	cmp	r2, #117	; 0x75
    3a0a:	d020      	beq.n	3a4e <_printf_i+0xae>
    3a0c:	2a78      	cmp	r2, #120	; 0x78
    3a0e:	d1de      	bne.n	39ce <_printf_i+0x2e>
    3a10:	0022      	movs	r2, r4
    3a12:	2178      	movs	r1, #120	; 0x78
    3a14:	3245      	adds	r2, #69	; 0x45
    3a16:	7011      	strb	r1, [r2, #0]
    3a18:	4a6c      	ldr	r2, [pc, #432]	; (3bcc <_printf_i+0x22c>)
    3a1a:	e030      	b.n	3a7e <_printf_i+0xde>
    3a1c:	000e      	movs	r6, r1
    3a1e:	681a      	ldr	r2, [r3, #0]
    3a20:	3642      	adds	r6, #66	; 0x42
    3a22:	1d11      	adds	r1, r2, #4
    3a24:	6019      	str	r1, [r3, #0]
    3a26:	6813      	ldr	r3, [r2, #0]
    3a28:	7033      	strb	r3, [r6, #0]
    3a2a:	2301      	movs	r3, #1
    3a2c:	e079      	b.n	3b22 <_printf_i+0x182>
    3a2e:	0649      	lsls	r1, r1, #25
    3a30:	d5d9      	bpl.n	39e6 <_printf_i+0x46>
    3a32:	1d11      	adds	r1, r2, #4
    3a34:	6019      	str	r1, [r3, #0]
    3a36:	2300      	movs	r3, #0
    3a38:	5ed5      	ldrsh	r5, [r2, r3]
    3a3a:	2d00      	cmp	r5, #0
    3a3c:	da03      	bge.n	3a46 <_printf_i+0xa6>
    3a3e:	232d      	movs	r3, #45	; 0x2d
    3a40:	9a04      	ldr	r2, [sp, #16]
    3a42:	426d      	negs	r5, r5
    3a44:	7013      	strb	r3, [r2, #0]
    3a46:	4b62      	ldr	r3, [pc, #392]	; (3bd0 <_printf_i+0x230>)
    3a48:	270a      	movs	r7, #10
    3a4a:	9303      	str	r3, [sp, #12]
    3a4c:	e02f      	b.n	3aae <_printf_i+0x10e>
    3a4e:	6820      	ldr	r0, [r4, #0]
    3a50:	6819      	ldr	r1, [r3, #0]
    3a52:	0605      	lsls	r5, r0, #24
    3a54:	d503      	bpl.n	3a5e <_printf_i+0xbe>
    3a56:	1d08      	adds	r0, r1, #4
    3a58:	6018      	str	r0, [r3, #0]
    3a5a:	680d      	ldr	r5, [r1, #0]
    3a5c:	e005      	b.n	3a6a <_printf_i+0xca>
    3a5e:	0640      	lsls	r0, r0, #25
    3a60:	d5f9      	bpl.n	3a56 <_printf_i+0xb6>
    3a62:	680d      	ldr	r5, [r1, #0]
    3a64:	1d08      	adds	r0, r1, #4
    3a66:	6018      	str	r0, [r3, #0]
    3a68:	b2ad      	uxth	r5, r5
    3a6a:	4b59      	ldr	r3, [pc, #356]	; (3bd0 <_printf_i+0x230>)
    3a6c:	2708      	movs	r7, #8
    3a6e:	9303      	str	r3, [sp, #12]
    3a70:	2a6f      	cmp	r2, #111	; 0x6f
    3a72:	d018      	beq.n	3aa6 <_printf_i+0x106>
    3a74:	270a      	movs	r7, #10
    3a76:	e016      	b.n	3aa6 <_printf_i+0x106>
    3a78:	3145      	adds	r1, #69	; 0x45
    3a7a:	700a      	strb	r2, [r1, #0]
    3a7c:	4a54      	ldr	r2, [pc, #336]	; (3bd0 <_printf_i+0x230>)
    3a7e:	9203      	str	r2, [sp, #12]
    3a80:	681a      	ldr	r2, [r3, #0]
    3a82:	6821      	ldr	r1, [r4, #0]
    3a84:	1d10      	adds	r0, r2, #4
    3a86:	6018      	str	r0, [r3, #0]
    3a88:	6815      	ldr	r5, [r2, #0]
    3a8a:	0608      	lsls	r0, r1, #24
    3a8c:	d522      	bpl.n	3ad4 <_printf_i+0x134>
    3a8e:	07cb      	lsls	r3, r1, #31
    3a90:	d502      	bpl.n	3a98 <_printf_i+0xf8>
    3a92:	2320      	movs	r3, #32
    3a94:	4319      	orrs	r1, r3
    3a96:	6021      	str	r1, [r4, #0]
    3a98:	2710      	movs	r7, #16
    3a9a:	2d00      	cmp	r5, #0
    3a9c:	d103      	bne.n	3aa6 <_printf_i+0x106>
    3a9e:	2320      	movs	r3, #32
    3aa0:	6822      	ldr	r2, [r4, #0]
    3aa2:	439a      	bics	r2, r3
    3aa4:	6022      	str	r2, [r4, #0]
    3aa6:	0023      	movs	r3, r4
    3aa8:	2200      	movs	r2, #0
    3aaa:	3343      	adds	r3, #67	; 0x43
    3aac:	701a      	strb	r2, [r3, #0]
    3aae:	6863      	ldr	r3, [r4, #4]
    3ab0:	60a3      	str	r3, [r4, #8]
    3ab2:	2b00      	cmp	r3, #0
    3ab4:	db5c      	blt.n	3b70 <_printf_i+0x1d0>
    3ab6:	2204      	movs	r2, #4
    3ab8:	6821      	ldr	r1, [r4, #0]
    3aba:	4391      	bics	r1, r2
    3abc:	6021      	str	r1, [r4, #0]
    3abe:	2d00      	cmp	r5, #0
    3ac0:	d158      	bne.n	3b74 <_printf_i+0x1d4>
    3ac2:	9e04      	ldr	r6, [sp, #16]
    3ac4:	2b00      	cmp	r3, #0
    3ac6:	d064      	beq.n	3b92 <_printf_i+0x1f2>
    3ac8:	0026      	movs	r6, r4
    3aca:	9b03      	ldr	r3, [sp, #12]
    3acc:	3642      	adds	r6, #66	; 0x42
    3ace:	781b      	ldrb	r3, [r3, #0]
    3ad0:	7033      	strb	r3, [r6, #0]
    3ad2:	e05e      	b.n	3b92 <_printf_i+0x1f2>
    3ad4:	0648      	lsls	r0, r1, #25
    3ad6:	d5da      	bpl.n	3a8e <_printf_i+0xee>
    3ad8:	b2ad      	uxth	r5, r5
    3ada:	e7d8      	b.n	3a8e <_printf_i+0xee>
    3adc:	6809      	ldr	r1, [r1, #0]
    3ade:	681a      	ldr	r2, [r3, #0]
    3ae0:	0608      	lsls	r0, r1, #24
    3ae2:	d505      	bpl.n	3af0 <_printf_i+0x150>
    3ae4:	1d11      	adds	r1, r2, #4
    3ae6:	6019      	str	r1, [r3, #0]
    3ae8:	6813      	ldr	r3, [r2, #0]
    3aea:	6962      	ldr	r2, [r4, #20]
    3aec:	601a      	str	r2, [r3, #0]
    3aee:	e006      	b.n	3afe <_printf_i+0x15e>
    3af0:	0649      	lsls	r1, r1, #25
    3af2:	d5f7      	bpl.n	3ae4 <_printf_i+0x144>
    3af4:	1d11      	adds	r1, r2, #4
    3af6:	6019      	str	r1, [r3, #0]
    3af8:	6813      	ldr	r3, [r2, #0]
    3afa:	8aa2      	ldrh	r2, [r4, #20]
    3afc:	801a      	strh	r2, [r3, #0]
    3afe:	2300      	movs	r3, #0
    3b00:	9e04      	ldr	r6, [sp, #16]
    3b02:	6123      	str	r3, [r4, #16]
    3b04:	e054      	b.n	3bb0 <_printf_i+0x210>
    3b06:	681a      	ldr	r2, [r3, #0]
    3b08:	1d11      	adds	r1, r2, #4
    3b0a:	6019      	str	r1, [r3, #0]
    3b0c:	6816      	ldr	r6, [r2, #0]
    3b0e:	2100      	movs	r1, #0
    3b10:	6862      	ldr	r2, [r4, #4]
    3b12:	0030      	movs	r0, r6
    3b14:	f000 f86a 	bl	3bec <memchr>
    3b18:	2800      	cmp	r0, #0
    3b1a:	d001      	beq.n	3b20 <_printf_i+0x180>
    3b1c:	1b80      	subs	r0, r0, r6
    3b1e:	6060      	str	r0, [r4, #4]
    3b20:	6863      	ldr	r3, [r4, #4]
    3b22:	6123      	str	r3, [r4, #16]
    3b24:	2300      	movs	r3, #0
    3b26:	9a04      	ldr	r2, [sp, #16]
    3b28:	7013      	strb	r3, [r2, #0]
    3b2a:	e041      	b.n	3bb0 <_printf_i+0x210>
    3b2c:	6923      	ldr	r3, [r4, #16]
    3b2e:	0032      	movs	r2, r6
    3b30:	9906      	ldr	r1, [sp, #24]
    3b32:	9805      	ldr	r0, [sp, #20]
    3b34:	9d07      	ldr	r5, [sp, #28]
    3b36:	47a8      	blx	r5
    3b38:	1c43      	adds	r3, r0, #1
    3b3a:	d043      	beq.n	3bc4 <_printf_i+0x224>
    3b3c:	6823      	ldr	r3, [r4, #0]
    3b3e:	2500      	movs	r5, #0
    3b40:	079b      	lsls	r3, r3, #30
    3b42:	d40f      	bmi.n	3b64 <_printf_i+0x1c4>
    3b44:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3b46:	68e0      	ldr	r0, [r4, #12]
    3b48:	4298      	cmp	r0, r3
    3b4a:	da3d      	bge.n	3bc8 <_printf_i+0x228>
    3b4c:	0018      	movs	r0, r3
    3b4e:	e03b      	b.n	3bc8 <_printf_i+0x228>
    3b50:	0022      	movs	r2, r4
    3b52:	2301      	movs	r3, #1
    3b54:	3219      	adds	r2, #25
    3b56:	9906      	ldr	r1, [sp, #24]
    3b58:	9805      	ldr	r0, [sp, #20]
    3b5a:	9e07      	ldr	r6, [sp, #28]
    3b5c:	47b0      	blx	r6
    3b5e:	1c43      	adds	r3, r0, #1
    3b60:	d030      	beq.n	3bc4 <_printf_i+0x224>
    3b62:	3501      	adds	r5, #1
    3b64:	68e3      	ldr	r3, [r4, #12]
    3b66:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3b68:	1a9b      	subs	r3, r3, r2
    3b6a:	429d      	cmp	r5, r3
    3b6c:	dbf0      	blt.n	3b50 <_printf_i+0x1b0>
    3b6e:	e7e9      	b.n	3b44 <_printf_i+0x1a4>
    3b70:	2d00      	cmp	r5, #0
    3b72:	d0a9      	beq.n	3ac8 <_printf_i+0x128>
    3b74:	9e04      	ldr	r6, [sp, #16]
    3b76:	0028      	movs	r0, r5
    3b78:	0039      	movs	r1, r7
    3b7a:	f7ff fabb 	bl	30f4 <__aeabi_uidivmod>
    3b7e:	9b03      	ldr	r3, [sp, #12]
    3b80:	3e01      	subs	r6, #1
    3b82:	5c5b      	ldrb	r3, [r3, r1]
    3b84:	0028      	movs	r0, r5
    3b86:	7033      	strb	r3, [r6, #0]
    3b88:	0039      	movs	r1, r7
    3b8a:	f7ff fa2d 	bl	2fe8 <__udivsi3>
    3b8e:	1e05      	subs	r5, r0, #0
    3b90:	d1f1      	bne.n	3b76 <_printf_i+0x1d6>
    3b92:	2f08      	cmp	r7, #8
    3b94:	d109      	bne.n	3baa <_printf_i+0x20a>
    3b96:	6823      	ldr	r3, [r4, #0]
    3b98:	07db      	lsls	r3, r3, #31
    3b9a:	d506      	bpl.n	3baa <_printf_i+0x20a>
    3b9c:	6863      	ldr	r3, [r4, #4]
    3b9e:	6922      	ldr	r2, [r4, #16]
    3ba0:	4293      	cmp	r3, r2
    3ba2:	dc02      	bgt.n	3baa <_printf_i+0x20a>
    3ba4:	2330      	movs	r3, #48	; 0x30
    3ba6:	3e01      	subs	r6, #1
    3ba8:	7033      	strb	r3, [r6, #0]
    3baa:	9b04      	ldr	r3, [sp, #16]
    3bac:	1b9b      	subs	r3, r3, r6
    3bae:	6123      	str	r3, [r4, #16]
    3bb0:	9b07      	ldr	r3, [sp, #28]
    3bb2:	aa09      	add	r2, sp, #36	; 0x24
    3bb4:	9300      	str	r3, [sp, #0]
    3bb6:	0021      	movs	r1, r4
    3bb8:	9b06      	ldr	r3, [sp, #24]
    3bba:	9805      	ldr	r0, [sp, #20]
    3bbc:	f7ff fe82 	bl	38c4 <_printf_common>
    3bc0:	1c43      	adds	r3, r0, #1
    3bc2:	d1b3      	bne.n	3b2c <_printf_i+0x18c>
    3bc4:	2001      	movs	r0, #1
    3bc6:	4240      	negs	r0, r0
    3bc8:	b00b      	add	sp, #44	; 0x2c
    3bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3bcc:	00003ddc 	.word	0x00003ddc
    3bd0:	00003dcb 	.word	0x00003dcb

00003bd4 <__ascii_wctomb>:
    3bd4:	1e0b      	subs	r3, r1, #0
    3bd6:	d004      	beq.n	3be2 <__ascii_wctomb+0xe>
    3bd8:	2aff      	cmp	r2, #255	; 0xff
    3bda:	d904      	bls.n	3be6 <__ascii_wctomb+0x12>
    3bdc:	238a      	movs	r3, #138	; 0x8a
    3bde:	6003      	str	r3, [r0, #0]
    3be0:	3b8b      	subs	r3, #139	; 0x8b
    3be2:	0018      	movs	r0, r3
    3be4:	4770      	bx	lr
    3be6:	700a      	strb	r2, [r1, #0]
    3be8:	2301      	movs	r3, #1
    3bea:	e7fa      	b.n	3be2 <__ascii_wctomb+0xe>

00003bec <memchr>:
    3bec:	b2c9      	uxtb	r1, r1
    3bee:	1882      	adds	r2, r0, r2
    3bf0:	4290      	cmp	r0, r2
    3bf2:	d101      	bne.n	3bf8 <memchr+0xc>
    3bf4:	2000      	movs	r0, #0
    3bf6:	4770      	bx	lr
    3bf8:	7803      	ldrb	r3, [r0, #0]
    3bfa:	428b      	cmp	r3, r1
    3bfc:	d0fb      	beq.n	3bf6 <memchr+0xa>
    3bfe:	3001      	adds	r0, #1
    3c00:	e7f6      	b.n	3bf0 <memchr+0x4>

00003c02 <memmove>:
    3c02:	b510      	push	{r4, lr}
    3c04:	4288      	cmp	r0, r1
    3c06:	d902      	bls.n	3c0e <memmove+0xc>
    3c08:	188b      	adds	r3, r1, r2
    3c0a:	4298      	cmp	r0, r3
    3c0c:	d308      	bcc.n	3c20 <memmove+0x1e>
    3c0e:	2300      	movs	r3, #0
    3c10:	429a      	cmp	r2, r3
    3c12:	d007      	beq.n	3c24 <memmove+0x22>
    3c14:	5ccc      	ldrb	r4, [r1, r3]
    3c16:	54c4      	strb	r4, [r0, r3]
    3c18:	3301      	adds	r3, #1
    3c1a:	e7f9      	b.n	3c10 <memmove+0xe>
    3c1c:	5c8b      	ldrb	r3, [r1, r2]
    3c1e:	5483      	strb	r3, [r0, r2]
    3c20:	3a01      	subs	r2, #1
    3c22:	d2fb      	bcs.n	3c1c <memmove+0x1a>
    3c24:	bd10      	pop	{r4, pc}

00003c26 <_realloc_r>:
    3c26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c28:	0007      	movs	r7, r0
    3c2a:	000d      	movs	r5, r1
    3c2c:	0016      	movs	r6, r2
    3c2e:	2900      	cmp	r1, #0
    3c30:	d105      	bne.n	3c3e <_realloc_r+0x18>
    3c32:	0011      	movs	r1, r2
    3c34:	f7ff fb1e 	bl	3274 <_malloc_r>
    3c38:	0004      	movs	r4, r0
    3c3a:	0020      	movs	r0, r4
    3c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3c3e:	2a00      	cmp	r2, #0
    3c40:	d103      	bne.n	3c4a <_realloc_r+0x24>
    3c42:	f7ff facd 	bl	31e0 <_free_r>
    3c46:	0034      	movs	r4, r6
    3c48:	e7f7      	b.n	3c3a <_realloc_r+0x14>
    3c4a:	f000 f812 	bl	3c72 <_malloc_usable_size_r>
    3c4e:	002c      	movs	r4, r5
    3c50:	4286      	cmp	r6, r0
    3c52:	d9f2      	bls.n	3c3a <_realloc_r+0x14>
    3c54:	0031      	movs	r1, r6
    3c56:	0038      	movs	r0, r7
    3c58:	f7ff fb0c 	bl	3274 <_malloc_r>
    3c5c:	1e04      	subs	r4, r0, #0
    3c5e:	d0ec      	beq.n	3c3a <_realloc_r+0x14>
    3c60:	0029      	movs	r1, r5
    3c62:	0032      	movs	r2, r6
    3c64:	f7ff faaa 	bl	31bc <memcpy>
    3c68:	0029      	movs	r1, r5
    3c6a:	0038      	movs	r0, r7
    3c6c:	f7ff fab8 	bl	31e0 <_free_r>
    3c70:	e7e3      	b.n	3c3a <_realloc_r+0x14>

00003c72 <_malloc_usable_size_r>:
    3c72:	1f0b      	subs	r3, r1, #4
    3c74:	681b      	ldr	r3, [r3, #0]
    3c76:	1f18      	subs	r0, r3, #4
    3c78:	2b00      	cmp	r3, #0
    3c7a:	da01      	bge.n	3c80 <_malloc_usable_size_r+0xe>
    3c7c:	580b      	ldr	r3, [r1, r0]
    3c7e:	18c0      	adds	r0, r0, r3
    3c80:	4770      	bx	lr
    3c82:	0000      	movs	r0, r0
    3c84:	42000800 	.word	0x42000800
    3c88:	42000c00 	.word	0x42000c00
    3c8c:	42001000 	.word	0x42001000
    3c90:	42001400 	.word	0x42001400
    3c94:	42001800 	.word	0x42001800
    3c98:	42001c00 	.word	0x42001c00
    3c9c:	00000020 	.word	0x00000020
    3ca0:	0064656c 	.word	0x0064656c
    3ca4:	696c6156 	.word	0x696c6156
    3ca8:	6f632064 	.word	0x6f632064
    3cac:	6e616d6d 	.word	0x6e616d6d
    3cb0:	000a0d64 	.word	0x000a0d64
    3cb4:	616c6544 	.word	0x616c6544
    3cb8:	202d2079 	.word	0x202d2079
    3cbc:	0a0d6425 	.word	0x0a0d6425
    3cc0:	00000000 	.word	0x00000000
    3cc4:	61766e49 	.word	0x61766e49
    3cc8:	2064696c 	.word	0x2064696c
    3ccc:	6d6d6f63 	.word	0x6d6d6f63
    3cd0:	0d646e61 	.word	0x0d646e61
    3cd4:	0000000a 	.word	0x0000000a
    3cd8:	2044454c 	.word	0x2044454c
    3cdc:	75657551 	.word	0x75657551
    3ce0:	75462065 	.word	0x75462065
    3ce4:	21216c6c 	.word	0x21216c6c
    3ce8:	00000a0d 	.word	0x00000a0d
    3cec:	00006325 	.word	0x00006325
    3cf0:	454c4449 	.word	0x454c4449
    3cf4:	00000000 	.word	0x00000000
    3cf8:	000024d8 	.word	0x000024d8
    3cfc:	000024d8 	.word	0x000024d8
    3d00:	000024d8 	.word	0x000024d8
    3d04:	00002450 	.word	0x00002450
    3d08:	0000251a 	.word	0x0000251a
    3d0c:	00002534 	.word	0x00002534
    3d10:	000024d8 	.word	0x000024d8
    3d14:	000024d8 	.word	0x000024d8
    3d18:	00002450 	.word	0x00002450
    3d1c:	0000251a 	.word	0x0000251a
    3d20:	20726d54 	.word	0x20726d54
    3d24:	00637653 	.word	0x00637653
    3d28:	00002656 	.word	0x00002656
    3d2c:	00002652 	.word	0x00002652
    3d30:	00002652 	.word	0x00002652
    3d34:	000026b8 	.word	0x000026b8
    3d38:	000026b8 	.word	0x000026b8
    3d3c:	0000266a 	.word	0x0000266a
    3d40:	0000265c 	.word	0x0000265c
    3d44:	00002670 	.word	0x00002670
    3d48:	000026a6 	.word	0x000026a6
    3d4c:	00002878 	.word	0x00002878
    3d50:	00002858 	.word	0x00002858
    3d54:	00002858 	.word	0x00002858
    3d58:	000028e4 	.word	0x000028e4
    3d5c:	0000286a 	.word	0x0000286a
    3d60:	00002886 	.word	0x00002886
    3d64:	0000285c 	.word	0x0000285c
    3d68:	00002894 	.word	0x00002894
    3d6c:	000028d4 	.word	0x000028d4
    3d70:	54524155 	.word	0x54524155
    3d74:	73615420 	.word	0x73615420
    3d78:	0000006b 	.word	0x0000006b
    3d7c:	2044454c 	.word	0x2044454c
    3d80:	6b736154 	.word	0x6b736154
    3d84:	00000000 	.word	0x00000000
    3d88:	2044454c 	.word	0x2044454c
    3d8c:	6e696c42 	.word	0x6e696c42
    3d90:	7461206b 	.word	0x7461206b
    3d94:	25202d20 	.word	0x25202d20
    3d98:	736d2064 	.word	0x736d2064
    3d9c:	00000a0d 	.word	0x00000a0d
    3da0:	6c6c6548 	.word	0x6c6c6548
    3da4:	6f57206f 	.word	0x6f57206f
    3da8:	0d646c72 	.word	0x0d646c72
    3dac:	0000000a 	.word	0x0000000a
    3db0:	4f500043 	.word	0x4f500043
    3db4:	00584953 	.word	0x00584953
    3db8:	002e      	.short	0x002e
    3dba:	2d23      	.short	0x2d23
    3dbc:	00202b30 	.word	0x00202b30
    3dc0:	004c6c68 	.word	0x004c6c68
    3dc4:	45676665 	.word	0x45676665
    3dc8:	4746      	.short	0x4746
    3dca:	00          	.byte	0x00
    3dcb:	30          	.byte	0x30
    3dcc:	34333231 	.word	0x34333231
    3dd0:	38373635 	.word	0x38373635
    3dd4:	43424139 	.word	0x43424139
    3dd8:	00464544 	.word	0x00464544
    3ddc:	33323130 	.word	0x33323130
    3de0:	37363534 	.word	0x37363534
    3de4:	62613938 	.word	0x62613938
    3de8:	66656463 	.word	0x66656463
	...

00003ded <_ctype_>:
    3ded:	20202000 20202020 28282020 20282828     .         ((((( 
    3dfd:	20202020 20202020 20202020 20202020                     
    3e0d:	10108820 10101010 10101010 10101010      ...............
    3e1d:	04040410 04040404 10040404 10101010     ................
    3e2d:	41411010 41414141 01010101 01010101     ..AAAAAA........
    3e3d:	01010101 01010101 01010101 10101010     ................
    3e4d:	42421010 42424242 02020202 02020202     ..BBBBBB........
    3e5d:	02020202 02020202 02020202 10101010     ................
    3e6d:	00000020 00000000 00000000 00000000      ...............
	...

00003ef0 <_init>:
    3ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3ef2:	46c0      	nop			; (mov r8, r8)
    3ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3ef6:	bc08      	pop	{r3}
    3ef8:	469e      	mov	lr, r3
    3efa:	4770      	bx	lr

00003efc <__init_array_start>:
    3efc:	000000dd 	.word	0x000000dd

00003f00 <_fini>:
    3f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f02:	46c0      	nop			; (mov r8, r8)
    3f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3f06:	bc08      	pop	{r3}
    3f08:	469e      	mov	lr, r3
    3f0a:	4770      	bx	lr

00003f0c <__fini_array_start>:
    3f0c:	000000b5 	.word	0x000000b5
